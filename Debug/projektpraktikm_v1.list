
projektpraktikm_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae18  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800afc8  0800afc8  0001afc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b4  0800b4b4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4b4  0800b4b4  0001b4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4bc  0800b4bc  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4bc  0800b4bc  0001b4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4c0  0800b4c0  0001b4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b4c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00000a14  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c08  20000c08  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a27a  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cfb  00000000  00000000  0003a49e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  0003d1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001558  00000000  00000000  0003e808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000285c3  00000000  00000000  0003fd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a3d4  00000000  00000000  00068323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5296  00000000  00000000  000826f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017798d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000772c  00000000  00000000  001779e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800afb0 	.word	0x0800afb0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	0800afb0 	.word	0x0800afb0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <_LCD_SendInternal>:
#define LCD_I2C_TIMEOUT 200

#define COLUMNS 16
#define ROWS 2

HAL_StatusTypeDef _LCD_SendInternal(LCD_HandleTypeDef *dev, uint8_t data, uint8_t flags) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af02      	add	r7, sp, #8
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef res;
    for(int i=0;i<5;i++) {
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	e010      	b.n	8001050 <_LCD_SendInternal+0x38>
        res = HAL_I2C_IsDeviceReady(dev->i2c, dev->i2c_addr, 1, LCD_I2C_TIMEOUT);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6858      	ldr	r0, [r3, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b299      	uxth	r1, r3
 8001038:	23c8      	movs	r3, #200	; 0xc8
 800103a:	2201      	movs	r2, #1
 800103c:	f002 ffb2 	bl	8003fa4 <HAL_I2C_IsDeviceReady>
 8001040:	4603      	mov	r3, r0
 8001042:	75fb      	strb	r3, [r7, #23]
        if(res == HAL_OK)
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <_LCD_SendInternal+0x40>
    for(int i=0;i<5;i++) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3301      	adds	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	2b04      	cmp	r3, #4
 8001054:	ddeb      	ble.n	800102e <_LCD_SendInternal+0x16>
 8001056:	e000      	b.n	800105a <_LCD_SendInternal+0x42>
            break;
 8001058:	bf00      	nop
    }
    if(res!=HAL_OK) {
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <_LCD_SendInternal+0x4c>
    	return res;
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	e044      	b.n	80010ee <_LCD_SendInternal+0xd6>
    }


    uint8_t up = data & 0xF0;
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	f023 030f 	bic.w	r3, r3, #15
 800106a:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	73bb      	strb	r3, [r7, #14]
    uint8_t backlight = dev->backlight_enable?BACKLIGHT:0;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7a1b      	ldrb	r3, [r3, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <_LCD_SendInternal+0x66>
 800107a:	2308      	movs	r3, #8
 800107c:	e000      	b.n	8001080 <_LCD_SendInternal+0x68>
 800107e:	2300      	movs	r3, #0
 8001080:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|backlight|PIN_EN;
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	78bb      	ldrb	r3, [r7, #2]
 8001086:	4313      	orrs	r3, r2
 8001088:	b2da      	uxtb	r2, r3
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	4313      	orrs	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	b2db      	uxtb	r3, r3
 8001096:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|backlight;
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	78bb      	ldrb	r3, [r7, #2]
 800109c:	4313      	orrs	r3, r2
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	7b7b      	ldrb	r3, [r7, #13]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|backlight|PIN_EN;
 80010a8:	7bba      	ldrb	r2, [r7, #14]
 80010aa:	78bb      	ldrb	r3, [r7, #2]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	7b7b      	ldrb	r3, [r7, #13]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|backlight;
 80010be:	7bba      	ldrb	r2, [r7, #14]
 80010c0:	78bb      	ldrb	r3, [r7, #2]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	7b7b      	ldrb	r3, [r7, #13]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	72fb      	strb	r3, [r7, #11]

     HAL_I2C_Master_Transmit(dev->i2c,dev->i2c_addr,data_arr,4,LCD_I2C_TIMEOUT);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6858      	ldr	r0, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b299      	uxth	r1, r3
 80010d8:	f107 0208 	add.w	r2, r7, #8
 80010dc:	23c8      	movs	r3, #200	; 0xc8
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2304      	movs	r3, #4
 80010e2:	f002 fe61 	bl	8003da8 <HAL_I2C_Master_Transmit>
        HAL_Delay(LCD_DELAY_MS); //delay afterwards to not overwhelm display
 80010e6:	2005      	movs	r0, #5
 80010e8:	f001 fa40 	bl	800256c <HAL_Delay>
        return res;
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
    //TODO send data_arr to the device

    HAL_Delay(LCD_DELAY_MS); //delay afterwards to not overwhelm display
    return res;
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_LCD_SendCommand>:

HAL_StatusTypeDef _LCD_SendCommand(LCD_HandleTypeDef *dev, uint8_t cmd) {
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, cmd, 0);
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff85 	bl	8001018 <_LCD_SendInternal>
 800110e:	4603      	mov	r3, r0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_LCD_SendData>:

HAL_StatusTypeDef _LCD_SendData(LCD_HandleTypeDef *dev, uint8_t data) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, data, PIN_RS);
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	2201      	movs	r2, #1
 8001128:	4619      	mov	r1, r3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff74 	bl	8001018 <_LCD_SendInternal>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <LCD_Print>:

#define RETURN_IF_NOT_OK if(status!=HAL_OK)return status;

HAL_StatusTypeDef LCD_Print(LCD_HandleTypeDef *dev, const char *str) {
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
    while(*str) {
 8001144:	e00f      	b.n	8001166 <LCD_Print+0x2c>
    	status = _LCD_SendData(dev, (uint8_t)(*str));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ffe3 	bl	8001118 <_LCD_SendData>
 8001152:	4603      	mov	r3, r0
 8001154:	73fb      	strb	r3, [r7, #15]
        RETURN_IF_NOT_OK;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <LCD_Print+0x26>
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	e007      	b.n	8001170 <LCD_Print+0x36>
        str++;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1eb      	bne.n	8001146 <LCD_Print+0xc>
    }
    return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <LCD_Begin>:
    RETURN_IF_NOT_OK;
    status = LCD_Print(dev, " !!! ");
    return status;
}

HAL_StatusTypeDef LCD_Begin(LCD_HandleTypeDef *dev) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	dev->backlight_enable=true;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	721a      	strb	r2, [r3, #8]
	HAL_StatusTypeDef status;

    // 4-bit mode, 2 lines, 5x7 format
    status = _LCD_SendCommand(dev, 0b00110000);
 8001186:	2130      	movs	r1, #48	; 0x30
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ffb4 	bl	80010f6 <_LCD_SendCommand>
 800118e:	4603      	mov	r3, r0
 8001190:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <LCD_Begin+0x24>
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	e01c      	b.n	80011d6 <LCD_Begin+0x5e>

    // display & cursor home (keep this!)
    status = _LCD_SendCommand(dev, 0b00000010);
 800119c:	2102      	movs	r1, #2
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffa9 	bl	80010f6 <_LCD_SendCommand>
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <LCD_Begin+0x3a>
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	e011      	b.n	80011d6 <LCD_Begin+0x5e>

    // display on, right shift, underline off, blink off
    status = _LCD_SendCommand(dev, 0b00001100);
 80011b2:	210c      	movs	r1, #12
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff9e 	bl	80010f6 <_LCD_SendCommand>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <LCD_Begin+0x50>
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	e006      	b.n	80011d6 <LCD_Begin+0x5e>

    // clear display (optional here)
    status = _LCD_SendCommand(dev, 0b00000001);
 80011c8:	2101      	movs	r1, #1
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff93 	bl	80010f6 <_LCD_SendCommand>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
    return status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <LCD_SetCursor>:


HAL_StatusTypeDef LCD_SetCursor(LCD_HandleTypeDef *dev, uint8_t row, uint8_t col) {
 80011de:	b580      	push	{r7, lr}
 80011e0:	b084      	sub	sp, #16
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	460b      	mov	r3, r1
 80011e8:	70fb      	strb	r3, [r7, #3]
 80011ea:	4613      	mov	r3, r2
 80011ec:	70bb      	strb	r3, [r7, #2]
	if(row<0 || row>=ROWS || col<0 || col>=COLUMNS) {
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d802      	bhi.n	80011fa <LCD_SetCursor+0x1c>
 80011f4:	78bb      	ldrb	r3, [r7, #2]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	d901      	bls.n	80011fe <LCD_SetCursor+0x20>
		return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e010      	b.n	8001220 <LCD_SetCursor+0x42>
	}
	uint8_t cmd = row==0?0b10000000:0b11000000;
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <LCD_SetCursor+0x2a>
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	e000      	b.n	800120a <LCD_SetCursor+0x2c>
 8001208:	23c0      	movs	r3, #192	; 0xc0
 800120a:	73fb      	strb	r3, [r7, #15]
	cmd+=col;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	78bb      	ldrb	r3, [r7, #2]
 8001210:	4413      	add	r3, r2
 8001212:	73fb      	strb	r3, [r7, #15]
	return _LCD_SendCommand(dev, cmd);
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	4619      	mov	r1, r3
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff6c 	bl	80010f6 <_LCD_SendCommand>
 800121e:	4603      	mov	r3, r0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <LCD_Clear>:
	vsnprintf(lcd_buffer, COLUMNS + 1, format, args);
	va_end(args);
	return LCD_Print(dev, lcd_buffer);
}

HAL_StatusTypeDef LCD_Clear(LCD_HandleTypeDef *dev) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	return _LCD_SendCommand(dev, 0b00000001);
 8001230:	2101      	movs	r1, #1
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff5f 	bl	80010f6 <_LCD_SendCommand>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	0000      	movs	r0, r0
 8001244:	0000      	movs	r0, r0
	...

08001248 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800124e:	f001 f91b 	bl	8002488 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001252:	f000 f97f 	bl	8001554 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001256:	f000 fc11 	bl	8001a7c <MX_GPIO_Init>
	MX_ETH_Init();
 800125a:	f000 fab3 	bl	80017c4 <MX_ETH_Init>
	MX_USART3_UART_Init();
 800125e:	f000 fbb5 	bl	80019cc <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001262:	f000 fbdd 	bl	8001a20 <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 8001266:	f000 f9df 	bl	8001628 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 800126a:	f000 fb85 	bl	8001978 <MX_USART1_UART_Init>
	MX_I2C2_Init();
 800126e:	f000 faf7 	bl	8001860 <MX_I2C2_Init>
	MX_ADC2_Init();
 8001272:	f000 fa2b 	bl	80016cc <MX_ADC2_Init>
	MX_TIM2_Init();
 8001276:	f000 fb33 	bl	80018e0 <MX_TIM2_Init>
	MX_DAC_Init();
 800127a:	f000 fa79 	bl	8001770 <MX_DAC_Init>
	/* USER CODE BEGIN 2 */
	//initilizieren von Display
	LCD_HandleTypeDef dev;
	dev.i2c = &hi2c2;
 800127e:	4b98      	ldr	r3, [pc, #608]	; (80014e0 <main+0x298>)
 8001280:	607b      	str	r3, [r7, #4]
	dev.i2c_addr = LCD_DEFAULT_ADDR;
 8001282:	234e      	movs	r3, #78	; 0x4e
 8001284:	703b      	strb	r3, [r7, #0]
	dev.backlight_enable = 1;
 8001286:	2301      	movs	r3, #1
 8001288:	723b      	strb	r3, [r7, #8]
	LCD_Begin(&dev);
 800128a:	463b      	mov	r3, r7
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff73 	bl	8001178 <LCD_Begin>
	HAL_DAC_Start(&hdac, CH1_DC);
 8001292:	4b94      	ldr	r3, [pc, #592]	; (80014e4 <main+0x29c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4619      	mov	r1, r3
 8001298:	4893      	ldr	r0, [pc, #588]	; (80014e8 <main+0x2a0>)
 800129a:	f001 fe9a 	bl	8002fd2 <HAL_DAC_Start>
	HAL_TIM_Base_Start(&htim2);
 800129e:	4893      	ldr	r0, [pc, #588]	; (80014ec <main+0x2a4>)
 80012a0:	f004 f838 	bl	8005314 <HAL_TIM_Base_Start>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		LCD_Clear(&dev);
 80012a4:	463b      	mov	r3, r7
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ffbe 	bl	8001228 <LCD_Clear>
		if (state == 0) {
 80012ac:	4b90      	ldr	r3, [pc, #576]	; (80014f0 <main+0x2a8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d11e      	bne.n	80012f2 <main+0xaa>
			DAC->DHR12R1 = DAC_OUT[0];
 80012b4:	4a8f      	ldr	r2, [pc, #572]	; (80014f4 <main+0x2ac>)
 80012b6:	4b90      	ldr	r3, [pc, #576]	; (80014f8 <main+0x2b0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6093      	str	r3, [r2, #8]
			sprintf(msg4, "IDLE");
 80012bc:	498f      	ldr	r1, [pc, #572]	; (80014fc <main+0x2b4>)
 80012be:	4890      	ldr	r0, [pc, #576]	; (8001500 <main+0x2b8>)
 80012c0:	f006 f884 	bl	80073cc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg4, strlen(msg4), 300);
 80012c4:	488e      	ldr	r0, [pc, #568]	; (8001500 <main+0x2b8>)
 80012c6:	f7fe ff93 	bl	80001f0 <strlen>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012d2:	498b      	ldr	r1, [pc, #556]	; (8001500 <main+0x2b8>)
 80012d4:	488b      	ldr	r0, [pc, #556]	; (8001504 <main+0x2bc>)
 80012d6:	f004 fb50 	bl	800597a <HAL_UART_Transmit>
			LCD_Print(&dev, msg4);
 80012da:	463b      	mov	r3, r7
 80012dc:	4988      	ldr	r1, [pc, #544]	; (8001500 <main+0x2b8>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff2b 	bl	800113a <LCD_Print>
			LCD_SetCursor(&dev, 0, 0);
 80012e4:	463b      	mov	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff77 	bl	80011de <LCD_SetCursor>
 80012f0:	e7d8      	b.n	80012a4 <main+0x5c>
		}

		else if (state == 1) {
 80012f2:	4b7f      	ldr	r3, [pc, #508]	; (80014f0 <main+0x2a8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d16d      	bne.n	80013d6 <main+0x18e>
			DAC->DHR12R1 = DAC_OUT[2];
 80012fa:	4a7e      	ldr	r2, [pc, #504]	; (80014f4 <main+0x2ac>)
 80012fc:	4b7e      	ldr	r3, [pc, #504]	; (80014f8 <main+0x2b0>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	6093      	str	r3, [r2, #8]
			HAL_ADC_Start(&hadc1);
 8001302:	4881      	ldr	r0, [pc, #516]	; (8001508 <main+0x2c0>)
 8001304:	f001 f99a 	bl	800263c <HAL_ADC_Start>
			HAL_ADC_Start(&hadc2);
 8001308:	4880      	ldr	r0, [pc, #512]	; (800150c <main+0x2c4>)
 800130a:	f001 f997 	bl	800263c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 800130e:	2164      	movs	r1, #100	; 0x64
 8001310:	487d      	ldr	r0, [pc, #500]	; (8001508 <main+0x2c0>)
 8001312:	f001 fa65 	bl	80027e0 <HAL_ADC_PollForConversion>
			HAL_ADC_PollForConversion(&hadc2, 100);
 8001316:	2164      	movs	r1, #100	; 0x64
 8001318:	487c      	ldr	r0, [pc, #496]	; (800150c <main+0x2c4>)
 800131a:	f001 fa61 	bl	80027e0 <HAL_ADC_PollForConversion>

			raw_vol = HAL_ADC_GetValue(&hadc1);
 800131e:	487a      	ldr	r0, [pc, #488]	; (8001508 <main+0x2c0>)
 8001320:	f001 fae9 	bl	80028f6 <HAL_ADC_GetValue>
 8001324:	4603      	mov	r3, r0
 8001326:	b29a      	uxth	r2, r3
 8001328:	4b79      	ldr	r3, [pc, #484]	; (8001510 <main+0x2c8>)
 800132a:	801a      	strh	r2, [r3, #0]
			raw_input = HAL_ADC_GetValue(&hadc2);
 800132c:	4877      	ldr	r0, [pc, #476]	; (800150c <main+0x2c4>)
 800132e:	f001 fae2 	bl	80028f6 <HAL_ADC_GetValue>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b77      	ldr	r3, [pc, #476]	; (8001514 <main+0x2cc>)
 8001338:	801a      	strh	r2, [r3, #0]

			input = raw_input * (3.3 / 4096);
 800133a:	4b76      	ldr	r3, [pc, #472]	; (8001514 <main+0x2cc>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f900 	bl	8000544 <__aeabi_i2d>
 8001344:	a364      	add	r3, pc, #400	; (adr r3, 80014d8 <main+0x290>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	f7ff f965 	bl	8000618 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f7ff fc57 	bl	8000c08 <__aeabi_d2f>
 800135a:	4603      	mov	r3, r0
 800135c:	4a6e      	ldr	r2, [pc, #440]	; (8001518 <main+0x2d0>)
 800135e:	6013      	str	r3, [r2, #0]
			vol = raw_vol * (3.3 / 4096);
 8001360:	4b6b      	ldr	r3, [pc, #428]	; (8001510 <main+0x2c8>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f8ed 	bl	8000544 <__aeabi_i2d>
 800136a:	a35b      	add	r3, pc, #364	; (adr r3, 80014d8 <main+0x290>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff f952 	bl	8000618 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fc44 	bl	8000c08 <__aeabi_d2f>
 8001380:	4603      	mov	r3, r0
 8001382:	4a66      	ldr	r2, [pc, #408]	; (800151c <main+0x2d4>)
 8001384:	6013      	str	r3, [r2, #0]

			m_arr[j]=vol;
 8001386:	4b66      	ldr	r3, [pc, #408]	; (8001520 <main+0x2d8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a64      	ldr	r2, [pc, #400]	; (800151c <main+0x2d4>)
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	4965      	ldr	r1, [pc, #404]	; (8001524 <main+0x2dc>)
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	601a      	str	r2, [r3, #0]
			j++;
 8001396:	4b62      	ldr	r3, [pc, #392]	; (8001520 <main+0x2d8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a60      	ldr	r2, [pc, #384]	; (8001520 <main+0x2d8>)
 800139e:	6013      	str	r3, [r2, #0]
			sprintf(msg2, "measuring");
 80013a0:	4961      	ldr	r1, [pc, #388]	; (8001528 <main+0x2e0>)
 80013a2:	4862      	ldr	r0, [pc, #392]	; (800152c <main+0x2e4>)
 80013a4:	f006 f812 	bl	80073cc <siprintf>
			LCD_SetCursor(&dev, 0, 0);
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff15 	bl	80011de <LCD_SetCursor>
			LCD_Print(&dev, msg2);
 80013b4:	463b      	mov	r3, r7
 80013b6:	495d      	ldr	r1, [pc, #372]	; (800152c <main+0x2e4>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff febe 	bl	800113a <LCD_Print>
			HAL_Delay(100);
 80013be:	2064      	movs	r0, #100	; 0x64
 80013c0:	f001 f8d4 	bl	800256c <HAL_Delay>
			if (j >= 30){
 80013c4:	4b56      	ldr	r3, [pc, #344]	; (8001520 <main+0x2d8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b1d      	cmp	r3, #29
 80013ca:	f77f af6b 	ble.w	80012a4 <main+0x5c>
				state = 3;
 80013ce:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <main+0x2a8>)
 80013d0:	2203      	movs	r2, #3
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	e766      	b.n	80012a4 <main+0x5c>
			}

		} else if (state == 2) {
 80013d6:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <main+0x2a8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d116      	bne.n	800140c <main+0x1c4>
			sprintf(msg3, "MESSURE CANCEL");
 80013de:	4954      	ldr	r1, [pc, #336]	; (8001530 <main+0x2e8>)
 80013e0:	4854      	ldr	r0, [pc, #336]	; (8001534 <main+0x2ec>)
 80013e2:	f005 fff3 	bl	80073cc <siprintf>
			LCD_SetCursor(&dev, 0, 0);
 80013e6:	463b      	mov	r3, r7
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fef6 	bl	80011de <LCD_SetCursor>
			LCD_Print(&dev, msg6);
 80013f2:	463b      	mov	r3, r7
 80013f4:	4950      	ldr	r1, [pc, #320]	; (8001538 <main+0x2f0>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fe9f 	bl	800113a <LCD_Print>
			HAL_Delay(3000);
 80013fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001400:	f001 f8b4 	bl	800256c <HAL_Delay>
			state = 0;
 8001404:	4b3a      	ldr	r3, [pc, #232]	; (80014f0 <main+0x2a8>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e74b      	b.n	80012a4 <main+0x5c>
		} else if (state == 3) {
 800140c:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <main+0x2a8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b03      	cmp	r3, #3
 8001412:	f47f af47 	bne.w	80012a4 <main+0x5c>
			for(int i = 0; i <= mes-1; i++){
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	e023      	b.n	8001464 <main+0x21c>
				tau_i = (m_arr[i+1]-m_arr[i])/200;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3301      	adds	r3, #1
 8001420:	4a40      	ldr	r2, [pc, #256]	; (8001524 <main+0x2dc>)
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	ed93 7a00 	vldr	s14, [r3]
 800142a:	4a3e      	ldr	r2, [pc, #248]	; (8001524 <main+0x2dc>)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee37 7a67 	vsub.f32	s14, s14, s15
 800143a:	eddf 6a40 	vldr	s13, [pc, #256]	; 800153c <main+0x2f4>
 800143e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001442:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <main+0x2f8>)
 8001444:	edc3 7a00 	vstr	s15, [r3]
				sum = sum+tau_i;
 8001448:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <main+0x2fc>)
 800144a:	ed93 7a00 	vldr	s14, [r3]
 800144e:	4b3c      	ldr	r3, [pc, #240]	; (8001540 <main+0x2f8>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001458:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <main+0x2fc>)
 800145a:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i <= mes-1; i++){
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3301      	adds	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	ee07 3a90 	vmov	s15, r3
 800146a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800146e:	4b36      	ldr	r3, [pc, #216]	; (8001548 <main+0x300>)
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001478:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800147c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	d9ca      	bls.n	800141c <main+0x1d4>
			}
			tau_avr = sum/3;
 8001486:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <main+0x2fc>)
 8001488:	ed93 7a00 	vldr	s14, [r3]
 800148c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001490:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <main+0x304>)
 8001496:	edc3 7a00 	vstr	s15, [r3]
			sprintf(msg3, "tau=%.2f", tau_avr);
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <main+0x304>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f862 	bl	8000568 <__aeabi_f2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4929      	ldr	r1, [pc, #164]	; (8001550 <main+0x308>)
 80014aa:	4822      	ldr	r0, [pc, #136]	; (8001534 <main+0x2ec>)
 80014ac:	f005 ff8e 	bl	80073cc <siprintf>
			LCD_SetCursor(&dev, 0, 0);
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fe91 	bl	80011de <LCD_SetCursor>
			LCD_Print(&dev, msg3);
 80014bc:	463b      	mov	r3, r7
 80014be:	491d      	ldr	r1, [pc, #116]	; (8001534 <main+0x2ec>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe3a 	bl	800113a <LCD_Print>
			HAL_Delay(5000);
 80014c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80014ca:	f001 f84f 	bl	800256c <HAL_Delay>
			state = 0;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <main+0x2a8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
		LCD_Clear(&dev);
 80014d4:	e6e6      	b.n	80012a4 <main+0x5c>
 80014d6:	bf00      	nop
 80014d8:	66666666 	.word	0x66666666
 80014dc:	3f4a6666 	.word	0x3f4a6666
 80014e0:	200005b4 	.word	0x200005b4
 80014e4:	2000021c 	.word	0x2000021c
 80014e8:	200004f0 	.word	0x200004f0
 80014ec:	20000608 	.word	0x20000608
 80014f0:	20000be4 	.word	0x20000be4
 80014f4:	40007400 	.word	0x40007400
 80014f8:	20000000 	.word	0x20000000
 80014fc:	0800afc8 	.word	0x0800afc8
 8001500:	20000240 	.word	0x20000240
 8001504:	20000694 	.word	0x20000694
 8001508:	20000460 	.word	0x20000460
 800150c:	200004a8 	.word	0x200004a8
 8001510:	20000218 	.word	0x20000218
 8001514:	2000021a 	.word	0x2000021a
 8001518:	20000214 	.word	0x20000214
 800151c:	20000210 	.word	0x20000210
 8001520:	200002e0 	.word	0x200002e0
 8001524:	20000260 	.word	0x20000260
 8001528:	0800afd0 	.word	0x0800afd0
 800152c:	20000220 	.word	0x20000220
 8001530:	0800afdc 	.word	0x0800afdc
 8001534:	2000022c 	.word	0x2000022c
 8001538:	2000024c 	.word	0x2000024c
 800153c:	43480000 	.word	0x43480000
 8001540:	200002e4 	.word	0x200002e4
 8001544:	200002dc 	.word	0x200002dc
 8001548:	20000010 	.word	0x20000010
 800154c:	200002d8 	.word	0x200002d8
 8001550:	0800afec 	.word	0x0800afec

08001554 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b094      	sub	sp, #80	; 0x50
 8001558:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	2230      	movs	r2, #48	; 0x30
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f005 f8aa 	bl	80066bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	4b28      	ldr	r3, [pc, #160]	; (8001620 <SystemClock_Config+0xcc>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	4a27      	ldr	r2, [pc, #156]	; (8001620 <SystemClock_Config+0xcc>)
 8001582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001586:	6413      	str	r3, [r2, #64]	; 0x40
 8001588:	4b25      	ldr	r3, [pc, #148]	; (8001620 <SystemClock_Config+0xcc>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <SystemClock_Config+0xd0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a21      	ldr	r2, [pc, #132]	; (8001624 <SystemClock_Config+0xd0>)
 800159e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <SystemClock_Config+0xd0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b0:	2301      	movs	r3, #1
 80015b2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ba:	2302      	movs	r3, #2
 80015bc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80015c4:	2308      	movs	r3, #8
 80015c6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80015c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015cc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80015d2:	2307      	movs	r3, #7
 80015d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 f9b2 	bl	8004944 <HAL_RCC_OscConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x96>
		Error_Handler();
 80015e6:	f000 fb2d 	bl	8001c44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80015ea:	230f      	movs	r3, #15
 80015ec:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ee:	2302      	movs	r3, #2
 80015f0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015fa:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001600:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	2105      	movs	r1, #5
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fc13 	bl	8004e34 <HAL_RCC_ClockConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0xc4>
		Error_Handler();
 8001614:	f000 fb16 	bl	8001c44 <Error_Handler>
	}
}
 8001618:	bf00      	nop
 800161a:	3750      	adds	r7, #80	; 0x50
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	40007000 	.word	0x40007000

08001628 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800162e:	463b      	mov	r3, r7
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800163a:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <MX_ADC1_Init+0x98>)
 800163c:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <MX_ADC1_Init+0x9c>)
 800163e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <MX_ADC1_Init+0x98>)
 8001642:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001646:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <MX_ADC1_Init+0x98>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_ADC1_Init+0x98>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <MX_ADC1_Init+0x98>)
 8001656:	2200      	movs	r2, #0
 8001658:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_ADC1_Init+0x98>)
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_ADC1_Init+0x98>)
 8001664:	2200      	movs	r2, #0
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_ADC1_Init+0x98>)
 800166a:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <MX_ADC1_Init+0xa0>)
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_ADC1_Init+0x98>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_ADC1_Init+0x98>)
 8001676:	2201      	movs	r2, #1
 8001678:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_ADC1_Init+0x98>)
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_ADC1_Init+0x98>)
 8001684:	2201      	movs	r2, #1
 8001686:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001688:	480d      	ldr	r0, [pc, #52]	; (80016c0 <MX_ADC1_Init+0x98>)
 800168a:	f000 ff93 	bl	80025b4 <HAL_ADC_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001694:	f000 fad6 	bl	8001c44 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001698:	2303      	movs	r3, #3
 800169a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800169c:	2301      	movs	r3, #1
 800169e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80016a4:	463b      	mov	r3, r7
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_ADC1_Init+0x98>)
 80016aa:	f001 f931 	bl	8002910 <HAL_ADC_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_ADC1_Init+0x90>
		Error_Handler();
 80016b4:	f000 fac6 	bl	8001c44 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000460 	.word	0x20000460
 80016c4:	40012000 	.word	0x40012000
 80016c8:	0f000001 	.word	0x0f000001

080016cc <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80016d2:	463b      	mov	r3, r7
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <MX_ADC2_Init+0x98>)
 80016e0:	4a21      	ldr	r2, [pc, #132]	; (8001768 <MX_ADC2_Init+0x9c>)
 80016e2:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016e4:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <MX_ADC2_Init+0x98>)
 80016e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016ea:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_ADC2_Init+0x98>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <MX_ADC2_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_ADC2_Init+0x98>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <MX_ADC2_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_ADC2_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_ADC2_Init+0x98>)
 800170e:	4a17      	ldr	r2, [pc, #92]	; (800176c <MX_ADC2_Init+0xa0>)
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_ADC2_Init+0x98>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_ADC2_Init+0x98>)
 800171a:	2201      	movs	r2, #1
 800171c:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_ADC2_Init+0x98>)
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_ADC2_Init+0x98>)
 8001728:	2201      	movs	r2, #1
 800172a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800172c:	480d      	ldr	r0, [pc, #52]	; (8001764 <MX_ADC2_Init+0x98>)
 800172e:	f000 ff41 	bl	80025b4 <HAL_ADC_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_ADC2_Init+0x70>
		Error_Handler();
 8001738:	f000 fa84 	bl	8001c44 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 800173c:	230d      	movs	r3, #13
 800173e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001740:	2301      	movs	r3, #1
 8001742:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001748:	463b      	mov	r3, r7
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_ADC2_Init+0x98>)
 800174e:	f001 f8df 	bl	8002910 <HAL_ADC_ConfigChannel>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_ADC2_Init+0x90>
		Error_Handler();
 8001758:	f000 fa74 	bl	8001c44 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200004a8 	.word	0x200004a8
 8001768:	40012100 	.word	0x40012100
 800176c:	0f000001 	.word	0x0f000001

08001770 <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8001776:	463b      	mov	r3, r7
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]

	/* USER CODE END DAC_Init 1 */

	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_DAC_Init+0x4c>)
 8001780:	4a0f      	ldr	r2, [pc, #60]	; (80017c0 <MX_DAC_Init+0x50>)
 8001782:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8001784:	480d      	ldr	r0, [pc, #52]	; (80017bc <MX_DAC_Init+0x4c>)
 8001786:	f001 fc02 	bl	8002f8e <HAL_DAC_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_DAC_Init+0x24>
		Error_Handler();
 8001790:	f000 fa58 	bl	8001c44 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001794:	2300      	movs	r3, #0
 8001796:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 800179c:	463b      	mov	r3, r7
 800179e:	2200      	movs	r2, #0
 80017a0:	4619      	mov	r1, r3
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <MX_DAC_Init+0x4c>)
 80017a4:	f001 fc67 	bl	8003076 <HAL_DAC_ConfigChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_DAC_Init+0x42>
		Error_Handler();
 80017ae:	f000 fa49 	bl	8001c44 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200004f0 	.word	0x200004f0
 80017c0:	40007400 	.word	0x40007400

080017c4 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <MX_ETH_Init+0x84>)
 80017ca:	4a20      	ldr	r2, [pc, #128]	; (800184c <MX_ETH_Init+0x88>)
 80017cc:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <MX_ETH_Init+0x8c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <MX_ETH_Init+0x8c>)
 80017d6:	2280      	movs	r2, #128	; 0x80
 80017d8:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <MX_ETH_Init+0x8c>)
 80017dc:	22e1      	movs	r2, #225	; 0xe1
 80017de:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_ETH_Init+0x8c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_ETH_Init+0x8c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_ETH_Init+0x8c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <MX_ETH_Init+0x84>)
 80017f4:	4a16      	ldr	r2, [pc, #88]	; (8001850 <MX_ETH_Init+0x8c>)
 80017f6:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <MX_ETH_Init+0x84>)
 80017fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017fe:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_ETH_Init+0x84>)
 8001802:	4a14      	ldr	r2, [pc, #80]	; (8001854 <MX_ETH_Init+0x90>)
 8001804:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <MX_ETH_Init+0x84>)
 8001808:	4a13      	ldr	r2, [pc, #76]	; (8001858 <MX_ETH_Init+0x94>)
 800180a:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_ETH_Init+0x84>)
 800180e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001812:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <MX_ETH_Init+0x84>)
 8001816:	f001 fc7d 	bl	8003114 <HAL_ETH_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_ETH_Init+0x60>
		Error_Handler();
 8001820:	f000 fa10 	bl	8001c44 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8001824:	2238      	movs	r2, #56	; 0x38
 8001826:	2100      	movs	r1, #0
 8001828:	480c      	ldr	r0, [pc, #48]	; (800185c <MX_ETH_Init+0x98>)
 800182a:	f004 ff47 	bl	80066bc <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MX_ETH_Init+0x98>)
 8001830:	2221      	movs	r2, #33	; 0x21
 8001832:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_ETH_Init+0x98>)
 8001836:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800183a:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <MX_ETH_Init+0x98>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000504 	.word	0x20000504
 800184c:	40028000 	.word	0x40028000
 8001850:	20000be8 	.word	0x20000be8
 8001854:	200003c0 	.word	0x200003c0
 8001858:	20000320 	.word	0x20000320
 800185c:	200002e8 	.word	0x200002e8

08001860 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <MX_I2C2_Init+0x74>)
 8001866:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <MX_I2C2_Init+0x78>)
 8001868:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_I2C2_Init+0x74>)
 800186c:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <MX_I2C2_Init+0x7c>)
 800186e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <MX_I2C2_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_I2C2_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <MX_I2C2_Init+0x74>)
 800187e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001882:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <MX_I2C2_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_I2C2_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <MX_I2C2_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_I2C2_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <MX_I2C2_Init+0x74>)
 800189e:	f002 f93f 	bl	8003b20 <HAL_I2C_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_I2C2_Init+0x4c>
		Error_Handler();
 80018a8:	f000 f9cc 	bl	8001c44 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 80018ac:	2100      	movs	r1, #0
 80018ae:	4809      	ldr	r0, [pc, #36]	; (80018d4 <MX_I2C2_Init+0x74>)
 80018b0:	f002 feaf 	bl	8004612 <HAL_I2CEx_ConfigAnalogFilter>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_I2C2_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 80018ba:	f000 f9c3 	bl	8001c44 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80018be:	2100      	movs	r1, #0
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_I2C2_Init+0x74>)
 80018c2:	f002 fee2 	bl	800468a <HAL_I2CEx_ConfigDigitalFilter>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_I2C2_Init+0x70>
		Error_Handler();
 80018cc:	f000 f9ba 	bl	8001c44 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200005b4 	.word	0x200005b4
 80018d8:	40005800 	.word	0x40005800
 80018dc:	000186a0 	.word	0x000186a0

080018e0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018f4:	463b      	mov	r3, r7
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <MX_TIM2_Init+0x94>)
 80018fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001902:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 10;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <MX_TIM2_Init+0x94>)
 8001906:	220a      	movs	r2, #10
 8001908:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_TIM2_Init+0x94>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <MX_TIM2_Init+0x94>)
 8001912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001916:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_TIM2_Init+0x94>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_TIM2_Init+0x94>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001924:	4813      	ldr	r0, [pc, #76]	; (8001974 <MX_TIM2_Init+0x94>)
 8001926:	f003 fca5 	bl	8005274 <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001930:	f000 f988 	bl	8001c44 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001938:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	4619      	mov	r1, r3
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <MX_TIM2_Init+0x94>)
 8001942:	f003 fd4f 	bl	80053e4 <HAL_TIM_ConfigClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x70>
		Error_Handler();
 800194c:	f000 f97a 	bl	8001c44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001958:	463b      	mov	r3, r7
 800195a:	4619      	mov	r1, r3
 800195c:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_TIM2_Init+0x94>)
 800195e:	f003 ff43 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001968:	f000 f96c 	bl	8001c44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000608 	.word	0x20000608

08001978 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_USART1_UART_Init+0x4c>)
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <MX_USART1_UART_Init+0x50>)
 8001980:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 11500;
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <MX_USART1_UART_Init+0x4c>)
 8001984:	f642 42ec 	movw	r2, #11500	; 0x2cec
 8001988:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_USART1_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_USART1_UART_Init+0x4c>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <MX_USART1_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_USART1_UART_Init+0x4c>)
 800199e:	220c      	movs	r2, #12
 80019a0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <MX_USART1_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_USART1_UART_Init+0x4c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_USART1_UART_Init+0x4c>)
 80019b0:	f003 ff96 	bl	80058e0 <HAL_UART_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80019ba:	f000 f943 	bl	8001c44 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000650 	.word	0x20000650
 80019c8:	40011000 	.word	0x40011000

080019cc <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_USART3_UART_Init+0x4c>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <MX_USART3_UART_Init+0x50>)
 80019d4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <MX_USART3_UART_Init+0x4c>)
 80019d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019dc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_USART3_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_USART3_UART_Init+0x4c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <MX_USART3_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_USART3_UART_Init+0x4c>)
 80019f2:	220c      	movs	r2, #12
 80019f4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <MX_USART3_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_USART3_UART_Init+0x4c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_USART3_UART_Init+0x4c>)
 8001a04:	f003 ff6c 	bl	80058e0 <HAL_UART_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001a0e:	f000 f919 	bl	8001c44 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000694 	.word	0x20000694
 8001a1c:	40004800 	.word	0x40004800

08001a20 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a2a:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a2e:	2204      	movs	r2, #4
 8001a30:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a34:	2202      	movs	r2, #2
 8001a36:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a40:	2202      	movs	r2, #2
 8001a42:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a64:	f002 fe50 	bl	8004708 <HAL_PCD_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8001a6e:	f000 f8e9 	bl	8001c44 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200006d8 	.word	0x200006d8

08001a7c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a4f      	ldr	r2, [pc, #316]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001ab8:	f043 0320 	orr.w	r3, r3, #32
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b4d      	ldr	r3, [pc, #308]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a48      	ldr	r2, [pc, #288]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a41      	ldr	r2, [pc, #260]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a3a      	ldr	r2, [pc, #232]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a33      	ldr	r2, [pc, #204]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a2c      	ldr	r2, [pc, #176]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <MX_GPIO_Init+0x178>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001b5c:	4826      	ldr	r0, [pc, #152]	; (8001bf8 <MX_GPIO_Init+0x17c>)
 8001b5e:	f001 ffad 	bl	8003abc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8001b62:	2200      	movs	r2, #0
 8001b64:	2140      	movs	r1, #64	; 0x40
 8001b66:	4825      	ldr	r0, [pc, #148]	; (8001bfc <MX_GPIO_Init+0x180>)
 8001b68:	f001 ffa8 	bl	8003abc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b76:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	481f      	ldr	r0, [pc, #124]	; (8001c00 <MX_GPIO_Init+0x184>)
 8001b84:	f001 fdee 	bl	8003764 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 8001b88:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b8c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9a:	f107 031c 	add.w	r3, r7, #28
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4815      	ldr	r0, [pc, #84]	; (8001bf8 <MX_GPIO_Init+0x17c>)
 8001ba2:	f001 fddf 	bl	8003764 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ba6:	2340      	movs	r3, #64	; 0x40
 8001ba8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480f      	ldr	r0, [pc, #60]	; (8001bfc <MX_GPIO_Init+0x180>)
 8001bbe:	f001 fdd1 	bl	8003764 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4809      	ldr	r0, [pc, #36]	; (8001bfc <MX_GPIO_Init+0x180>)
 8001bd6:	f001 fdc5 	bl	8003764 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2101      	movs	r1, #1
 8001bde:	2028      	movs	r0, #40	; 0x28
 8001be0:	f001 f99f 	bl	8002f22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001be4:	2028      	movs	r0, #40	; 0x28
 8001be6:	f001 f9b8 	bl	8002f5a <HAL_NVIC_EnableIRQ>

}
 8001bea:	bf00      	nop
 8001bec:	3730      	adds	r7, #48	; 0x30
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	40021800 	.word	0x40021800
 8001c00:	40020800 	.word	0x40020800

08001c04 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c14:	d10e      	bne.n	8001c34 <HAL_GPIO_EXTI_Callback+0x30>
		if (state == 0)
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d103      	bne.n	8001c26 <HAL_GPIO_EXTI_Callback+0x22>
			state = 1;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
		else {
			//wird in main gemacht
		}
	}

}
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_EXTI_Callback+0x30>
		else if (state == 1)
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d102      	bne.n	8001c34 <HAL_GPIO_EXTI_Callback+0x30>
			state = 2;
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001c30:	2202      	movs	r2, #2
 8001c32:	601a      	str	r2, [r3, #0]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	20000be4 	.word	0x20000be4

08001c44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c48:	b672      	cpsid	i
}
 8001c4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c4c:	e7fe      	b.n	8001c4c <Error_Handler+0x8>
	...

08001c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	; 0x30
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a2e      	ldr	r2, [pc, #184]	; (8001d78 <HAL_ADC_MspInit+0xd8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d128      	bne.n	8001d14 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_ADC_MspInit+0xdc>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a2c      	ldr	r2, [pc, #176]	; (8001d7c <HAL_ADC_MspInit+0xdc>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <HAL_ADC_MspInit+0xdc>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <HAL_ADC_MspInit+0xdc>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a25      	ldr	r2, [pc, #148]	; (8001d7c <HAL_ADC_MspInit+0xdc>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <HAL_ADC_MspInit+0xdc>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 031c 	add.w	r3, r7, #28
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	481c      	ldr	r0, [pc, #112]	; (8001d80 <HAL_ADC_MspInit+0xe0>)
 8001d0e:	f001 fd29 	bl	8003764 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d12:	e02c      	b.n	8001d6e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1a      	ldr	r2, [pc, #104]	; (8001d84 <HAL_ADC_MspInit+0xe4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d127      	bne.n	8001d6e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_ADC_MspInit+0xdc>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a15      	ldr	r2, [pc, #84]	; (8001d7c <HAL_ADC_MspInit+0xdc>)
 8001d28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_ADC_MspInit+0xdc>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_ADC_MspInit+0xdc>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <HAL_ADC_MspInit+0xdc>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_ADC_MspInit+0xdc>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d56:	2308      	movs	r3, #8
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	4619      	mov	r1, r3
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <HAL_ADC_MspInit+0xe8>)
 8001d6a:	f001 fcfb 	bl	8003764 <HAL_GPIO_Init>
}
 8001d6e:	bf00      	nop
 8001d70:	3730      	adds	r7, #48	; 0x30
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40012000 	.word	0x40012000
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40012100 	.word	0x40012100
 8001d88:	40020800 	.word	0x40020800

08001d8c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a17      	ldr	r2, [pc, #92]	; (8001e08 <HAL_DAC_MspInit+0x7c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d127      	bne.n	8001dfe <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_DAC_MspInit+0x80>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <HAL_DAC_MspInit+0x80>)
 8001db8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_DAC_MspInit+0x80>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_DAC_MspInit+0x80>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <HAL_DAC_MspInit+0x80>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_DAC_MspInit+0x80>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001de6:	2310      	movs	r3, #16
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dea:	2303      	movs	r3, #3
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <HAL_DAC_MspInit+0x84>)
 8001dfa:	f001 fcb3 	bl	8003764 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001dfe:	bf00      	nop
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40007400 	.word	0x40007400
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020000 	.word	0x40020000

08001e14 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08e      	sub	sp, #56	; 0x38
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a55      	ldr	r2, [pc, #340]	; (8001f88 <HAL_ETH_MspInit+0x174>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	f040 80a4 	bne.w	8001f80 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
 8001e3c:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001e42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e46:	6313      	str	r3, [r2, #48]	; 0x30
 8001e48:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	623b      	str	r3, [r7, #32]
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	4a4b      	ldr	r2, [pc, #300]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001e5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e62:	6313      	str	r3, [r2, #48]	; 0x30
 8001e64:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	2300      	movs	r3, #0
 8001e72:	61bb      	str	r3, [r7, #24]
 8001e74:	4b45      	ldr	r3, [pc, #276]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	4a44      	ldr	r2, [pc, #272]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001e7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e80:	4b42      	ldr	r3, [pc, #264]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	4a3d      	ldr	r2, [pc, #244]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	4a36      	ldr	r2, [pc, #216]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	4a28      	ldr	r2, [pc, #160]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eee:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef0:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <HAL_ETH_MspInit+0x178>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001efc:	2332      	movs	r3, #50	; 0x32
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f0c:	230b      	movs	r3, #11
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	4619      	mov	r1, r3
 8001f16:	481e      	ldr	r0, [pc, #120]	; (8001f90 <HAL_ETH_MspInit+0x17c>)
 8001f18:	f001 fc24 	bl	8003764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001f1c:	2386      	movs	r3, #134	; 0x86
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f2c:	230b      	movs	r3, #11
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f34:	4619      	mov	r1, r3
 8001f36:	4817      	ldr	r0, [pc, #92]	; (8001f94 <HAL_ETH_MspInit+0x180>)
 8001f38:	f001 fc14 	bl	8003764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f4e:	230b      	movs	r3, #11
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f56:	4619      	mov	r1, r3
 8001f58:	480f      	ldr	r0, [pc, #60]	; (8001f98 <HAL_ETH_MspInit+0x184>)
 8001f5a:	f001 fc03 	bl	8003764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f70:	230b      	movs	r3, #11
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4808      	ldr	r0, [pc, #32]	; (8001f9c <HAL_ETH_MspInit+0x188>)
 8001f7c:	f001 fbf2 	bl	8003764 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001f80:	bf00      	nop
 8001f82:	3738      	adds	r7, #56	; 0x38
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40028000 	.word	0x40028000
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020800 	.word	0x40020800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40021800 	.word	0x40021800

08001fa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a19      	ldr	r2, [pc, #100]	; (8002024 <HAL_I2C_MspInit+0x84>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d12b      	bne.n	800201a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_I2C_MspInit+0x88>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a17      	ldr	r2, [pc, #92]	; (8002028 <HAL_I2C_MspInit+0x88>)
 8001fcc:	f043 0320 	orr.w	r3, r3, #32
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_I2C_MspInit+0x88>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe2:	2312      	movs	r3, #18
 8001fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480c      	ldr	r0, [pc, #48]	; (800202c <HAL_I2C_MspInit+0x8c>)
 8001ffa:	f001 fbb3 	bl	8003764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_I2C_MspInit+0x88>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a08      	ldr	r2, [pc, #32]	; (8002028 <HAL_I2C_MspInit+0x88>)
 8002008:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_I2C_MspInit+0x88>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800201a:	bf00      	nop
 800201c:	3728      	adds	r7, #40	; 0x28
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40005800 	.word	0x40005800
 8002028:	40023800 	.word	0x40023800
 800202c:	40021400 	.word	0x40021400

08002030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002040:	d10d      	bne.n	800205e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_TIM_Base_MspInit+0x3c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_TIM_Base_MspInit+0x3c>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_TIM_Base_MspInit+0x3c>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800

08002070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a32      	ldr	r2, [pc, #200]	; (8002158 <HAL_UART_MspInit+0xe8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d12c      	bne.n	80020ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_UART_MspInit+0xec>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a30      	ldr	r2, [pc, #192]	; (800215c <HAL_UART_MspInit+0xec>)
 800209c:	f043 0310 	orr.w	r3, r3, #16
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_UART_MspInit+0xec>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	4b2a      	ldr	r3, [pc, #168]	; (800215c <HAL_UART_MspInit+0xec>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a29      	ldr	r2, [pc, #164]	; (800215c <HAL_UART_MspInit+0xec>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_UART_MspInit+0xec>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ca:	23c0      	movs	r3, #192	; 0xc0
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020da:	2307      	movs	r3, #7
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	481e      	ldr	r0, [pc, #120]	; (8002160 <HAL_UART_MspInit+0xf0>)
 80020e6:	f001 fb3d 	bl	8003764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020ea:	e031      	b.n	8002150 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <HAL_UART_MspInit+0xf4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d12c      	bne.n	8002150 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_UART_MspInit+0xec>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_UART_MspInit+0xec>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_UART_MspInit+0xec>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_UART_MspInit+0xec>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_UART_MspInit+0xec>)
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_UART_MspInit+0xec>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800212e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002140:	2307      	movs	r3, #7
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002144:	f107 031c 	add.w	r3, r7, #28
 8002148:	4619      	mov	r1, r3
 800214a:	4807      	ldr	r0, [pc, #28]	; (8002168 <HAL_UART_MspInit+0xf8>)
 800214c:	f001 fb0a 	bl	8003764 <HAL_GPIO_Init>
}
 8002150:	bf00      	nop
 8002152:	3730      	adds	r7, #48	; 0x30
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40011000 	.word	0x40011000
 800215c:	40023800 	.word	0x40023800
 8002160:	40020400 	.word	0x40020400
 8002164:	40004800 	.word	0x40004800
 8002168:	40020c00 	.word	0x40020c00

0800216c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800218c:	d13f      	bne.n	800220e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_PCD_MspInit+0xac>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a20      	ldr	r2, [pc, #128]	; (8002218 <HAL_PCD_MspInit+0xac>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <HAL_PCD_MspInit+0xac>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80021aa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80021ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021bc:	230a      	movs	r3, #10
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4619      	mov	r1, r3
 80021c6:	4815      	ldr	r0, [pc, #84]	; (800221c <HAL_PCD_MspInit+0xb0>)
 80021c8:	f001 facc 	bl	8003764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	480e      	ldr	r0, [pc, #56]	; (800221c <HAL_PCD_MspInit+0xb0>)
 80021e2:	f001 fabf 	bl	8003764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <HAL_PCD_MspInit+0xac>)
 80021e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ea:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <HAL_PCD_MspInit+0xac>)
 80021ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f0:	6353      	str	r3, [r2, #52]	; 0x34
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <HAL_PCD_MspInit+0xac>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	4a07      	ldr	r2, [pc, #28]	; (8002218 <HAL_PCD_MspInit+0xac>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002200:	6453      	str	r3, [r2, #68]	; 0x44
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_PCD_MspInit+0xac>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3728      	adds	r7, #40	; 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40020000 	.word	0x40020000

08002220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <NMI_Handler+0x4>

08002226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <HardFault_Handler+0x4>

0800222c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <MemManage_Handler+0x4>

08002232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <BusFault_Handler+0x4>

08002238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <UsageFault_Handler+0x4>

0800223e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800226c:	f000 f95e 	bl	800252c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}

08002274 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002278:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800227c:	f001 fc38 	bl	8003af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
	return 1;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <_kill>:

int _kill(int pid, int sig)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800229e:	f004 f9e3 	bl	8006668 <__errno>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2216      	movs	r2, #22
 80022a6:	601a      	str	r2, [r3, #0]
	return -1;
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_exit>:

void _exit (int status)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ffe7 	bl	8002294 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022c6:	e7fe      	b.n	80022c6 <_exit+0x12>

080022c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	e00a      	b.n	80022f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022da:	f3af 8000 	nop.w
 80022de:	4601      	mov	r1, r0
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	60ba      	str	r2, [r7, #8]
 80022e6:	b2ca      	uxtb	r2, r1
 80022e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbf0      	blt.n	80022da <_read+0x12>
	}

return len;
 80022f8:	687b      	ldr	r3, [r7, #4]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e009      	b.n	8002328 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	60ba      	str	r2, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	dbf1      	blt.n	8002314 <_write+0x12>
	}
	return len;
 8002330:	687b      	ldr	r3, [r7, #4]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_close>:

int _close(int file)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	return -1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002362:	605a      	str	r2, [r3, #4]
	return 0;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <_isatty>:

int _isatty(int file)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
	return 1;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
	return 0;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <_sbrk+0x5c>)
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <_sbrk+0x60>)
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <_sbrk+0x64>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <_sbrk+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d207      	bcs.n	80023e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d4:	f004 f948 	bl	8006668 <__errno>
 80023d8:	4603      	mov	r3, r0
 80023da:	220c      	movs	r2, #12
 80023dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	e009      	b.n	80023f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <_sbrk+0x64>)
 80023f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20030000 	.word	0x20030000
 8002404:	00000400 	.word	0x00000400
 8002408:	20000bf0 	.word	0x20000bf0
 800240c:	20000c08 	.word	0x20000c08

08002410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <SystemInit+0x20>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <SystemInit+0x20>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800246c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002438:	480d      	ldr	r0, [pc, #52]	; (8002470 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800243a:	490e      	ldr	r1, [pc, #56]	; (8002474 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800243c:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800243e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002440:	e002      	b.n	8002448 <LoopCopyDataInit>

08002442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002446:	3304      	adds	r3, #4

08002448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800244c:	d3f9      	bcc.n	8002442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244e:	4a0b      	ldr	r2, [pc, #44]	; (800247c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002450:	4c0b      	ldr	r4, [pc, #44]	; (8002480 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002454:	e001      	b.n	800245a <LoopFillZerobss>

08002456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002458:	3204      	adds	r2, #4

0800245a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800245c:	d3fb      	bcc.n	8002456 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800245e:	f7ff ffd7 	bl	8002410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002462:	f004 f907 	bl	8006674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002466:	f7fe feef 	bl	8001248 <main>
  bx  lr    
 800246a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800246c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002474:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002478:	0800b4c4 	.word	0x0800b4c4
  ldr r2, =_sbss
 800247c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002480:	20000c08 	.word	0x20000c08

08002484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <ADC_IRQHandler>
	...

08002488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <HAL_Init+0x40>)
 8002492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_Init+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_Init+0x40>)
 800249e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_Init+0x40>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_Init+0x40>)
 80024aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b0:	2003      	movs	r0, #3
 80024b2:	f000 fd2b 	bl	8002f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b6:	2000      	movs	r0, #0
 80024b8:	f000 f808 	bl	80024cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024bc:	f7ff fbc8 	bl	8001c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023c00 	.word	0x40023c00

080024cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_InitTick+0x54>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_InitTick+0x58>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fd43 	bl	8002f76 <HAL_SYSTICK_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00e      	b.n	8002518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b0f      	cmp	r3, #15
 80024fe:	d80a      	bhi.n	8002516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002500:	2200      	movs	r2, #0
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f000 fd0b 	bl	8002f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800250c:	4a06      	ldr	r2, [pc, #24]	; (8002528 <HAL_InitTick+0x5c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000014 	.word	0x20000014
 8002524:	2000001c 	.word	0x2000001c
 8002528:	20000018 	.word	0x20000018

0800252c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_IncTick+0x20>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_IncTick+0x24>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4413      	add	r3, r2
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_IncTick+0x24>)
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	2000001c 	.word	0x2000001c
 8002550:	20000bf4 	.word	0x20000bf4

08002554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return uwTick;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_GetTick+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000bf4 	.word	0x20000bf4

0800256c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff ffee 	bl	8002554 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002584:	d005      	beq.n	8002592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_Delay+0x44>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002592:	bf00      	nop
 8002594:	f7ff ffde 	bl	8002554 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d8f7      	bhi.n	8002594 <HAL_Delay+0x28>
  {
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	2000001c 	.word	0x2000001c

080025b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e033      	b.n	8002632 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff fb64 	bl	8001ca0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d118      	bne.n	8002624 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025fa:	f023 0302 	bic.w	r3, r3, #2
 80025fe:	f043 0202 	orr.w	r2, r3, #2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fab4 	bl	8002b74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f023 0303 	bic.w	r3, r3, #3
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
 8002622:	e001      	b.n	8002628 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_ADC_Start+0x1a>
 8002652:	2302      	movs	r3, #2
 8002654:	e0b2      	b.n	80027bc <HAL_ADC_Start+0x180>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b01      	cmp	r3, #1
 800266a:	d018      	beq.n	800269e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800267c:	4b52      	ldr	r3, [pc, #328]	; (80027c8 <HAL_ADC_Start+0x18c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_ADC_Start+0x190>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	0c9a      	lsrs	r2, r3, #18
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002690:	e002      	b.n	8002698 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	3b01      	subs	r3, #1
 8002696:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f9      	bne.n	8002692 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d17a      	bne.n	80027a2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ea:	d106      	bne.n	80026fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	f023 0206 	bic.w	r2, r3, #6
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44
 80026f8:	e002      	b.n	8002700 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002708:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_ADC_Start+0x194>)
 800270a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002714:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	2b00      	cmp	r3, #0
 8002720:	d12a      	bne.n	8002778 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a2b      	ldr	r2, [pc, #172]	; (80027d4 <HAL_ADC_Start+0x198>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d015      	beq.n	8002758 <HAL_ADC_Start+0x11c>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a29      	ldr	r2, [pc, #164]	; (80027d8 <HAL_ADC_Start+0x19c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d105      	bne.n	8002742 <HAL_ADC_Start+0x106>
 8002736:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <HAL_ADC_Start+0x194>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a25      	ldr	r2, [pc, #148]	; (80027dc <HAL_ADC_Start+0x1a0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d136      	bne.n	80027ba <HAL_ADC_Start+0x17e>
 800274c:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <HAL_ADC_Start+0x194>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	d130      	bne.n	80027ba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d129      	bne.n	80027ba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	e020      	b.n	80027ba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a15      	ldr	r2, [pc, #84]	; (80027d4 <HAL_ADC_Start+0x198>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d11b      	bne.n	80027ba <HAL_ADC_Start+0x17e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d114      	bne.n	80027ba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	e00b      	b.n	80027ba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f043 0210 	orr.w	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f043 0201 	orr.w	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	20000014 	.word	0x20000014
 80027cc:	431bde83 	.word	0x431bde83
 80027d0:	40012300 	.word	0x40012300
 80027d4:	40012000 	.word	0x40012000
 80027d8:	40012100 	.word	0x40012100
 80027dc:	40012200 	.word	0x40012200

080027e0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fc:	d113      	bne.n	8002826 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280c:	d10b      	bne.n	8002826 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f043 0220 	orr.w	r2, r3, #32
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e063      	b.n	80028ee <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002826:	f7ff fe95 	bl	8002554 <HAL_GetTick>
 800282a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800282c:	e021      	b.n	8002872 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d01d      	beq.n	8002872 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <HAL_ADC_PollForConversion+0x6c>
 800283c:	f7ff fe8a 	bl	8002554 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d212      	bcs.n	8002872 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b02      	cmp	r3, #2
 8002858:	d00b      	beq.n	8002872 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f043 0204 	orr.w	r2, r3, #4
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e03d      	b.n	80028ee <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b02      	cmp	r3, #2
 800287e:	d1d6      	bne.n	800282e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0212 	mvn.w	r2, #18
 8002888:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d123      	bne.n	80028ec <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d11f      	bne.n	80028ec <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d006      	beq.n	80028c8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d111      	bne.n	80028ec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d105      	bne.n	80028ec <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	f043 0201 	orr.w	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x1c>
 8002928:	2302      	movs	r3, #2
 800292a:	e113      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x244>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b09      	cmp	r3, #9
 800293a:	d925      	bls.n	8002988 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68d9      	ldr	r1, [r3, #12]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	4613      	mov	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	3b1e      	subs	r3, #30
 8002952:	2207      	movs	r2, #7
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43da      	mvns	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	400a      	ands	r2, r1
 8002960:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68d9      	ldr	r1, [r3, #12]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	b29b      	uxth	r3, r3
 8002972:	4618      	mov	r0, r3
 8002974:	4603      	mov	r3, r0
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4403      	add	r3, r0
 800297a:	3b1e      	subs	r3, #30
 800297c:	409a      	lsls	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	e022      	b.n	80029ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6919      	ldr	r1, [r3, #16]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	2207      	movs	r2, #7
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	400a      	ands	r2, r1
 80029aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6919      	ldr	r1, [r3, #16]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	4618      	mov	r0, r3
 80029be:	4603      	mov	r3, r0
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4403      	add	r3, r0
 80029c4:	409a      	lsls	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d824      	bhi.n	8002a20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	3b05      	subs	r3, #5
 80029e8:	221f      	movs	r2, #31
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43da      	mvns	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	400a      	ands	r2, r1
 80029f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	3b05      	subs	r3, #5
 8002a12:	fa00 f203 	lsl.w	r2, r0, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a1e:	e04c      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	d824      	bhi.n	8002a72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	3b23      	subs	r3, #35	; 0x23
 8002a3a:	221f      	movs	r2, #31
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43da      	mvns	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	400a      	ands	r2, r1
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	3b23      	subs	r3, #35	; 0x23
 8002a64:	fa00 f203 	lsl.w	r2, r0, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a70:	e023      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	3b41      	subs	r3, #65	; 0x41
 8002a84:	221f      	movs	r2, #31
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	400a      	ands	r2, r1
 8002a92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	3b41      	subs	r3, #65	; 0x41
 8002aae:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aba:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <HAL_ADC_ConfigChannel+0x250>)
 8002abc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a28      	ldr	r2, [pc, #160]	; (8002b64 <HAL_ADC_ConfigChannel+0x254>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d10f      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1d8>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b12      	cmp	r3, #18
 8002ace:	d10b      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_ADC_ConfigChannel+0x254>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d12b      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x23a>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <HAL_ADC_ConfigChannel+0x258>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d003      	beq.n	8002b04 <HAL_ADC_ConfigChannel+0x1f4>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b11      	cmp	r3, #17
 8002b02:	d122      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a11      	ldr	r2, [pc, #68]	; (8002b68 <HAL_ADC_ConfigChannel+0x258>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d111      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <HAL_ADC_ConfigChannel+0x25c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a11      	ldr	r2, [pc, #68]	; (8002b70 <HAL_ADC_ConfigChannel+0x260>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	0c9a      	lsrs	r2, r3, #18
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b3c:	e002      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f9      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	40012300 	.word	0x40012300
 8002b64:	40012000 	.word	0x40012000
 8002b68:	10000012 	.word	0x10000012
 8002b6c:	20000014 	.word	0x20000014
 8002b70:	431bde83 	.word	0x431bde83

08002b74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b7c:	4b79      	ldr	r3, [pc, #484]	; (8002d64 <ADC_Init+0x1f0>)
 8002b7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	021a      	lsls	r2, r3, #8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6859      	ldr	r1, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6899      	ldr	r1, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <ADC_Init+0x1f4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d022      	beq.n	8002c52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6899      	ldr	r1, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6899      	ldr	r1, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	e00f      	b.n	8002c72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0202 	bic.w	r2, r2, #2
 8002c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6899      	ldr	r1, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7e1b      	ldrb	r3, [r3, #24]
 8002c8c:	005a      	lsls	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01b      	beq.n	8002cd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	035a      	lsls	r2, r3, #13
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	e007      	b.n	8002ce8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ce6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	051a      	lsls	r2, r3, #20
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6899      	ldr	r1, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d2a:	025a      	lsls	r2, r3, #9
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6899      	ldr	r1, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	029a      	lsls	r2, r3, #10
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	609a      	str	r2, [r3, #8]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40012300 	.word	0x40012300
 8002d68:	0f000001 	.word	0x0f000001

08002d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d9e:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	60d3      	str	r3, [r2, #12]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <__NVIC_GetPriorityGrouping+0x18>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	f003 0307 	and.w	r3, r3, #7
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	db0b      	blt.n	8002dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	f003 021f 	and.w	r2, r3, #31
 8002de8:	4907      	ldr	r1, [pc, #28]	; (8002e08 <__NVIC_EnableIRQ+0x38>)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2001      	movs	r0, #1
 8002df2:	fa00 f202 	lsl.w	r2, r0, r2
 8002df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000e100 	.word	0xe000e100

08002e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	6039      	str	r1, [r7, #0]
 8002e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	db0a      	blt.n	8002e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	490c      	ldr	r1, [pc, #48]	; (8002e58 <__NVIC_SetPriority+0x4c>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	0112      	lsls	r2, r2, #4
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e34:	e00a      	b.n	8002e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4908      	ldr	r1, [pc, #32]	; (8002e5c <__NVIC_SetPriority+0x50>)
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	3b04      	subs	r3, #4
 8002e44:	0112      	lsls	r2, r2, #4
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	440b      	add	r3, r1
 8002e4a:	761a      	strb	r2, [r3, #24]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000e100 	.word	0xe000e100
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f1c3 0307 	rsb	r3, r3, #7
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	bf28      	it	cs
 8002e7e:	2304      	movcs	r3, #4
 8002e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3304      	adds	r3, #4
 8002e86:	2b06      	cmp	r3, #6
 8002e88:	d902      	bls.n	8002e90 <NVIC_EncodePriority+0x30>
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3b03      	subs	r3, #3
 8002e8e:	e000      	b.n	8002e92 <NVIC_EncodePriority+0x32>
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	f04f 32ff 	mov.w	r2, #4294967295
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	43d9      	mvns	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	4313      	orrs	r3, r2
         );
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3724      	adds	r7, #36	; 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed8:	d301      	bcc.n	8002ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00f      	b.n	8002efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ede:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <SysTick_Config+0x40>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ee6:	210f      	movs	r1, #15
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eec:	f7ff ff8e 	bl	8002e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <SysTick_Config+0x40>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <SysTick_Config+0x40>)
 8002ef8:	2207      	movs	r2, #7
 8002efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	e000e010 	.word	0xe000e010

08002f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff29 	bl	8002d6c <__NVIC_SetPriorityGrouping>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f34:	f7ff ff3e 	bl	8002db4 <__NVIC_GetPriorityGrouping>
 8002f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f7ff ff8e 	bl	8002e60 <NVIC_EncodePriority>
 8002f44:	4602      	mov	r2, r0
 8002f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff5d 	bl	8002e0c <__NVIC_SetPriority>
}
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff31 	bl	8002dd0 <__NVIC_EnableIRQ>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff ffa2 	bl	8002ec8 <SysTick_Config>
 8002f84:	4603      	mov	r3, r0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e014      	b.n	8002fca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	791b      	ldrb	r3, [r3, #4]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d105      	bne.n	8002fb6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7fe feeb 	bl	8001d8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	795b      	ldrb	r3, [r3, #5]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_DAC_Start+0x16>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e040      	b.n	800306a <HAL_DAC_Start+0x98>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2201      	movs	r2, #1
 8003002:	409a      	lsls	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800301c:	2b3c      	cmp	r3, #60	; 0x3c
 800301e:	d11d      	bne.n	800305c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	e014      	b.n	800305c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	213c      	movs	r1, #60	; 0x3c
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	429a      	cmp	r2, r3
 800304a:	d107      	bne.n	800305c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0202 	orr.w	r2, r2, #2
 800305a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003076:	b480      	push	{r7}
 8003078:	b087      	sub	sp, #28
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	795b      	ldrb	r3, [r3, #5]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_DAC_ConfigChannel+0x18>
 800308a:	2302      	movs	r3, #2
 800308c:	e03c      	b.n	8003108 <HAL_DAC_ConfigChannel+0x92>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2202      	movs	r2, #2
 8003098:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4013      	ands	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6819      	ldr	r1, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	22c0      	movs	r2, #192	; 0xc0
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43da      	mvns	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	400a      	ands	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e06c      	b.n	8003200 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2223      	movs	r2, #35	; 0x23
 8003134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7fe fe6b 	bl	8001e14 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	4b31      	ldr	r3, [pc, #196]	; (8003208 <HAL_ETH_Init+0xf4>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	4a30      	ldr	r2, [pc, #192]	; (8003208 <HAL_ETH_Init+0xf4>)
 8003148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800314c:	6453      	str	r3, [r2, #68]	; 0x44
 800314e:	4b2e      	ldr	r3, [pc, #184]	; (8003208 <HAL_ETH_Init+0xf4>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800315a:	4b2c      	ldr	r3, [pc, #176]	; (800320c <HAL_ETH_Init+0xf8>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4a2b      	ldr	r2, [pc, #172]	; (800320c <HAL_ETH_Init+0xf8>)
 8003160:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003164:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003166:	4b29      	ldr	r3, [pc, #164]	; (800320c <HAL_ETH_Init+0xf8>)
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	4927      	ldr	r1, [pc, #156]	; (800320c <HAL_ETH_Init+0xf8>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <HAL_ETH_Init+0xf8>)
 8003176:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800318e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003190:	f7ff f9e0 	bl	8002554 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003196:	e011      	b.n	80031bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003198:	f7ff f9dc 	bl	8002554 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031a6:	d909      	bls.n	80031bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2204      	movs	r2, #4
 80031ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	22e0      	movs	r2, #224	; 0xe0
 80031b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e021      	b.n	8003200 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e4      	bne.n	8003198 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f958 	bl	8003484 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f9ff 	bl	80035d8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fa55 	bl	800368a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	461a      	mov	r2, r3
 80031e6:	2100      	movs	r1, #0
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f9bd 	bl	8003568 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2210      	movs	r2, #16
 80031fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40023800 	.word	0x40023800
 800320c:	40013800 	.word	0x40013800

08003210 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4b51      	ldr	r3, [pc, #324]	; (800336c <ETH_SetMACConfig+0x15c>)
 8003226:	4013      	ands	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	7c1b      	ldrb	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <ETH_SetMACConfig+0x28>
 8003232:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003236:	e000      	b.n	800323a <ETH_SetMACConfig+0x2a>
 8003238:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	7c5b      	ldrb	r3, [r3, #17]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d102      	bne.n	8003248 <ETH_SetMACConfig+0x38>
 8003242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003246:	e000      	b.n	800324a <ETH_SetMACConfig+0x3a>
 8003248:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800324a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003250:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	7fdb      	ldrb	r3, [r3, #31]
 8003256:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003258:	431a      	orrs	r2, r3
                        macconf->Speed |
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800325e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	7f92      	ldrb	r2, [r2, #30]
 8003264:	2a00      	cmp	r2, #0
 8003266:	d102      	bne.n	800326e <ETH_SetMACConfig+0x5e>
 8003268:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800326c:	e000      	b.n	8003270 <ETH_SetMACConfig+0x60>
 800326e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003270:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	7f1b      	ldrb	r3, [r3, #28]
 8003276:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003278:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800327e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	791b      	ldrb	r3, [r3, #4]
 8003284:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003286:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800328e:	2a00      	cmp	r2, #0
 8003290:	d102      	bne.n	8003298 <ETH_SetMACConfig+0x88>
 8003292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003296:	e000      	b.n	800329a <ETH_SetMACConfig+0x8a>
 8003298:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800329a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	7bdb      	ldrb	r3, [r3, #15]
 80032a0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80032a2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80032a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032b0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032b2:	4313      	orrs	r3, r2
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032ca:	2001      	movs	r0, #1
 80032cc:	f7ff f94e 	bl	800256c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80032e6:	4013      	ands	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80032f6:	2a00      	cmp	r2, #0
 80032f8:	d101      	bne.n	80032fe <ETH_SetMACConfig+0xee>
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	e000      	b.n	8003300 <ETH_SetMACConfig+0xf0>
 80032fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003300:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003306:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800330e:	2a01      	cmp	r2, #1
 8003310:	d101      	bne.n	8003316 <ETH_SetMACConfig+0x106>
 8003312:	2208      	movs	r2, #8
 8003314:	e000      	b.n	8003318 <ETH_SetMACConfig+0x108>
 8003316:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003318:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003320:	2a01      	cmp	r2, #1
 8003322:	d101      	bne.n	8003328 <ETH_SetMACConfig+0x118>
 8003324:	2204      	movs	r2, #4
 8003326:	e000      	b.n	800332a <ETH_SetMACConfig+0x11a>
 8003328:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800332a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003332:	2a01      	cmp	r2, #1
 8003334:	d101      	bne.n	800333a <ETH_SetMACConfig+0x12a>
 8003336:	2202      	movs	r2, #2
 8003338:	e000      	b.n	800333c <ETH_SetMACConfig+0x12c>
 800333a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800333c:	4313      	orrs	r3, r2
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003354:	2001      	movs	r0, #1
 8003356:	f7ff f909 	bl	800256c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	619a      	str	r2, [r3, #24]
}
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	ff20810f 	.word	0xff20810f

08003370 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <ETH_SetDMAConfig+0x110>)
 800338a:	4013      	ands	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	7b1b      	ldrb	r3, [r3, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <ETH_SetDMAConfig+0x2c>
 8003396:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800339a:	e000      	b.n	800339e <ETH_SetDMAConfig+0x2e>
 800339c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	7b5b      	ldrb	r3, [r3, #13]
 80033a2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033a4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	7f52      	ldrb	r2, [r2, #29]
 80033aa:	2a00      	cmp	r2, #0
 80033ac:	d102      	bne.n	80033b4 <ETH_SetDMAConfig+0x44>
 80033ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033b2:	e000      	b.n	80033b6 <ETH_SetDMAConfig+0x46>
 80033b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80033b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	7b9b      	ldrb	r3, [r3, #14]
 80033bc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80033be:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80033c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	7f1b      	ldrb	r3, [r3, #28]
 80033ca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80033cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	7f9b      	ldrb	r3, [r3, #30]
 80033d2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80033d4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80033da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033e2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033e4:	4313      	orrs	r3, r2
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f4:	461a      	mov	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003406:	2001      	movs	r0, #1
 8003408:	f7ff f8b0 	bl	800256c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003414:	461a      	mov	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	791b      	ldrb	r3, [r3, #4]
 800341e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003424:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800342a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003430:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003438:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800343a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003442:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003448:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003452:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003456:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003464:	2001      	movs	r0, #1
 8003466:	f7ff f881 	bl	800256c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6013      	str	r3, [r2, #0]
}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	f8de3f23 	.word	0xf8de3f23

08003484 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b0a6      	sub	sp, #152	; 0x98
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003498:	2300      	movs	r3, #0
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800349c:	2300      	movs	r3, #0
 800349e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80034c0:	2300      	movs	r3, #0
 80034c2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80034da:	2300      	movs	r3, #0
 80034dc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80034e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034ea:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80034ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80034f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034fc:	4619      	mov	r1, r3
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fe86 	bl	8003210 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003504:	2301      	movs	r3, #1
 8003506:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003508:	2301      	movs	r3, #1
 800350a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800350c:	2301      	movs	r3, #1
 800350e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003512:	2301      	movs	r3, #1
 8003514:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800351a:	2300      	movs	r3, #0
 800351c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003520:	2300      	movs	r3, #0
 8003522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003526:	2300      	movs	r3, #0
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003530:	2301      	movs	r3, #1
 8003532:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003538:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800353a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800353e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003544:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003546:	2301      	movs	r3, #1
 8003548:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800354c:	2300      	movs	r3, #0
 800354e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003554:	f107 0308 	add.w	r3, r7, #8
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ff08 	bl	8003370 <ETH_SetDMAConfig>
}
 8003560:	bf00      	nop
 8003562:	3798      	adds	r7, #152	; 0x98
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3305      	adds	r3, #5
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	3204      	adds	r2, #4
 8003580:	7812      	ldrb	r2, [r2, #0]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <ETH_MACAddressConfig+0x68>)
 800358a:	4413      	add	r3, r2
 800358c:	461a      	mov	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3303      	adds	r3, #3
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	061a      	lsls	r2, r3, #24
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3302      	adds	r3, #2
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	041b      	lsls	r3, r3, #16
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3301      	adds	r3, #1
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	4313      	orrs	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	7812      	ldrb	r2, [r2, #0]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <ETH_MACAddressConfig+0x6c>)
 80035ba:	4413      	add	r3, r2
 80035bc:	461a      	mov	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	6013      	str	r3, [r2, #0]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40028040 	.word	0x40028040
 80035d4:	40028044 	.word	0x40028044

080035d8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e03e      	b.n	8003664 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68d9      	ldr	r1, [r3, #12]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	440b      	add	r3, r1
 80035f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2200      	movs	r2, #0
 8003602:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2200      	movs	r2, #0
 8003608:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2200      	movs	r2, #0
 800360e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	3206      	adds	r2, #6
 8003618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d80c      	bhi.n	8003648 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68d9      	ldr	r1, [r3, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	461a      	mov	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	e004      	b.n	8003652 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	461a      	mov	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3301      	adds	r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d9bd      	bls.n	80035e6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367c:	611a      	str	r2, [r3, #16]
}
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	e046      	b.n	8003726 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6919      	ldr	r1, [r3, #16]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2200      	movs	r2, #0
 80036b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2200      	movs	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2200      	movs	r2, #0
 80036c6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2200      	movs	r2, #0
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036d4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80036dc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	3212      	adds	r2, #18
 80036f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d80c      	bhi.n	8003716 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6919      	ldr	r1, [r3, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	440b      	add	r3, r1
 800370e:	461a      	mov	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	e004      	b.n	8003720 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	461a      	mov	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3301      	adds	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d9b5      	bls.n	8003698 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003756:	60da      	str	r2, [r3, #12]
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003764:	b480      	push	{r7}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	e177      	b.n	8003a70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003780:	2201      	movs	r2, #1
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	429a      	cmp	r2, r3
 800379a:	f040 8166 	bne.w	8003a6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d005      	beq.n	80037b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d130      	bne.n	8003818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	2203      	movs	r2, #3
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037ec:	2201      	movs	r2, #1
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 0201 	and.w	r2, r3, #1
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	2b03      	cmp	r3, #3
 8003822:	d017      	beq.n	8003854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d123      	bne.n	80038a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	08da      	lsrs	r2, r3, #3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3208      	adds	r2, #8
 8003868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	220f      	movs	r2, #15
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	08da      	lsrs	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3208      	adds	r2, #8
 80038a2:	69b9      	ldr	r1, [r7, #24]
 80038a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	2203      	movs	r2, #3
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0203 	and.w	r2, r3, #3
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80c0 	beq.w	8003a6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	4b66      	ldr	r3, [pc, #408]	; (8003a88 <HAL_GPIO_Init+0x324>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	4a65      	ldr	r2, [pc, #404]	; (8003a88 <HAL_GPIO_Init+0x324>)
 80038f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038f8:	6453      	str	r3, [r2, #68]	; 0x44
 80038fa:	4b63      	ldr	r3, [pc, #396]	; (8003a88 <HAL_GPIO_Init+0x324>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003906:	4a61      	ldr	r2, [pc, #388]	; (8003a8c <HAL_GPIO_Init+0x328>)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	3302      	adds	r3, #2
 800390e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	220f      	movs	r2, #15
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_GPIO_Init+0x32c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d037      	beq.n	80039a2 <HAL_GPIO_Init+0x23e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a57      	ldr	r2, [pc, #348]	; (8003a94 <HAL_GPIO_Init+0x330>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d031      	beq.n	800399e <HAL_GPIO_Init+0x23a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a56      	ldr	r2, [pc, #344]	; (8003a98 <HAL_GPIO_Init+0x334>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d02b      	beq.n	800399a <HAL_GPIO_Init+0x236>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a55      	ldr	r2, [pc, #340]	; (8003a9c <HAL_GPIO_Init+0x338>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d025      	beq.n	8003996 <HAL_GPIO_Init+0x232>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a54      	ldr	r2, [pc, #336]	; (8003aa0 <HAL_GPIO_Init+0x33c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d01f      	beq.n	8003992 <HAL_GPIO_Init+0x22e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a53      	ldr	r2, [pc, #332]	; (8003aa4 <HAL_GPIO_Init+0x340>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d019      	beq.n	800398e <HAL_GPIO_Init+0x22a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a52      	ldr	r2, [pc, #328]	; (8003aa8 <HAL_GPIO_Init+0x344>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d013      	beq.n	800398a <HAL_GPIO_Init+0x226>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a51      	ldr	r2, [pc, #324]	; (8003aac <HAL_GPIO_Init+0x348>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00d      	beq.n	8003986 <HAL_GPIO_Init+0x222>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a50      	ldr	r2, [pc, #320]	; (8003ab0 <HAL_GPIO_Init+0x34c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d007      	beq.n	8003982 <HAL_GPIO_Init+0x21e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a4f      	ldr	r2, [pc, #316]	; (8003ab4 <HAL_GPIO_Init+0x350>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d101      	bne.n	800397e <HAL_GPIO_Init+0x21a>
 800397a:	2309      	movs	r3, #9
 800397c:	e012      	b.n	80039a4 <HAL_GPIO_Init+0x240>
 800397e:	230a      	movs	r3, #10
 8003980:	e010      	b.n	80039a4 <HAL_GPIO_Init+0x240>
 8003982:	2308      	movs	r3, #8
 8003984:	e00e      	b.n	80039a4 <HAL_GPIO_Init+0x240>
 8003986:	2307      	movs	r3, #7
 8003988:	e00c      	b.n	80039a4 <HAL_GPIO_Init+0x240>
 800398a:	2306      	movs	r3, #6
 800398c:	e00a      	b.n	80039a4 <HAL_GPIO_Init+0x240>
 800398e:	2305      	movs	r3, #5
 8003990:	e008      	b.n	80039a4 <HAL_GPIO_Init+0x240>
 8003992:	2304      	movs	r3, #4
 8003994:	e006      	b.n	80039a4 <HAL_GPIO_Init+0x240>
 8003996:	2303      	movs	r3, #3
 8003998:	e004      	b.n	80039a4 <HAL_GPIO_Init+0x240>
 800399a:	2302      	movs	r3, #2
 800399c:	e002      	b.n	80039a4 <HAL_GPIO_Init+0x240>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_GPIO_Init+0x240>
 80039a2:	2300      	movs	r3, #0
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	f002 0203 	and.w	r2, r2, #3
 80039aa:	0092      	lsls	r2, r2, #2
 80039ac:	4093      	lsls	r3, r2
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039b4:	4935      	ldr	r1, [pc, #212]	; (8003a8c <HAL_GPIO_Init+0x328>)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	089b      	lsrs	r3, r3, #2
 80039ba:	3302      	adds	r3, #2
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039c2:	4b3d      	ldr	r3, [pc, #244]	; (8003ab8 <HAL_GPIO_Init+0x354>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	43db      	mvns	r3, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039e6:	4a34      	ldr	r2, [pc, #208]	; (8003ab8 <HAL_GPIO_Init+0x354>)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039ec:	4b32      	ldr	r3, [pc, #200]	; (8003ab8 <HAL_GPIO_Init+0x354>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a10:	4a29      	ldr	r2, [pc, #164]	; (8003ab8 <HAL_GPIO_Init+0x354>)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a16:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <HAL_GPIO_Init+0x354>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a3a:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <HAL_GPIO_Init+0x354>)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a40:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <HAL_GPIO_Init+0x354>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a64:	4a14      	ldr	r2, [pc, #80]	; (8003ab8 <HAL_GPIO_Init+0x354>)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b0f      	cmp	r3, #15
 8003a74:	f67f ae84 	bls.w	8003780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	3724      	adds	r7, #36	; 0x24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40013800 	.word	0x40013800
 8003a90:	40020000 	.word	0x40020000
 8003a94:	40020400 	.word	0x40020400
 8003a98:	40020800 	.word	0x40020800
 8003a9c:	40020c00 	.word	0x40020c00
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40021400 	.word	0x40021400
 8003aa8:	40021800 	.word	0x40021800
 8003aac:	40021c00 	.word	0x40021c00
 8003ab0:	40022000 	.word	0x40022000
 8003ab4:	40022400 	.word	0x40022400
 8003ab8:	40013c00 	.word	0x40013c00

08003abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	807b      	strh	r3, [r7, #2]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003acc:	787b      	ldrb	r3, [r7, #1]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ad2:	887a      	ldrh	r2, [r7, #2]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ad8:	e003      	b.n	8003ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ada:	887b      	ldrh	r3, [r7, #2]
 8003adc:	041a      	lsls	r2, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	619a      	str	r2, [r3, #24]
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d006      	beq.n	8003b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b06:	4a05      	ldr	r2, [pc, #20]	; (8003b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe f878 	bl	8001c04 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40013c00 	.word	0x40013c00

08003b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e12b      	b.n	8003d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fe fa2a 	bl	8001fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2224      	movs	r2, #36	; 0x24
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b84:	f001 fb4e 	bl	8005224 <HAL_RCC_GetPCLK1Freq>
 8003b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4a81      	ldr	r2, [pc, #516]	; (8003d94 <HAL_I2C_Init+0x274>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d807      	bhi.n	8003ba4 <HAL_I2C_Init+0x84>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a80      	ldr	r2, [pc, #512]	; (8003d98 <HAL_I2C_Init+0x278>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	bf94      	ite	ls
 8003b9c:	2301      	movls	r3, #1
 8003b9e:	2300      	movhi	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e006      	b.n	8003bb2 <HAL_I2C_Init+0x92>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a7d      	ldr	r2, [pc, #500]	; (8003d9c <HAL_I2C_Init+0x27c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	bf94      	ite	ls
 8003bac:	2301      	movls	r3, #1
 8003bae:	2300      	movhi	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e0e7      	b.n	8003d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a78      	ldr	r2, [pc, #480]	; (8003da0 <HAL_I2C_Init+0x280>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	0c9b      	lsrs	r3, r3, #18
 8003bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	4a6a      	ldr	r2, [pc, #424]	; (8003d94 <HAL_I2C_Init+0x274>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d802      	bhi.n	8003bf4 <HAL_I2C_Init+0xd4>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	e009      	b.n	8003c08 <HAL_I2C_Init+0xe8>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	4a69      	ldr	r2, [pc, #420]	; (8003da4 <HAL_I2C_Init+0x284>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	3301      	adds	r3, #1
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	495c      	ldr	r1, [pc, #368]	; (8003d94 <HAL_I2C_Init+0x274>)
 8003c24:	428b      	cmp	r3, r1
 8003c26:	d819      	bhi.n	8003c5c <HAL_I2C_Init+0x13c>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1e59      	subs	r1, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c36:	1c59      	adds	r1, r3, #1
 8003c38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c3c:	400b      	ands	r3, r1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_I2C_Init+0x138>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1e59      	subs	r1, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c50:	3301      	adds	r3, #1
 8003c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c56:	e051      	b.n	8003cfc <HAL_I2C_Init+0x1dc>
 8003c58:	2304      	movs	r3, #4
 8003c5a:	e04f      	b.n	8003cfc <HAL_I2C_Init+0x1dc>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d111      	bne.n	8003c88 <HAL_I2C_Init+0x168>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1e58      	subs	r0, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	440b      	add	r3, r1
 8003c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c76:	3301      	adds	r3, #1
 8003c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	e012      	b.n	8003cae <HAL_I2C_Init+0x18e>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1e58      	subs	r0, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6859      	ldr	r1, [r3, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	0099      	lsls	r1, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Init+0x196>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e022      	b.n	8003cfc <HAL_I2C_Init+0x1dc>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10e      	bne.n	8003cdc <HAL_I2C_Init+0x1bc>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1e58      	subs	r0, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	440b      	add	r3, r1
 8003ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cda:	e00f      	b.n	8003cfc <HAL_I2C_Init+0x1dc>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	1e58      	subs	r0, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	0099      	lsls	r1, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	6809      	ldr	r1, [r1, #0]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69da      	ldr	r2, [r3, #28]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6911      	ldr	r1, [r2, #16]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68d2      	ldr	r2, [r2, #12]
 8003d36:	4311      	orrs	r1, r2
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6812      	ldr	r2, [r2, #0]
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695a      	ldr	r2, [r3, #20]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	000186a0 	.word	0x000186a0
 8003d98:	001e847f 	.word	0x001e847f
 8003d9c:	003d08ff 	.word	0x003d08ff
 8003da0:	431bde83 	.word	0x431bde83
 8003da4:	10624dd3 	.word	0x10624dd3

08003da8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	461a      	mov	r2, r3
 8003db4:	460b      	mov	r3, r1
 8003db6:	817b      	strh	r3, [r7, #10]
 8003db8:	4613      	mov	r3, r2
 8003dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dbc:	f7fe fbca 	bl	8002554 <HAL_GetTick>
 8003dc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	f040 80e0 	bne.w	8003f90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2319      	movs	r3, #25
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	4970      	ldr	r1, [pc, #448]	; (8003f9c <HAL_I2C_Master_Transmit+0x1f4>)
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fa92 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003de6:	2302      	movs	r3, #2
 8003de8:	e0d3      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_I2C_Master_Transmit+0x50>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e0cc      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ea>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d007      	beq.n	8003e1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2221      	movs	r2, #33	; 0x21
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2210      	movs	r2, #16
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	893a      	ldrh	r2, [r7, #8]
 8003e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4a50      	ldr	r2, [pc, #320]	; (8003fa0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e60:	8979      	ldrh	r1, [r7, #10]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	6a3a      	ldr	r2, [r7, #32]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f9ca 	bl	8004200 <I2C_MasterRequestWrite>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e08d      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e8c:	e066      	b.n	8003f5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	6a39      	ldr	r1, [r7, #32]
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fb0c 	bl	80044b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00d      	beq.n	8003eba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d107      	bne.n	8003eb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e06b      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d11b      	bne.n	8003f30 <HAL_I2C_Master_Transmit+0x188>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d017      	beq.n	8003f30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	6a39      	ldr	r1, [r7, #32]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fafc 	bl	8004532 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00d      	beq.n	8003f5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d107      	bne.n	8003f58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e01a      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d194      	bne.n	8003e8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	00100002 	.word	0x00100002
 8003fa0:	ffff0000 	.word	0xffff0000

08003fa4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	; 0x28
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003fb4:	f7fe face 	bl	8002554 <HAL_GetTick>
 8003fb8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	f040 8111 	bne.w	80041ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2319      	movs	r3, #25
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	4988      	ldr	r1, [pc, #544]	; (80041f8 <HAL_I2C_IsDeviceReady+0x254>)
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f994 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e104      	b.n	80041f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_I2C_IsDeviceReady+0x50>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e0fd      	b.n	80041f0 <HAL_I2C_IsDeviceReady+0x24c>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b01      	cmp	r3, #1
 8004008:	d007      	beq.n	800401a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0201 	orr.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004028:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2224      	movs	r2, #36	; 0x24
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4a70      	ldr	r2, [pc, #448]	; (80041fc <HAL_I2C_IsDeviceReady+0x258>)
 800403c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2200      	movs	r2, #0
 8004056:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 f952 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00d      	beq.n	8004082 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004074:	d103      	bne.n	800407e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800407c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e0b6      	b.n	80041f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004082:	897b      	ldrh	r3, [r7, #10]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004090:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004092:	f7fe fa5f 	bl	8002554 <HAL_GetTick>
 8004096:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	bf0c      	ite	eq
 80040a6:	2301      	moveq	r3, #1
 80040a8:	2300      	movne	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040bc:	bf0c      	ite	eq
 80040be:	2301      	moveq	r3, #1
 80040c0:	2300      	movne	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040c6:	e025      	b.n	8004114 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040c8:	f7fe fa44 	bl	8002554 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d302      	bcc.n	80040de <HAL_I2C_IsDeviceReady+0x13a>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	22a0      	movs	r2, #160	; 0xa0
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410a:	bf0c      	ite	eq
 800410c:	2301      	moveq	r3, #1
 800410e:	2300      	movne	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2ba0      	cmp	r3, #160	; 0xa0
 800411e:	d005      	beq.n	800412c <HAL_I2C_IsDeviceReady+0x188>
 8004120:	7dfb      	ldrb	r3, [r7, #23]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <HAL_I2C_IsDeviceReady+0x188>
 8004126:	7dbb      	ldrb	r3, [r7, #22]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0cd      	beq.n	80040c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	d129      	bne.n	8004196 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004150:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	2319      	movs	r3, #25
 800416e:	2201      	movs	r2, #1
 8004170:	4921      	ldr	r1, [pc, #132]	; (80041f8 <HAL_I2C_IsDeviceReady+0x254>)
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f8c6 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e036      	b.n	80041f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	e02c      	b.n	80041f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	2319      	movs	r3, #25
 80041b6:	2201      	movs	r2, #1
 80041b8:	490f      	ldr	r1, [pc, #60]	; (80041f8 <HAL_I2C_IsDeviceReady+0x254>)
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f8a2 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e012      	b.n	80041f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	3301      	adds	r3, #1
 80041ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	f4ff af32 	bcc.w	800403e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
  }
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	00100002 	.word	0x00100002
 80041fc:	ffff0000 	.word	0xffff0000

08004200 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	460b      	mov	r3, r1
 800420e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d006      	beq.n	800422a <I2C_MasterRequestWrite+0x2a>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d003      	beq.n	800422a <I2C_MasterRequestWrite+0x2a>
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004228:	d108      	bne.n	800423c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e00b      	b.n	8004254 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	2b12      	cmp	r3, #18
 8004242:	d107      	bne.n	8004254 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004252:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f84f 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00d      	beq.n	8004288 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427a:	d103      	bne.n	8004284 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e035      	b.n	80042f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004290:	d108      	bne.n	80042a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004292:	897b      	ldrh	r3, [r7, #10]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042a0:	611a      	str	r2, [r3, #16]
 80042a2:	e01b      	b.n	80042dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042a4:	897b      	ldrh	r3, [r7, #10]
 80042a6:	11db      	asrs	r3, r3, #7
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f003 0306 	and.w	r3, r3, #6
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f063 030f 	orn	r3, r3, #15
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	490e      	ldr	r1, [pc, #56]	; (80042fc <I2C_MasterRequestWrite+0xfc>)
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f875 	bl	80043b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e010      	b.n	80042f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042d2:	897b      	ldrh	r3, [r7, #10]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4907      	ldr	r1, [pc, #28]	; (8004300 <I2C_MasterRequestWrite+0x100>)
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f865 	bl	80043b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	00010008 	.word	0x00010008
 8004300:	00010002 	.word	0x00010002

08004304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004314:	e025      	b.n	8004362 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d021      	beq.n	8004362 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7fe f919 	bl	8002554 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <I2C_WaitOnFlagUntilTimeout+0x30>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d116      	bne.n	8004362 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f043 0220 	orr.w	r2, r3, #32
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e023      	b.n	80043aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b01      	cmp	r3, #1
 800436a:	d10d      	bne.n	8004388 <I2C_WaitOnFlagUntilTimeout+0x84>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	43da      	mvns	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4013      	ands	r3, r2
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	bf0c      	ite	eq
 800437e:	2301      	moveq	r3, #1
 8004380:	2300      	movne	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	461a      	mov	r2, r3
 8004386:	e00c      	b.n	80043a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	43da      	mvns	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4013      	ands	r3, r2
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	bf0c      	ite	eq
 800439a:	2301      	moveq	r3, #1
 800439c:	2300      	movne	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d0b6      	beq.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043c0:	e051      	b.n	8004466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d0:	d123      	bne.n	800441a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f043 0204 	orr.w	r2, r3, #4
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e046      	b.n	80044a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d021      	beq.n	8004466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004422:	f7fe f897 	bl	8002554 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	429a      	cmp	r2, r3
 8004430:	d302      	bcc.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d116      	bne.n	8004466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f043 0220 	orr.w	r2, r3, #32
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e020      	b.n	80044a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b01      	cmp	r3, #1
 800446e:	d10c      	bne.n	800448a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	43da      	mvns	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4013      	ands	r3, r2
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	bf14      	ite	ne
 8004482:	2301      	movne	r3, #1
 8004484:	2300      	moveq	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	e00b      	b.n	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	43da      	mvns	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4013      	ands	r3, r2
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	bf14      	ite	ne
 800449c:	2301      	movne	r3, #1
 800449e:	2300      	moveq	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d18d      	bne.n	80043c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044bc:	e02d      	b.n	800451a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f878 	bl	80045b4 <I2C_IsAcknowledgeFailed>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e02d      	b.n	800452a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d4:	d021      	beq.n	800451a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d6:	f7fe f83d 	bl	8002554 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d302      	bcc.n	80044ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d116      	bne.n	800451a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f043 0220 	orr.w	r2, r3, #32
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e007      	b.n	800452a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004524:	2b80      	cmp	r3, #128	; 0x80
 8004526:	d1ca      	bne.n	80044be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800453e:	e02d      	b.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f837 	bl	80045b4 <I2C_IsAcknowledgeFailed>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e02d      	b.n	80045ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d021      	beq.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004558:	f7fd fffc 	bl	8002554 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	429a      	cmp	r2, r3
 8004566:	d302      	bcc.n	800456e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d116      	bne.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f043 0220 	orr.w	r2, r3, #32
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e007      	b.n	80045ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d1ca      	bne.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ca:	d11b      	bne.n	8004604 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	f043 0204 	orr.w	r2, r3, #4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b20      	cmp	r3, #32
 8004626:	d129      	bne.n	800467c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2224      	movs	r2, #36	; 0x24
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0210 	bic.w	r2, r2, #16
 800464e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	e000      	b.n	800467e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800467c:	2302      	movs	r3, #2
  }
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800468a:	b480      	push	{r7}
 800468c:	b085      	sub	sp, #20
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d12a      	bne.n	80046fa <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2224      	movs	r2, #36	; 0x24
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80046c4:	89fb      	ldrh	r3, [r7, #14]
 80046c6:	f023 030f 	bic.w	r3, r3, #15
 80046ca:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	89fb      	ldrh	r3, [r7, #14]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	89fa      	ldrh	r2, [r7, #14]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0201 	orr.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e000      	b.n	80046fc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80046fa:	2302      	movs	r3, #2
  }
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800470a:	b08f      	sub	sp, #60	; 0x3c
 800470c:	af0a      	add	r7, sp, #40	; 0x28
 800470e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e10f      	b.n	800493a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d106      	bne.n	800473a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7fd fd19 	bl	800216c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2203      	movs	r2, #3
 800473e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f001 fce4 	bl	8006126 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	687e      	ldr	r6, [r7, #4]
 8004766:	466d      	mov	r5, sp
 8004768:	f106 0410 	add.w	r4, r6, #16
 800476c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800476e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004774:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004778:	e885 0003 	stmia.w	r5, {r0, r1}
 800477c:	1d33      	adds	r3, r6, #4
 800477e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004780:	6838      	ldr	r0, [r7, #0]
 8004782:	f001 fc6f 	bl	8006064 <USB_CoreInit>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0d0      	b.n	800493a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f001 fcd2 	bl	8006148 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047a4:	2300      	movs	r3, #0
 80047a6:	73fb      	strb	r3, [r7, #15]
 80047a8:	e04a      	b.n	8004840 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047aa:	7bfa      	ldrb	r2, [r7, #15]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	333d      	adds	r3, #61	; 0x3d
 80047ba:	2201      	movs	r2, #1
 80047bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047be:	7bfa      	ldrb	r2, [r7, #15]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	333c      	adds	r3, #60	; 0x3c
 80047ce:	7bfa      	ldrb	r2, [r7, #15]
 80047d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047d2:	7bfa      	ldrb	r2, [r7, #15]
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	b298      	uxth	r0, r3
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	3344      	adds	r3, #68	; 0x44
 80047e6:	4602      	mov	r2, r0
 80047e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047ea:	7bfa      	ldrb	r2, [r7, #15]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	3340      	adds	r3, #64	; 0x40
 80047fa:	2200      	movs	r2, #0
 80047fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047fe:	7bfa      	ldrb	r2, [r7, #15]
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	3348      	adds	r3, #72	; 0x48
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004812:	7bfa      	ldrb	r2, [r7, #15]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	334c      	adds	r3, #76	; 0x4c
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004826:	7bfa      	ldrb	r2, [r7, #15]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	3354      	adds	r3, #84	; 0x54
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	3301      	adds	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
 8004840:	7bfa      	ldrb	r2, [r7, #15]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	429a      	cmp	r2, r3
 8004848:	d3af      	bcc.n	80047aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]
 800484e:	e044      	b.n	80048da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004850:	7bfa      	ldrb	r2, [r7, #15]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004862:	2200      	movs	r2, #0
 8004864:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004866:	7bfa      	ldrb	r2, [r7, #15]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004878:	7bfa      	ldrb	r2, [r7, #15]
 800487a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800487c:	7bfa      	ldrb	r2, [r7, #15]
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004892:	7bfa      	ldrb	r2, [r7, #15]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048a8:	7bfa      	ldrb	r2, [r7, #15]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048be:	7bfa      	ldrb	r2, [r7, #15]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	3301      	adds	r3, #1
 80048d8:	73fb      	strb	r3, [r7, #15]
 80048da:	7bfa      	ldrb	r2, [r7, #15]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d3b5      	bcc.n	8004850 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	603b      	str	r3, [r7, #0]
 80048ea:	687e      	ldr	r6, [r7, #4]
 80048ec:	466d      	mov	r5, sp
 80048ee:	f106 0410 	add.w	r4, r6, #16
 80048f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004902:	1d33      	adds	r3, r6, #4
 8004904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004906:	6838      	ldr	r0, [r7, #0]
 8004908:	f001 fc6a 	bl	80061e0 <USB_DevInit>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e00d      	b.n	800493a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fe35 	bl	80065a2 <USB_DevDisconnect>

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004944 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e267      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d075      	beq.n	8004a4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004962:	4b88      	ldr	r3, [pc, #544]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b04      	cmp	r3, #4
 800496c:	d00c      	beq.n	8004988 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496e:	4b85      	ldr	r3, [pc, #532]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004976:	2b08      	cmp	r3, #8
 8004978:	d112      	bne.n	80049a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800497a:	4b82      	ldr	r3, [pc, #520]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004986:	d10b      	bne.n	80049a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004988:	4b7e      	ldr	r3, [pc, #504]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d05b      	beq.n	8004a4c <HAL_RCC_OscConfig+0x108>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d157      	bne.n	8004a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e242      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a8:	d106      	bne.n	80049b8 <HAL_RCC_OscConfig+0x74>
 80049aa:	4b76      	ldr	r3, [pc, #472]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a75      	ldr	r2, [pc, #468]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	e01d      	b.n	80049f4 <HAL_RCC_OscConfig+0xb0>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049c0:	d10c      	bne.n	80049dc <HAL_RCC_OscConfig+0x98>
 80049c2:	4b70      	ldr	r3, [pc, #448]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a6f      	ldr	r2, [pc, #444]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	4b6d      	ldr	r3, [pc, #436]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a6c      	ldr	r2, [pc, #432]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e00b      	b.n	80049f4 <HAL_RCC_OscConfig+0xb0>
 80049dc:	4b69      	ldr	r3, [pc, #420]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a68      	ldr	r2, [pc, #416]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	4b66      	ldr	r3, [pc, #408]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a65      	ldr	r2, [pc, #404]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 80049ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d013      	beq.n	8004a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fc:	f7fd fdaa 	bl	8002554 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a04:	f7fd fda6 	bl	8002554 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b64      	cmp	r3, #100	; 0x64
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e207      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a16:	4b5b      	ldr	r3, [pc, #364]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0xc0>
 8004a22:	e014      	b.n	8004a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fd fd96 	bl	8002554 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a2c:	f7fd fd92 	bl	8002554 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	; 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e1f3      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a3e:	4b51      	ldr	r3, [pc, #324]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0xe8>
 8004a4a:	e000      	b.n	8004a4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d063      	beq.n	8004b22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a5a:	4b4a      	ldr	r3, [pc, #296]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 030c 	and.w	r3, r3, #12
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00b      	beq.n	8004a7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a66:	4b47      	ldr	r3, [pc, #284]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d11c      	bne.n	8004aac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a72:	4b44      	ldr	r3, [pc, #272]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d116      	bne.n	8004aac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7e:	4b41      	ldr	r3, [pc, #260]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d005      	beq.n	8004a96 <HAL_RCC_OscConfig+0x152>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d001      	beq.n	8004a96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e1c7      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a96:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	4937      	ldr	r1, [pc, #220]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aaa:	e03a      	b.n	8004b22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d020      	beq.n	8004af6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab4:	4b34      	ldr	r3, [pc, #208]	; (8004b88 <HAL_RCC_OscConfig+0x244>)
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aba:	f7fd fd4b 	bl	8002554 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ac2:	f7fd fd47 	bl	8002554 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e1a8      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad4:	4b2b      	ldr	r3, [pc, #172]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0f0      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae0:	4b28      	ldr	r3, [pc, #160]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	4925      	ldr	r1, [pc, #148]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	600b      	str	r3, [r1, #0]
 8004af4:	e015      	b.n	8004b22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004af6:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <HAL_RCC_OscConfig+0x244>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fd fd2a 	bl	8002554 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b04:	f7fd fd26 	bl	8002554 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e187      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b16:	4b1b      	ldr	r3, [pc, #108]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d036      	beq.n	8004b9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d016      	beq.n	8004b64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b36:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <HAL_RCC_OscConfig+0x248>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3c:	f7fd fd0a 	bl	8002554 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b44:	f7fd fd06 	bl	8002554 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e167      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b56:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_RCC_OscConfig+0x240>)
 8004b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0f0      	beq.n	8004b44 <HAL_RCC_OscConfig+0x200>
 8004b62:	e01b      	b.n	8004b9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b64:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <HAL_RCC_OscConfig+0x248>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b6a:	f7fd fcf3 	bl	8002554 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b70:	e00e      	b.n	8004b90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b72:	f7fd fcef 	bl	8002554 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d907      	bls.n	8004b90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e150      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
 8004b84:	40023800 	.word	0x40023800
 8004b88:	42470000 	.word	0x42470000
 8004b8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b90:	4b88      	ldr	r3, [pc, #544]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1ea      	bne.n	8004b72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8097 	beq.w	8004cd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004baa:	2300      	movs	r3, #0
 8004bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bae:	4b81      	ldr	r3, [pc, #516]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10f      	bne.n	8004bda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	4b7d      	ldr	r3, [pc, #500]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	4a7c      	ldr	r2, [pc, #496]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bca:	4b7a      	ldr	r3, [pc, #488]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	60bb      	str	r3, [r7, #8]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bda:	4b77      	ldr	r3, [pc, #476]	; (8004db8 <HAL_RCC_OscConfig+0x474>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d118      	bne.n	8004c18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004be6:	4b74      	ldr	r3, [pc, #464]	; (8004db8 <HAL_RCC_OscConfig+0x474>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a73      	ldr	r2, [pc, #460]	; (8004db8 <HAL_RCC_OscConfig+0x474>)
 8004bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bf2:	f7fd fcaf 	bl	8002554 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfa:	f7fd fcab 	bl	8002554 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e10c      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0c:	4b6a      	ldr	r3, [pc, #424]	; (8004db8 <HAL_RCC_OscConfig+0x474>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0f0      	beq.n	8004bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d106      	bne.n	8004c2e <HAL_RCC_OscConfig+0x2ea>
 8004c20:	4b64      	ldr	r3, [pc, #400]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	4a63      	ldr	r2, [pc, #396]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2c:	e01c      	b.n	8004c68 <HAL_RCC_OscConfig+0x324>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b05      	cmp	r3, #5
 8004c34:	d10c      	bne.n	8004c50 <HAL_RCC_OscConfig+0x30c>
 8004c36:	4b5f      	ldr	r3, [pc, #380]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	4a5e      	ldr	r2, [pc, #376]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	f043 0304 	orr.w	r3, r3, #4
 8004c40:	6713      	str	r3, [r2, #112]	; 0x70
 8004c42:	4b5c      	ldr	r3, [pc, #368]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	4a5b      	ldr	r2, [pc, #364]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4e:	e00b      	b.n	8004c68 <HAL_RCC_OscConfig+0x324>
 8004c50:	4b58      	ldr	r3, [pc, #352]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c54:	4a57      	ldr	r2, [pc, #348]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5c:	4b55      	ldr	r3, [pc, #340]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c60:	4a54      	ldr	r2, [pc, #336]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c62:	f023 0304 	bic.w	r3, r3, #4
 8004c66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d015      	beq.n	8004c9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c70:	f7fd fc70 	bl	8002554 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c76:	e00a      	b.n	8004c8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c78:	f7fd fc6c 	bl	8002554 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e0cb      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8e:	4b49      	ldr	r3, [pc, #292]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0ee      	beq.n	8004c78 <HAL_RCC_OscConfig+0x334>
 8004c9a:	e014      	b.n	8004cc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9c:	f7fd fc5a 	bl	8002554 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca2:	e00a      	b.n	8004cba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca4:	f7fd fc56 	bl	8002554 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e0b5      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cba:	4b3e      	ldr	r3, [pc, #248]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1ee      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d105      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ccc:	4b39      	ldr	r3, [pc, #228]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	4a38      	ldr	r2, [pc, #224]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80a1 	beq.w	8004e24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ce2:	4b34      	ldr	r3, [pc, #208]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d05c      	beq.n	8004da8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d141      	bne.n	8004d7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf6:	4b31      	ldr	r3, [pc, #196]	; (8004dbc <HAL_RCC_OscConfig+0x478>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fd fc2a 	bl	8002554 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d04:	f7fd fc26 	bl	8002554 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e087      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d16:	4b27      	ldr	r3, [pc, #156]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	019b      	lsls	r3, r3, #6
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	085b      	lsrs	r3, r3, #1
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	041b      	lsls	r3, r3, #16
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	061b      	lsls	r3, r3, #24
 8004d46:	491b      	ldr	r1, [pc, #108]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d4c:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <HAL_RCC_OscConfig+0x478>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d52:	f7fd fbff 	bl	8002554 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d5a:	f7fd fbfb 	bl	8002554 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e05c      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6c:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCC_OscConfig+0x416>
 8004d78:	e054      	b.n	8004e24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7a:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <HAL_RCC_OscConfig+0x478>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d80:	f7fd fbe8 	bl	8002554 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d88:	f7fd fbe4 	bl	8002554 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e045      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9a:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f0      	bne.n	8004d88 <HAL_RCC_OscConfig+0x444>
 8004da6:	e03d      	b.n	8004e24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d107      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e038      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
 8004db4:	40023800 	.word	0x40023800
 8004db8:	40007000 	.word	0x40007000
 8004dbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dc0:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <HAL_RCC_OscConfig+0x4ec>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d028      	beq.n	8004e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d121      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d11a      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004df0:	4013      	ands	r3, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004df6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d111      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d107      	bne.n	8004e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e000      	b.n	8004e26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800

08004e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0cc      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e48:	4b68      	ldr	r3, [pc, #416]	; (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d90c      	bls.n	8004e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e56:	4b65      	ldr	r3, [pc, #404]	; (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5e:	4b63      	ldr	r3, [pc, #396]	; (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0b8      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d020      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e88:	4b59      	ldr	r3, [pc, #356]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	4a58      	ldr	r2, [pc, #352]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ea0:	4b53      	ldr	r3, [pc, #332]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	4a52      	ldr	r2, [pc, #328]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eac:	4b50      	ldr	r3, [pc, #320]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	494d      	ldr	r1, [pc, #308]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d044      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d107      	bne.n	8004ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed2:	4b47      	ldr	r3, [pc, #284]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d119      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e07f      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d003      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d107      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef2:	4b3f      	ldr	r3, [pc, #252]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e06f      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f02:	4b3b      	ldr	r3, [pc, #236]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e067      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f12:	4b37      	ldr	r3, [pc, #220]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f023 0203 	bic.w	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	4934      	ldr	r1, [pc, #208]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f24:	f7fd fb16 	bl	8002554 <HAL_GetTick>
 8004f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	e00a      	b.n	8004f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f2c:	f7fd fb12 	bl	8002554 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e04f      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f42:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 020c 	and.w	r2, r3, #12
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d1eb      	bne.n	8004f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f54:	4b25      	ldr	r3, [pc, #148]	; (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d20c      	bcs.n	8004f7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f62:	4b22      	ldr	r3, [pc, #136]	; (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6a:	4b20      	ldr	r3, [pc, #128]	; (8004fec <HAL_RCC_ClockConfig+0x1b8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e032      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f88:	4b19      	ldr	r3, [pc, #100]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4916      	ldr	r1, [pc, #88]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fa6:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	490e      	ldr	r1, [pc, #56]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fba:	f000 f821 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	490a      	ldr	r1, [pc, #40]	; (8004ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8004fcc:	5ccb      	ldrb	r3, [r1, r3]
 8004fce:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fd6:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <HAL_RCC_ClockConfig+0x1c8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fd fa76 	bl	80024cc <HAL_InitTick>

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40023c00 	.word	0x40023c00
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	0800aff8 	.word	0x0800aff8
 8004ff8:	20000014 	.word	0x20000014
 8004ffc:	20000018 	.word	0x20000018

08005000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005004:	b094      	sub	sp, #80	; 0x50
 8005006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	647b      	str	r3, [r7, #68]	; 0x44
 800500c:	2300      	movs	r3, #0
 800500e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005010:	2300      	movs	r3, #0
 8005012:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005018:	4b79      	ldr	r3, [pc, #484]	; (8005200 <HAL_RCC_GetSysClockFreq+0x200>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 030c 	and.w	r3, r3, #12
 8005020:	2b08      	cmp	r3, #8
 8005022:	d00d      	beq.n	8005040 <HAL_RCC_GetSysClockFreq+0x40>
 8005024:	2b08      	cmp	r3, #8
 8005026:	f200 80e1 	bhi.w	80051ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0x34>
 800502e:	2b04      	cmp	r3, #4
 8005030:	d003      	beq.n	800503a <HAL_RCC_GetSysClockFreq+0x3a>
 8005032:	e0db      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005034:	4b73      	ldr	r3, [pc, #460]	; (8005204 <HAL_RCC_GetSysClockFreq+0x204>)
 8005036:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005038:	e0db      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800503a:	4b73      	ldr	r3, [pc, #460]	; (8005208 <HAL_RCC_GetSysClockFreq+0x208>)
 800503c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800503e:	e0d8      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005040:	4b6f      	ldr	r3, [pc, #444]	; (8005200 <HAL_RCC_GetSysClockFreq+0x200>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005048:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800504a:	4b6d      	ldr	r3, [pc, #436]	; (8005200 <HAL_RCC_GetSysClockFreq+0x200>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d063      	beq.n	800511e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005056:	4b6a      	ldr	r3, [pc, #424]	; (8005200 <HAL_RCC_GetSysClockFreq+0x200>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	099b      	lsrs	r3, r3, #6
 800505c:	2200      	movs	r2, #0
 800505e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005060:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005068:	633b      	str	r3, [r7, #48]	; 0x30
 800506a:	2300      	movs	r3, #0
 800506c:	637b      	str	r3, [r7, #52]	; 0x34
 800506e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005072:	4622      	mov	r2, r4
 8005074:	462b      	mov	r3, r5
 8005076:	f04f 0000 	mov.w	r0, #0
 800507a:	f04f 0100 	mov.w	r1, #0
 800507e:	0159      	lsls	r1, r3, #5
 8005080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005084:	0150      	lsls	r0, r2, #5
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4621      	mov	r1, r4
 800508c:	1a51      	subs	r1, r2, r1
 800508e:	6139      	str	r1, [r7, #16]
 8005090:	4629      	mov	r1, r5
 8005092:	eb63 0301 	sbc.w	r3, r3, r1
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050a4:	4659      	mov	r1, fp
 80050a6:	018b      	lsls	r3, r1, #6
 80050a8:	4651      	mov	r1, sl
 80050aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050ae:	4651      	mov	r1, sl
 80050b0:	018a      	lsls	r2, r1, #6
 80050b2:	4651      	mov	r1, sl
 80050b4:	ebb2 0801 	subs.w	r8, r2, r1
 80050b8:	4659      	mov	r1, fp
 80050ba:	eb63 0901 	sbc.w	r9, r3, r1
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050d2:	4690      	mov	r8, r2
 80050d4:	4699      	mov	r9, r3
 80050d6:	4623      	mov	r3, r4
 80050d8:	eb18 0303 	adds.w	r3, r8, r3
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	462b      	mov	r3, r5
 80050e0:	eb49 0303 	adc.w	r3, r9, r3
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050f2:	4629      	mov	r1, r5
 80050f4:	024b      	lsls	r3, r1, #9
 80050f6:	4621      	mov	r1, r4
 80050f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050fc:	4621      	mov	r1, r4
 80050fe:	024a      	lsls	r2, r1, #9
 8005100:	4610      	mov	r0, r2
 8005102:	4619      	mov	r1, r3
 8005104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005106:	2200      	movs	r2, #0
 8005108:	62bb      	str	r3, [r7, #40]	; 0x28
 800510a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800510c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005110:	f7fb fdca 	bl	8000ca8 <__aeabi_uldivmod>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4613      	mov	r3, r2
 800511a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800511c:	e058      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800511e:	4b38      	ldr	r3, [pc, #224]	; (8005200 <HAL_RCC_GetSysClockFreq+0x200>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	099b      	lsrs	r3, r3, #6
 8005124:	2200      	movs	r2, #0
 8005126:	4618      	mov	r0, r3
 8005128:	4611      	mov	r1, r2
 800512a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800512e:	623b      	str	r3, [r7, #32]
 8005130:	2300      	movs	r3, #0
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
 8005134:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	f04f 0000 	mov.w	r0, #0
 8005140:	f04f 0100 	mov.w	r1, #0
 8005144:	0159      	lsls	r1, r3, #5
 8005146:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800514a:	0150      	lsls	r0, r2, #5
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4641      	mov	r1, r8
 8005152:	ebb2 0a01 	subs.w	sl, r2, r1
 8005156:	4649      	mov	r1, r9
 8005158:	eb63 0b01 	sbc.w	fp, r3, r1
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005168:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800516c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005170:	ebb2 040a 	subs.w	r4, r2, sl
 8005174:	eb63 050b 	sbc.w	r5, r3, fp
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	00eb      	lsls	r3, r5, #3
 8005182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005186:	00e2      	lsls	r2, r4, #3
 8005188:	4614      	mov	r4, r2
 800518a:	461d      	mov	r5, r3
 800518c:	4643      	mov	r3, r8
 800518e:	18e3      	adds	r3, r4, r3
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	464b      	mov	r3, r9
 8005194:	eb45 0303 	adc.w	r3, r5, r3
 8005198:	607b      	str	r3, [r7, #4]
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051a6:	4629      	mov	r1, r5
 80051a8:	028b      	lsls	r3, r1, #10
 80051aa:	4621      	mov	r1, r4
 80051ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051b0:	4621      	mov	r1, r4
 80051b2:	028a      	lsls	r2, r1, #10
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ba:	2200      	movs	r2, #0
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	61fa      	str	r2, [r7, #28]
 80051c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051c4:	f7fb fd70 	bl	8000ca8 <__aeabi_uldivmod>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4613      	mov	r3, r2
 80051ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <HAL_RCC_GetSysClockFreq+0x200>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	3301      	adds	r3, #1
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80051e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051ea:	e002      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <HAL_RCC_GetSysClockFreq+0x204>)
 80051ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3750      	adds	r7, #80	; 0x50
 80051f8:	46bd      	mov	sp, r7
 80051fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800
 8005204:	00f42400 	.word	0x00f42400
 8005208:	007a1200 	.word	0x007a1200

0800520c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005210:	4b03      	ldr	r3, [pc, #12]	; (8005220 <HAL_RCC_GetHCLKFreq+0x14>)
 8005212:	681b      	ldr	r3, [r3, #0]
}
 8005214:	4618      	mov	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20000014 	.word	0x20000014

08005224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005228:	f7ff fff0 	bl	800520c <HAL_RCC_GetHCLKFreq>
 800522c:	4602      	mov	r2, r0
 800522e:	4b05      	ldr	r3, [pc, #20]	; (8005244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	0a9b      	lsrs	r3, r3, #10
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	4903      	ldr	r1, [pc, #12]	; (8005248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800523a:	5ccb      	ldrb	r3, [r1, r3]
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005240:	4618      	mov	r0, r3
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40023800 	.word	0x40023800
 8005248:	0800b008 	.word	0x0800b008

0800524c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005250:	f7ff ffdc 	bl	800520c <HAL_RCC_GetHCLKFreq>
 8005254:	4602      	mov	r2, r0
 8005256:	4b05      	ldr	r3, [pc, #20]	; (800526c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	0b5b      	lsrs	r3, r3, #13
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	4903      	ldr	r1, [pc, #12]	; (8005270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005262:	5ccb      	ldrb	r3, [r1, r3]
 8005264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005268:	4618      	mov	r0, r3
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40023800 	.word	0x40023800
 8005270:	0800b008 	.word	0x0800b008

08005274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e041      	b.n	800530a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7fc fec8 	bl	8002030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4619      	mov	r1, r3
 80052b2:	4610      	mov	r0, r2
 80052b4:	f000 f95e 	bl	8005574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	d001      	beq.n	800532c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e046      	b.n	80053ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a23      	ldr	r2, [pc, #140]	; (80053c8 <HAL_TIM_Base_Start+0xb4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d022      	beq.n	8005384 <HAL_TIM_Base_Start+0x70>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005346:	d01d      	beq.n	8005384 <HAL_TIM_Base_Start+0x70>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1f      	ldr	r2, [pc, #124]	; (80053cc <HAL_TIM_Base_Start+0xb8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d018      	beq.n	8005384 <HAL_TIM_Base_Start+0x70>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <HAL_TIM_Base_Start+0xbc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d013      	beq.n	8005384 <HAL_TIM_Base_Start+0x70>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <HAL_TIM_Base_Start+0xc0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00e      	beq.n	8005384 <HAL_TIM_Base_Start+0x70>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <HAL_TIM_Base_Start+0xc4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d009      	beq.n	8005384 <HAL_TIM_Base_Start+0x70>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a19      	ldr	r2, [pc, #100]	; (80053dc <HAL_TIM_Base_Start+0xc8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d004      	beq.n	8005384 <HAL_TIM_Base_Start+0x70>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a18      	ldr	r2, [pc, #96]	; (80053e0 <HAL_TIM_Base_Start+0xcc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d111      	bne.n	80053a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b06      	cmp	r3, #6
 8005394:	d010      	beq.n	80053b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0201 	orr.w	r2, r2, #1
 80053a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a6:	e007      	b.n	80053b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40010400 	.word	0x40010400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40001800 	.word	0x40001800

080053e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_TIM_ConfigClockSource+0x1c>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e0b4      	b.n	800556a <HAL_TIM_ConfigClockSource+0x186>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800541e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005438:	d03e      	beq.n	80054b8 <HAL_TIM_ConfigClockSource+0xd4>
 800543a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543e:	f200 8087 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005446:	f000 8086 	beq.w	8005556 <HAL_TIM_ConfigClockSource+0x172>
 800544a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544e:	d87f      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005450:	2b70      	cmp	r3, #112	; 0x70
 8005452:	d01a      	beq.n	800548a <HAL_TIM_ConfigClockSource+0xa6>
 8005454:	2b70      	cmp	r3, #112	; 0x70
 8005456:	d87b      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005458:	2b60      	cmp	r3, #96	; 0x60
 800545a:	d050      	beq.n	80054fe <HAL_TIM_ConfigClockSource+0x11a>
 800545c:	2b60      	cmp	r3, #96	; 0x60
 800545e:	d877      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005460:	2b50      	cmp	r3, #80	; 0x50
 8005462:	d03c      	beq.n	80054de <HAL_TIM_ConfigClockSource+0xfa>
 8005464:	2b50      	cmp	r3, #80	; 0x50
 8005466:	d873      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d058      	beq.n	800551e <HAL_TIM_ConfigClockSource+0x13a>
 800546c:	2b40      	cmp	r3, #64	; 0x40
 800546e:	d86f      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005470:	2b30      	cmp	r3, #48	; 0x30
 8005472:	d064      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15a>
 8005474:	2b30      	cmp	r3, #48	; 0x30
 8005476:	d86b      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005478:	2b20      	cmp	r3, #32
 800547a:	d060      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15a>
 800547c:	2b20      	cmp	r3, #32
 800547e:	d867      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d05c      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15a>
 8005484:	2b10      	cmp	r3, #16
 8005486:	d05a      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15a>
 8005488:	e062      	b.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6899      	ldr	r1, [r3, #8]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f000 f985 	bl	80057a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	609a      	str	r2, [r3, #8]
      break;
 80054b6:	e04f      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	6899      	ldr	r1, [r3, #8]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f000 f96e 	bl	80057a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054da:	609a      	str	r2, [r3, #8]
      break;
 80054dc:	e03c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6859      	ldr	r1, [r3, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f000 f8e2 	bl	80056b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2150      	movs	r1, #80	; 0x50
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f93b 	bl	8005772 <TIM_ITRx_SetConfig>
      break;
 80054fc:	e02c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6859      	ldr	r1, [r3, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	461a      	mov	r2, r3
 800550c:	f000 f901 	bl	8005712 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2160      	movs	r1, #96	; 0x60
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f92b 	bl	8005772 <TIM_ITRx_SetConfig>
      break;
 800551c:	e01c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6859      	ldr	r1, [r3, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	461a      	mov	r2, r3
 800552c:	f000 f8c2 	bl	80056b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2140      	movs	r1, #64	; 0x40
 8005536:	4618      	mov	r0, r3
 8005538:	f000 f91b 	bl	8005772 <TIM_ITRx_SetConfig>
      break;
 800553c:	e00c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f000 f912 	bl	8005772 <TIM_ITRx_SetConfig>
      break;
 800554e:	e003      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
      break;
 8005554:	e000      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a40      	ldr	r2, [pc, #256]	; (8005688 <TIM_Base_SetConfig+0x114>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d013      	beq.n	80055b4 <TIM_Base_SetConfig+0x40>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005592:	d00f      	beq.n	80055b4 <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a3d      	ldr	r2, [pc, #244]	; (800568c <TIM_Base_SetConfig+0x118>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00b      	beq.n	80055b4 <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a3c      	ldr	r2, [pc, #240]	; (8005690 <TIM_Base_SetConfig+0x11c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d007      	beq.n	80055b4 <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a3b      	ldr	r2, [pc, #236]	; (8005694 <TIM_Base_SetConfig+0x120>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d003      	beq.n	80055b4 <TIM_Base_SetConfig+0x40>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a3a      	ldr	r2, [pc, #232]	; (8005698 <TIM_Base_SetConfig+0x124>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d108      	bne.n	80055c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2f      	ldr	r2, [pc, #188]	; (8005688 <TIM_Base_SetConfig+0x114>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d02b      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d4:	d027      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2c      	ldr	r2, [pc, #176]	; (800568c <TIM_Base_SetConfig+0x118>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d023      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2b      	ldr	r2, [pc, #172]	; (8005690 <TIM_Base_SetConfig+0x11c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d01f      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <TIM_Base_SetConfig+0x120>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01b      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a29      	ldr	r2, [pc, #164]	; (8005698 <TIM_Base_SetConfig+0x124>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d017      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a28      	ldr	r2, [pc, #160]	; (800569c <TIM_Base_SetConfig+0x128>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a27      	ldr	r2, [pc, #156]	; (80056a0 <TIM_Base_SetConfig+0x12c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00f      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a26      	ldr	r2, [pc, #152]	; (80056a4 <TIM_Base_SetConfig+0x130>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00b      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a25      	ldr	r2, [pc, #148]	; (80056a8 <TIM_Base_SetConfig+0x134>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d007      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a24      	ldr	r2, [pc, #144]	; (80056ac <TIM_Base_SetConfig+0x138>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d003      	beq.n	8005626 <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a23      	ldr	r2, [pc, #140]	; (80056b0 <TIM_Base_SetConfig+0x13c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d108      	bne.n	8005638 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800562c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <TIM_Base_SetConfig+0x114>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_Base_SetConfig+0xf8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a0c      	ldr	r2, [pc, #48]	; (8005698 <TIM_Base_SetConfig+0x124>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d103      	bne.n	8005674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	615a      	str	r2, [r3, #20]
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40010000 	.word	0x40010000
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800
 8005694:	40000c00 	.word	0x40000c00
 8005698:	40010400 	.word	0x40010400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40014400 	.word	0x40014400
 80056a4:	40014800 	.word	0x40014800
 80056a8:	40001800 	.word	0x40001800
 80056ac:	40001c00 	.word	0x40001c00
 80056b0:	40002000 	.word	0x40002000

080056b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f023 0201 	bic.w	r2, r3, #1
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f023 030a 	bic.w	r3, r3, #10
 80056f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	621a      	str	r2, [r3, #32]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005712:	b480      	push	{r7}
 8005714:	b087      	sub	sp, #28
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f023 0210 	bic.w	r2, r3, #16
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800573c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	031b      	lsls	r3, r3, #12
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800574e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	621a      	str	r2, [r3, #32]
}
 8005766:	bf00      	nop
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005788:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	f043 0307 	orr.w	r3, r3, #7
 8005794:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	609a      	str	r2, [r3, #8]
}
 800579c:	bf00      	nop
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	021a      	lsls	r2, r3, #8
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	609a      	str	r2, [r3, #8]
}
 80057dc:	bf00      	nop
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e05a      	b.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d022      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584c:	d01d      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1d      	ldr	r2, [pc, #116]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d018      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1b      	ldr	r2, [pc, #108]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1a      	ldr	r2, [pc, #104]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00e      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d009      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a15      	ldr	r2, [pc, #84]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d10c      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	4313      	orrs	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800
 80058d0:	40000c00 	.word	0x40000c00
 80058d4:	40010400 	.word	0x40010400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40001800 	.word	0x40001800

080058e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e03f      	b.n	8005972 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fc fbb2 	bl	8002070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2224      	movs	r2, #36	; 0x24
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f929 	bl	8005b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695a      	ldr	r2, [r3, #20]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b08a      	sub	sp, #40	; 0x28
 800597e:	af02      	add	r7, sp, #8
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	4613      	mov	r3, r2
 8005988:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b20      	cmp	r3, #32
 8005998:	d17c      	bne.n	8005a94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <HAL_UART_Transmit+0x2c>
 80059a0:	88fb      	ldrh	r3, [r7, #6]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e075      	b.n	8005a96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_UART_Transmit+0x3e>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e06e      	b.n	8005a96 <HAL_UART_Transmit+0x11c>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2221      	movs	r2, #33	; 0x21
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ce:	f7fc fdc1 	bl	8002554 <HAL_GetTick>
 80059d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	88fa      	ldrh	r2, [r7, #6]
 80059d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	88fa      	ldrh	r2, [r7, #6]
 80059de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e8:	d108      	bne.n	80059fc <HAL_UART_Transmit+0x82>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d104      	bne.n	80059fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	e003      	b.n	8005a04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a00:	2300      	movs	r3, #0
 8005a02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a0c:	e02a      	b.n	8005a64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2200      	movs	r2, #0
 8005a16:	2180      	movs	r1, #128	; 0x80
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f840 	bl	8005a9e <UART_WaitOnFlagUntilTimeout>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e036      	b.n	8005a96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10b      	bne.n	8005a46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	3302      	adds	r3, #2
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	e007      	b.n	8005a56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	781a      	ldrb	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	3301      	adds	r3, #1
 8005a54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1cf      	bne.n	8005a0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2200      	movs	r2, #0
 8005a76:	2140      	movs	r1, #64	; 0x40
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f810 	bl	8005a9e <UART_WaitOnFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e006      	b.n	8005a96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	e000      	b.n	8005a96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a94:	2302      	movs	r3, #2
  }
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b090      	sub	sp, #64	; 0x40
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	603b      	str	r3, [r7, #0]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aae:	e050      	b.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab6:	d04c      	beq.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d007      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0x30>
 8005abe:	f7fc fd49 	bl	8002554 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d241      	bcs.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005aee:	637a      	str	r2, [r7, #52]	; 0x34
 8005af0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e5      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3314      	adds	r3, #20
 8005b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	613b      	str	r3, [r7, #16]
   return(result);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3314      	adds	r3, #20
 8005b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b22:	623a      	str	r2, [r7, #32]
 8005b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	69f9      	ldr	r1, [r7, #28]
 8005b28:	6a3a      	ldr	r2, [r7, #32]
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e5      	bne.n	8005b02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e00f      	b.n	8005b72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	bf0c      	ite	eq
 8005b62:	2301      	moveq	r3, #1
 8005b64:	2300      	movne	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d09f      	beq.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3740      	adds	r7, #64	; 0x40
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b80:	b0c0      	sub	sp, #256	; 0x100
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b98:	68d9      	ldr	r1, [r3, #12]
 8005b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	ea40 0301 	orr.w	r3, r0, r1
 8005ba4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bd4:	f021 010c 	bic.w	r1, r1, #12
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005be2:	430b      	orrs	r3, r1
 8005be4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf6:	6999      	ldr	r1, [r3, #24]
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	ea40 0301 	orr.w	r3, r0, r1
 8005c02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	4b8f      	ldr	r3, [pc, #572]	; (8005e48 <UART_SetConfig+0x2cc>)
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d005      	beq.n	8005c1c <UART_SetConfig+0xa0>
 8005c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4b8d      	ldr	r3, [pc, #564]	; (8005e4c <UART_SetConfig+0x2d0>)
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d104      	bne.n	8005c26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c1c:	f7ff fb16 	bl	800524c <HAL_RCC_GetPCLK2Freq>
 8005c20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c24:	e003      	b.n	8005c2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c26:	f7ff fafd 	bl	8005224 <HAL_RCC_GetPCLK1Freq>
 8005c2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c38:	f040 810c 	bne.w	8005e54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c4e:	4622      	mov	r2, r4
 8005c50:	462b      	mov	r3, r5
 8005c52:	1891      	adds	r1, r2, r2
 8005c54:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c56:	415b      	adcs	r3, r3
 8005c58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c5e:	4621      	mov	r1, r4
 8005c60:	eb12 0801 	adds.w	r8, r2, r1
 8005c64:	4629      	mov	r1, r5
 8005c66:	eb43 0901 	adc.w	r9, r3, r1
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c7e:	4690      	mov	r8, r2
 8005c80:	4699      	mov	r9, r3
 8005c82:	4623      	mov	r3, r4
 8005c84:	eb18 0303 	adds.w	r3, r8, r3
 8005c88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c8c:	462b      	mov	r3, r5
 8005c8e:	eb49 0303 	adc.w	r3, r9, r3
 8005c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ca2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ca6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005caa:	460b      	mov	r3, r1
 8005cac:	18db      	adds	r3, r3, r3
 8005cae:	653b      	str	r3, [r7, #80]	; 0x50
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	eb42 0303 	adc.w	r3, r2, r3
 8005cb6:	657b      	str	r3, [r7, #84]	; 0x54
 8005cb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005cbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005cc0:	f7fa fff2 	bl	8000ca8 <__aeabi_uldivmod>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4b61      	ldr	r3, [pc, #388]	; (8005e50 <UART_SetConfig+0x2d4>)
 8005cca:	fba3 2302 	umull	r2, r3, r3, r2
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	011c      	lsls	r4, r3, #4
 8005cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cdc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ce0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	1891      	adds	r1, r2, r2
 8005cea:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cec:	415b      	adcs	r3, r3
 8005cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	eb12 0a01 	adds.w	sl, r2, r1
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	eb43 0b01 	adc.w	fp, r3, r1
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d14:	4692      	mov	sl, r2
 8005d16:	469b      	mov	fp, r3
 8005d18:	4643      	mov	r3, r8
 8005d1a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d22:	464b      	mov	r3, r9
 8005d24:	eb4b 0303 	adc.w	r3, fp, r3
 8005d28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d40:	460b      	mov	r3, r1
 8005d42:	18db      	adds	r3, r3, r3
 8005d44:	643b      	str	r3, [r7, #64]	; 0x40
 8005d46:	4613      	mov	r3, r2
 8005d48:	eb42 0303 	adc.w	r3, r2, r3
 8005d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d56:	f7fa ffa7 	bl	8000ca8 <__aeabi_uldivmod>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4611      	mov	r1, r2
 8005d60:	4b3b      	ldr	r3, [pc, #236]	; (8005e50 <UART_SetConfig+0x2d4>)
 8005d62:	fba3 2301 	umull	r2, r3, r3, r1
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	2264      	movs	r2, #100	; 0x64
 8005d6a:	fb02 f303 	mul.w	r3, r2, r3
 8005d6e:	1acb      	subs	r3, r1, r3
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d76:	4b36      	ldr	r3, [pc, #216]	; (8005e50 <UART_SetConfig+0x2d4>)
 8005d78:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d84:	441c      	add	r4, r3
 8005d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d98:	4642      	mov	r2, r8
 8005d9a:	464b      	mov	r3, r9
 8005d9c:	1891      	adds	r1, r2, r2
 8005d9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005da0:	415b      	adcs	r3, r3
 8005da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005da4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005da8:	4641      	mov	r1, r8
 8005daa:	1851      	adds	r1, r2, r1
 8005dac:	6339      	str	r1, [r7, #48]	; 0x30
 8005dae:	4649      	mov	r1, r9
 8005db0:	414b      	adcs	r3, r1
 8005db2:	637b      	str	r3, [r7, #52]	; 0x34
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005dc0:	4659      	mov	r1, fp
 8005dc2:	00cb      	lsls	r3, r1, #3
 8005dc4:	4651      	mov	r1, sl
 8005dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dca:	4651      	mov	r1, sl
 8005dcc:	00ca      	lsls	r2, r1, #3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	4642      	mov	r2, r8
 8005dd6:	189b      	adds	r3, r3, r2
 8005dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ddc:	464b      	mov	r3, r9
 8005dde:	460a      	mov	r2, r1
 8005de0:	eb42 0303 	adc.w	r3, r2, r3
 8005de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005df4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005df8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	18db      	adds	r3, r3, r3
 8005e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e02:	4613      	mov	r3, r2
 8005e04:	eb42 0303 	adc.w	r3, r2, r3
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e12:	f7fa ff49 	bl	8000ca8 <__aeabi_uldivmod>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4b0d      	ldr	r3, [pc, #52]	; (8005e50 <UART_SetConfig+0x2d4>)
 8005e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e20:	095b      	lsrs	r3, r3, #5
 8005e22:	2164      	movs	r1, #100	; 0x64
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	3332      	adds	r3, #50	; 0x32
 8005e2e:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <UART_SetConfig+0x2d4>)
 8005e30:	fba2 2303 	umull	r2, r3, r2, r3
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	f003 0207 	and.w	r2, r3, #7
 8005e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4422      	add	r2, r4
 8005e42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e44:	e105      	b.n	8006052 <UART_SetConfig+0x4d6>
 8005e46:	bf00      	nop
 8005e48:	40011000 	.word	0x40011000
 8005e4c:	40011400 	.word	0x40011400
 8005e50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e66:	4642      	mov	r2, r8
 8005e68:	464b      	mov	r3, r9
 8005e6a:	1891      	adds	r1, r2, r2
 8005e6c:	6239      	str	r1, [r7, #32]
 8005e6e:	415b      	adcs	r3, r3
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
 8005e72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e76:	4641      	mov	r1, r8
 8005e78:	1854      	adds	r4, r2, r1
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	eb43 0501 	adc.w	r5, r3, r1
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	00eb      	lsls	r3, r5, #3
 8005e8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e8e:	00e2      	lsls	r2, r4, #3
 8005e90:	4614      	mov	r4, r2
 8005e92:	461d      	mov	r5, r3
 8005e94:	4643      	mov	r3, r8
 8005e96:	18e3      	adds	r3, r4, r3
 8005e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e9c:	464b      	mov	r3, r9
 8005e9e:	eb45 0303 	adc.w	r3, r5, r3
 8005ea2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005eb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	f04f 0300 	mov.w	r3, #0
 8005ebe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	008b      	lsls	r3, r1, #2
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ecc:	4621      	mov	r1, r4
 8005ece:	008a      	lsls	r2, r1, #2
 8005ed0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ed4:	f7fa fee8 	bl	8000ca8 <__aeabi_uldivmod>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4b60      	ldr	r3, [pc, #384]	; (8006060 <UART_SetConfig+0x4e4>)
 8005ede:	fba3 2302 	umull	r2, r3, r3, r2
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	011c      	lsls	r4, r3, #4
 8005ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ef0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ef4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ef8:	4642      	mov	r2, r8
 8005efa:	464b      	mov	r3, r9
 8005efc:	1891      	adds	r1, r2, r2
 8005efe:	61b9      	str	r1, [r7, #24]
 8005f00:	415b      	adcs	r3, r3
 8005f02:	61fb      	str	r3, [r7, #28]
 8005f04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f08:	4641      	mov	r1, r8
 8005f0a:	1851      	adds	r1, r2, r1
 8005f0c:	6139      	str	r1, [r7, #16]
 8005f0e:	4649      	mov	r1, r9
 8005f10:	414b      	adcs	r3, r1
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f20:	4659      	mov	r1, fp
 8005f22:	00cb      	lsls	r3, r1, #3
 8005f24:	4651      	mov	r1, sl
 8005f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f2a:	4651      	mov	r1, sl
 8005f2c:	00ca      	lsls	r2, r1, #3
 8005f2e:	4610      	mov	r0, r2
 8005f30:	4619      	mov	r1, r3
 8005f32:	4603      	mov	r3, r0
 8005f34:	4642      	mov	r2, r8
 8005f36:	189b      	adds	r3, r3, r2
 8005f38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	460a      	mov	r2, r1
 8005f40:	eb42 0303 	adc.w	r3, r2, r3
 8005f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f60:	4649      	mov	r1, r9
 8005f62:	008b      	lsls	r3, r1, #2
 8005f64:	4641      	mov	r1, r8
 8005f66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f6a:	4641      	mov	r1, r8
 8005f6c:	008a      	lsls	r2, r1, #2
 8005f6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f72:	f7fa fe99 	bl	8000ca8 <__aeabi_uldivmod>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4b39      	ldr	r3, [pc, #228]	; (8006060 <UART_SetConfig+0x4e4>)
 8005f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	2164      	movs	r1, #100	; 0x64
 8005f84:	fb01 f303 	mul.w	r3, r1, r3
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	3332      	adds	r3, #50	; 0x32
 8005f8e:	4a34      	ldr	r2, [pc, #208]	; (8006060 <UART_SetConfig+0x4e4>)
 8005f90:	fba2 2303 	umull	r2, r3, r2, r3
 8005f94:	095b      	lsrs	r3, r3, #5
 8005f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f9a:	441c      	add	r4, r3
 8005f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	673b      	str	r3, [r7, #112]	; 0x70
 8005fa4:	677a      	str	r2, [r7, #116]	; 0x74
 8005fa6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005faa:	4642      	mov	r2, r8
 8005fac:	464b      	mov	r3, r9
 8005fae:	1891      	adds	r1, r2, r2
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	415b      	adcs	r3, r3
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fba:	4641      	mov	r1, r8
 8005fbc:	1851      	adds	r1, r2, r1
 8005fbe:	6039      	str	r1, [r7, #0]
 8005fc0:	4649      	mov	r1, r9
 8005fc2:	414b      	adcs	r3, r1
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	f04f 0300 	mov.w	r3, #0
 8005fce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fd2:	4659      	mov	r1, fp
 8005fd4:	00cb      	lsls	r3, r1, #3
 8005fd6:	4651      	mov	r1, sl
 8005fd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fdc:	4651      	mov	r1, sl
 8005fde:	00ca      	lsls	r2, r1, #3
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	4642      	mov	r2, r8
 8005fe8:	189b      	adds	r3, r3, r2
 8005fea:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fec:	464b      	mov	r3, r9
 8005fee:	460a      	mov	r2, r1
 8005ff0:	eb42 0303 	adc.w	r3, r2, r3
 8005ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	663b      	str	r3, [r7, #96]	; 0x60
 8006000:	667a      	str	r2, [r7, #100]	; 0x64
 8006002:	f04f 0200 	mov.w	r2, #0
 8006006:	f04f 0300 	mov.w	r3, #0
 800600a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800600e:	4649      	mov	r1, r9
 8006010:	008b      	lsls	r3, r1, #2
 8006012:	4641      	mov	r1, r8
 8006014:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006018:	4641      	mov	r1, r8
 800601a:	008a      	lsls	r2, r1, #2
 800601c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006020:	f7fa fe42 	bl	8000ca8 <__aeabi_uldivmod>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4b0d      	ldr	r3, [pc, #52]	; (8006060 <UART_SetConfig+0x4e4>)
 800602a:	fba3 1302 	umull	r1, r3, r3, r2
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	2164      	movs	r1, #100	; 0x64
 8006032:	fb01 f303 	mul.w	r3, r1, r3
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	011b      	lsls	r3, r3, #4
 800603a:	3332      	adds	r3, #50	; 0x32
 800603c:	4a08      	ldr	r2, [pc, #32]	; (8006060 <UART_SetConfig+0x4e4>)
 800603e:	fba2 2303 	umull	r2, r3, r2, r3
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	f003 020f 	and.w	r2, r3, #15
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4422      	add	r2, r4
 8006050:	609a      	str	r2, [r3, #8]
}
 8006052:	bf00      	nop
 8006054:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006058:	46bd      	mov	sp, r7
 800605a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800605e:	bf00      	nop
 8006060:	51eb851f 	.word	0x51eb851f

08006064 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006064:	b084      	sub	sp, #16
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	f107 001c 	add.w	r0, r7, #28
 8006072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	2b01      	cmp	r3, #1
 800607a:	d122      	bne.n	80060c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d105      	bne.n	80060b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 faa2 	bl	8006600 <USB_CoreReset>
 80060bc:	4603      	mov	r3, r0
 80060be:	73fb      	strb	r3, [r7, #15]
 80060c0:	e01a      	b.n	80060f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fa96 	bl	8006600 <USB_CoreReset>
 80060d4:	4603      	mov	r3, r0
 80060d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
 80060ea:	e005      	b.n	80060f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d10b      	bne.n	8006116 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f043 0206 	orr.w	r2, r3, #6
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f043 0220 	orr.w	r2, r3, #32
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006122:	b004      	add	sp, #16
 8006124:	4770      	bx	lr

08006126 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f023 0201 	bic.w	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d115      	bne.n	8006196 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006176:	2001      	movs	r0, #1
 8006178:	f7fc f9f8 	bl	800256c <HAL_Delay>
      ms++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3301      	adds	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa2e 	bl	80065e4 <USB_GetMode>
 8006188:	4603      	mov	r3, r0
 800618a:	2b01      	cmp	r3, #1
 800618c:	d01e      	beq.n	80061cc <USB_SetCurrentMode+0x84>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b31      	cmp	r3, #49	; 0x31
 8006192:	d9f0      	bls.n	8006176 <USB_SetCurrentMode+0x2e>
 8006194:	e01a      	b.n	80061cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d115      	bne.n	80061c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061a8:	2001      	movs	r0, #1
 80061aa:	f7fc f9df 	bl	800256c <HAL_Delay>
      ms++;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3301      	adds	r3, #1
 80061b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fa15 	bl	80065e4 <USB_GetMode>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <USB_SetCurrentMode+0x84>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2b31      	cmp	r3, #49	; 0x31
 80061c4:	d9f0      	bls.n	80061a8 <USB_SetCurrentMode+0x60>
 80061c6:	e001      	b.n	80061cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e005      	b.n	80061d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b32      	cmp	r3, #50	; 0x32
 80061d0:	d101      	bne.n	80061d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061e0:	b084      	sub	sp, #16
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b086      	sub	sp, #24
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061fa:	2300      	movs	r3, #0
 80061fc:	613b      	str	r3, [r7, #16]
 80061fe:	e009      	b.n	8006214 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	3340      	adds	r3, #64	; 0x40
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	2200      	movs	r2, #0
 800620c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	3301      	adds	r3, #1
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	2b0e      	cmp	r3, #14
 8006218:	d9f2      	bls.n	8006200 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800621a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d11c      	bne.n	800625a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800622e:	f043 0302 	orr.w	r3, r3, #2
 8006232:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006244:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	639a      	str	r2, [r3, #56]	; 0x38
 8006258:	e00b      	b.n	8006272 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006278:	461a      	mov	r2, r3
 800627a:	2300      	movs	r3, #0
 800627c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006284:	4619      	mov	r1, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628c:	461a      	mov	r2, r3
 800628e:	680b      	ldr	r3, [r1, #0]
 8006290:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	2b01      	cmp	r3, #1
 8006296:	d10c      	bne.n	80062b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d104      	bne.n	80062a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800629e:	2100      	movs	r1, #0
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f965 	bl	8006570 <USB_SetDevSpeed>
 80062a6:	e008      	b.n	80062ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062a8:	2101      	movs	r1, #1
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f960 	bl	8006570 <USB_SetDevSpeed>
 80062b0:	e003      	b.n	80062ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062b2:	2103      	movs	r1, #3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f95b 	bl	8006570 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062ba:	2110      	movs	r1, #16
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f8f3 	bl	80064a8 <USB_FlushTxFifo>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f91f 	bl	8006510 <USB_FlushRxFifo>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e2:	461a      	mov	r2, r3
 80062e4:	2300      	movs	r3, #0
 80062e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ee:	461a      	mov	r2, r3
 80062f0:	2300      	movs	r3, #0
 80062f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fa:	461a      	mov	r2, r3
 80062fc:	2300      	movs	r3, #0
 80062fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006300:	2300      	movs	r3, #0
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	e043      	b.n	800638e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800631c:	d118      	bne.n	8006350 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	461a      	mov	r2, r3
 8006332:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	e013      	b.n	8006362 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	461a      	mov	r2, r3
 8006348:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	e008      	b.n	8006362 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635c:	461a      	mov	r2, r3
 800635e:	2300      	movs	r3, #0
 8006360:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636e:	461a      	mov	r2, r3
 8006370:	2300      	movs	r3, #0
 8006372:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006380:	461a      	mov	r2, r3
 8006382:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006386:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	3301      	adds	r3, #1
 800638c:	613b      	str	r3, [r7, #16]
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	429a      	cmp	r2, r3
 8006394:	d3b7      	bcc.n	8006306 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006396:	2300      	movs	r3, #0
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	e043      	b.n	8006424 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063b2:	d118      	bne.n	80063e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10a      	bne.n	80063d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c6:	461a      	mov	r2, r3
 80063c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	e013      	b.n	80063f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063dc:	461a      	mov	r2, r3
 80063de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	e008      	b.n	80063f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f2:	461a      	mov	r2, r3
 80063f4:	2300      	movs	r3, #0
 80063f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006404:	461a      	mov	r2, r3
 8006406:	2300      	movs	r3, #0
 8006408:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	461a      	mov	r2, r3
 8006418:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800641c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	3301      	adds	r3, #1
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	429a      	cmp	r2, r3
 800642a:	d3b7      	bcc.n	800639c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800643a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800643e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800644c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	f043 0210 	orr.w	r2, r3, #16
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	699a      	ldr	r2, [r3, #24]
 8006464:	4b0f      	ldr	r3, [pc, #60]	; (80064a4 <USB_DevInit+0x2c4>)
 8006466:	4313      	orrs	r3, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800646c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	f043 0208 	orr.w	r2, r3, #8
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800647e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006480:	2b01      	cmp	r3, #1
 8006482:	d107      	bne.n	8006494 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800648c:	f043 0304 	orr.w	r3, r3, #4
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006494:	7dfb      	ldrb	r3, [r7, #23]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064a0:	b004      	add	sp, #16
 80064a2:	4770      	bx	lr
 80064a4:	803c3800 	.word	0x803c3800

080064a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3301      	adds	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4a13      	ldr	r2, [pc, #76]	; (800650c <USB_FlushTxFifo+0x64>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d901      	bls.n	80064c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e01b      	b.n	8006500 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	daf2      	bge.n	80064b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	019b      	lsls	r3, r3, #6
 80064d8:	f043 0220 	orr.w	r2, r3, #32
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3301      	adds	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a08      	ldr	r2, [pc, #32]	; (800650c <USB_FlushTxFifo+0x64>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e006      	b.n	8006500 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d0f0      	beq.n	80064e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	00030d40 	.word	0x00030d40

08006510 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3301      	adds	r3, #1
 8006520:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4a11      	ldr	r2, [pc, #68]	; (800656c <USB_FlushRxFifo+0x5c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d901      	bls.n	800652e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e018      	b.n	8006560 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	daf2      	bge.n	800651c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2210      	movs	r2, #16
 800653e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3301      	adds	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a08      	ldr	r2, [pc, #32]	; (800656c <USB_FlushRxFifo+0x5c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e006      	b.n	8006560 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b10      	cmp	r3, #16
 800655c:	d0f0      	beq.n	8006540 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	00030d40 	.word	0x00030d40

08006570 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006590:	4313      	orrs	r3, r2
 8006592:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065bc:	f023 0303 	bic.w	r3, r3, #3
 80065c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065d0:	f043 0302 	orr.w	r3, r3, #2
 80065d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	f003 0301 	and.w	r3, r3, #1
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3301      	adds	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4a13      	ldr	r2, [pc, #76]	; (8006664 <USB_CoreReset+0x64>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d901      	bls.n	800661e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e01b      	b.n	8006656 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	daf2      	bge.n	800660c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f043 0201 	orr.w	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3301      	adds	r3, #1
 800663a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4a09      	ldr	r2, [pc, #36]	; (8006664 <USB_CoreReset+0x64>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d901      	bls.n	8006648 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e006      	b.n	8006656 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b01      	cmp	r3, #1
 8006652:	d0f0      	beq.n	8006636 <USB_CoreReset+0x36>

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	00030d40 	.word	0x00030d40

08006668 <__errno>:
 8006668:	4b01      	ldr	r3, [pc, #4]	; (8006670 <__errno+0x8>)
 800666a:	6818      	ldr	r0, [r3, #0]
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	20000020 	.word	0x20000020

08006674 <__libc_init_array>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	4d0d      	ldr	r5, [pc, #52]	; (80066ac <__libc_init_array+0x38>)
 8006678:	4c0d      	ldr	r4, [pc, #52]	; (80066b0 <__libc_init_array+0x3c>)
 800667a:	1b64      	subs	r4, r4, r5
 800667c:	10a4      	asrs	r4, r4, #2
 800667e:	2600      	movs	r6, #0
 8006680:	42a6      	cmp	r6, r4
 8006682:	d109      	bne.n	8006698 <__libc_init_array+0x24>
 8006684:	4d0b      	ldr	r5, [pc, #44]	; (80066b4 <__libc_init_array+0x40>)
 8006686:	4c0c      	ldr	r4, [pc, #48]	; (80066b8 <__libc_init_array+0x44>)
 8006688:	f004 fc92 	bl	800afb0 <_init>
 800668c:	1b64      	subs	r4, r4, r5
 800668e:	10a4      	asrs	r4, r4, #2
 8006690:	2600      	movs	r6, #0
 8006692:	42a6      	cmp	r6, r4
 8006694:	d105      	bne.n	80066a2 <__libc_init_array+0x2e>
 8006696:	bd70      	pop	{r4, r5, r6, pc}
 8006698:	f855 3b04 	ldr.w	r3, [r5], #4
 800669c:	4798      	blx	r3
 800669e:	3601      	adds	r6, #1
 80066a0:	e7ee      	b.n	8006680 <__libc_init_array+0xc>
 80066a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a6:	4798      	blx	r3
 80066a8:	3601      	adds	r6, #1
 80066aa:	e7f2      	b.n	8006692 <__libc_init_array+0x1e>
 80066ac:	0800b4bc 	.word	0x0800b4bc
 80066b0:	0800b4bc 	.word	0x0800b4bc
 80066b4:	0800b4bc 	.word	0x0800b4bc
 80066b8:	0800b4c0 	.word	0x0800b4c0

080066bc <memset>:
 80066bc:	4402      	add	r2, r0
 80066be:	4603      	mov	r3, r0
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d100      	bne.n	80066c6 <memset+0xa>
 80066c4:	4770      	bx	lr
 80066c6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ca:	e7f9      	b.n	80066c0 <memset+0x4>

080066cc <__cvt>:
 80066cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066d0:	ec55 4b10 	vmov	r4, r5, d0
 80066d4:	2d00      	cmp	r5, #0
 80066d6:	460e      	mov	r6, r1
 80066d8:	4619      	mov	r1, r3
 80066da:	462b      	mov	r3, r5
 80066dc:	bfbb      	ittet	lt
 80066de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80066e2:	461d      	movlt	r5, r3
 80066e4:	2300      	movge	r3, #0
 80066e6:	232d      	movlt	r3, #45	; 0x2d
 80066e8:	700b      	strb	r3, [r1, #0]
 80066ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80066f0:	4691      	mov	r9, r2
 80066f2:	f023 0820 	bic.w	r8, r3, #32
 80066f6:	bfbc      	itt	lt
 80066f8:	4622      	movlt	r2, r4
 80066fa:	4614      	movlt	r4, r2
 80066fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006700:	d005      	beq.n	800670e <__cvt+0x42>
 8006702:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006706:	d100      	bne.n	800670a <__cvt+0x3e>
 8006708:	3601      	adds	r6, #1
 800670a:	2102      	movs	r1, #2
 800670c:	e000      	b.n	8006710 <__cvt+0x44>
 800670e:	2103      	movs	r1, #3
 8006710:	ab03      	add	r3, sp, #12
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	ab02      	add	r3, sp, #8
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	ec45 4b10 	vmov	d0, r4, r5
 800671c:	4653      	mov	r3, sl
 800671e:	4632      	mov	r2, r6
 8006720:	f001 fdae 	bl	8008280 <_dtoa_r>
 8006724:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006728:	4607      	mov	r7, r0
 800672a:	d102      	bne.n	8006732 <__cvt+0x66>
 800672c:	f019 0f01 	tst.w	r9, #1
 8006730:	d022      	beq.n	8006778 <__cvt+0xac>
 8006732:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006736:	eb07 0906 	add.w	r9, r7, r6
 800673a:	d110      	bne.n	800675e <__cvt+0x92>
 800673c:	783b      	ldrb	r3, [r7, #0]
 800673e:	2b30      	cmp	r3, #48	; 0x30
 8006740:	d10a      	bne.n	8006758 <__cvt+0x8c>
 8006742:	2200      	movs	r2, #0
 8006744:	2300      	movs	r3, #0
 8006746:	4620      	mov	r0, r4
 8006748:	4629      	mov	r1, r5
 800674a:	f7fa f9cd 	bl	8000ae8 <__aeabi_dcmpeq>
 800674e:	b918      	cbnz	r0, 8006758 <__cvt+0x8c>
 8006750:	f1c6 0601 	rsb	r6, r6, #1
 8006754:	f8ca 6000 	str.w	r6, [sl]
 8006758:	f8da 3000 	ldr.w	r3, [sl]
 800675c:	4499      	add	r9, r3
 800675e:	2200      	movs	r2, #0
 8006760:	2300      	movs	r3, #0
 8006762:	4620      	mov	r0, r4
 8006764:	4629      	mov	r1, r5
 8006766:	f7fa f9bf 	bl	8000ae8 <__aeabi_dcmpeq>
 800676a:	b108      	cbz	r0, 8006770 <__cvt+0xa4>
 800676c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006770:	2230      	movs	r2, #48	; 0x30
 8006772:	9b03      	ldr	r3, [sp, #12]
 8006774:	454b      	cmp	r3, r9
 8006776:	d307      	bcc.n	8006788 <__cvt+0xbc>
 8006778:	9b03      	ldr	r3, [sp, #12]
 800677a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800677c:	1bdb      	subs	r3, r3, r7
 800677e:	4638      	mov	r0, r7
 8006780:	6013      	str	r3, [r2, #0]
 8006782:	b004      	add	sp, #16
 8006784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006788:	1c59      	adds	r1, r3, #1
 800678a:	9103      	str	r1, [sp, #12]
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	e7f0      	b.n	8006772 <__cvt+0xa6>

08006790 <__exponent>:
 8006790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006792:	4603      	mov	r3, r0
 8006794:	2900      	cmp	r1, #0
 8006796:	bfb8      	it	lt
 8006798:	4249      	neglt	r1, r1
 800679a:	f803 2b02 	strb.w	r2, [r3], #2
 800679e:	bfb4      	ite	lt
 80067a0:	222d      	movlt	r2, #45	; 0x2d
 80067a2:	222b      	movge	r2, #43	; 0x2b
 80067a4:	2909      	cmp	r1, #9
 80067a6:	7042      	strb	r2, [r0, #1]
 80067a8:	dd2a      	ble.n	8006800 <__exponent+0x70>
 80067aa:	f10d 0407 	add.w	r4, sp, #7
 80067ae:	46a4      	mov	ip, r4
 80067b0:	270a      	movs	r7, #10
 80067b2:	46a6      	mov	lr, r4
 80067b4:	460a      	mov	r2, r1
 80067b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80067ba:	fb07 1516 	mls	r5, r7, r6, r1
 80067be:	3530      	adds	r5, #48	; 0x30
 80067c0:	2a63      	cmp	r2, #99	; 0x63
 80067c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80067c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80067ca:	4631      	mov	r1, r6
 80067cc:	dcf1      	bgt.n	80067b2 <__exponent+0x22>
 80067ce:	3130      	adds	r1, #48	; 0x30
 80067d0:	f1ae 0502 	sub.w	r5, lr, #2
 80067d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80067d8:	1c44      	adds	r4, r0, #1
 80067da:	4629      	mov	r1, r5
 80067dc:	4561      	cmp	r1, ip
 80067de:	d30a      	bcc.n	80067f6 <__exponent+0x66>
 80067e0:	f10d 0209 	add.w	r2, sp, #9
 80067e4:	eba2 020e 	sub.w	r2, r2, lr
 80067e8:	4565      	cmp	r5, ip
 80067ea:	bf88      	it	hi
 80067ec:	2200      	movhi	r2, #0
 80067ee:	4413      	add	r3, r2
 80067f0:	1a18      	subs	r0, r3, r0
 80067f2:	b003      	add	sp, #12
 80067f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80067fe:	e7ed      	b.n	80067dc <__exponent+0x4c>
 8006800:	2330      	movs	r3, #48	; 0x30
 8006802:	3130      	adds	r1, #48	; 0x30
 8006804:	7083      	strb	r3, [r0, #2]
 8006806:	70c1      	strb	r1, [r0, #3]
 8006808:	1d03      	adds	r3, r0, #4
 800680a:	e7f1      	b.n	80067f0 <__exponent+0x60>

0800680c <_printf_float>:
 800680c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006810:	ed2d 8b02 	vpush	{d8}
 8006814:	b08d      	sub	sp, #52	; 0x34
 8006816:	460c      	mov	r4, r1
 8006818:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800681c:	4616      	mov	r6, r2
 800681e:	461f      	mov	r7, r3
 8006820:	4605      	mov	r5, r0
 8006822:	f002 fe8b 	bl	800953c <_localeconv_r>
 8006826:	f8d0 a000 	ldr.w	sl, [r0]
 800682a:	4650      	mov	r0, sl
 800682c:	f7f9 fce0 	bl	80001f0 <strlen>
 8006830:	2300      	movs	r3, #0
 8006832:	930a      	str	r3, [sp, #40]	; 0x28
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	9305      	str	r3, [sp, #20]
 8006838:	f8d8 3000 	ldr.w	r3, [r8]
 800683c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006840:	3307      	adds	r3, #7
 8006842:	f023 0307 	bic.w	r3, r3, #7
 8006846:	f103 0208 	add.w	r2, r3, #8
 800684a:	f8c8 2000 	str.w	r2, [r8]
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006856:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800685a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800685e:	9307      	str	r3, [sp, #28]
 8006860:	f8cd 8018 	str.w	r8, [sp, #24]
 8006864:	ee08 0a10 	vmov	s16, r0
 8006868:	4b9f      	ldr	r3, [pc, #636]	; (8006ae8 <_printf_float+0x2dc>)
 800686a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800686e:	f04f 32ff 	mov.w	r2, #4294967295
 8006872:	f7fa f96b 	bl	8000b4c <__aeabi_dcmpun>
 8006876:	bb88      	cbnz	r0, 80068dc <_printf_float+0xd0>
 8006878:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800687c:	4b9a      	ldr	r3, [pc, #616]	; (8006ae8 <_printf_float+0x2dc>)
 800687e:	f04f 32ff 	mov.w	r2, #4294967295
 8006882:	f7fa f945 	bl	8000b10 <__aeabi_dcmple>
 8006886:	bb48      	cbnz	r0, 80068dc <_printf_float+0xd0>
 8006888:	2200      	movs	r2, #0
 800688a:	2300      	movs	r3, #0
 800688c:	4640      	mov	r0, r8
 800688e:	4649      	mov	r1, r9
 8006890:	f7fa f934 	bl	8000afc <__aeabi_dcmplt>
 8006894:	b110      	cbz	r0, 800689c <_printf_float+0x90>
 8006896:	232d      	movs	r3, #45	; 0x2d
 8006898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800689c:	4b93      	ldr	r3, [pc, #588]	; (8006aec <_printf_float+0x2e0>)
 800689e:	4894      	ldr	r0, [pc, #592]	; (8006af0 <_printf_float+0x2e4>)
 80068a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80068a4:	bf94      	ite	ls
 80068a6:	4698      	movls	r8, r3
 80068a8:	4680      	movhi	r8, r0
 80068aa:	2303      	movs	r3, #3
 80068ac:	6123      	str	r3, [r4, #16]
 80068ae:	9b05      	ldr	r3, [sp, #20]
 80068b0:	f023 0204 	bic.w	r2, r3, #4
 80068b4:	6022      	str	r2, [r4, #0]
 80068b6:	f04f 0900 	mov.w	r9, #0
 80068ba:	9700      	str	r7, [sp, #0]
 80068bc:	4633      	mov	r3, r6
 80068be:	aa0b      	add	r2, sp, #44	; 0x2c
 80068c0:	4621      	mov	r1, r4
 80068c2:	4628      	mov	r0, r5
 80068c4:	f000 f9d8 	bl	8006c78 <_printf_common>
 80068c8:	3001      	adds	r0, #1
 80068ca:	f040 8090 	bne.w	80069ee <_printf_float+0x1e2>
 80068ce:	f04f 30ff 	mov.w	r0, #4294967295
 80068d2:	b00d      	add	sp, #52	; 0x34
 80068d4:	ecbd 8b02 	vpop	{d8}
 80068d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068dc:	4642      	mov	r2, r8
 80068de:	464b      	mov	r3, r9
 80068e0:	4640      	mov	r0, r8
 80068e2:	4649      	mov	r1, r9
 80068e4:	f7fa f932 	bl	8000b4c <__aeabi_dcmpun>
 80068e8:	b140      	cbz	r0, 80068fc <_printf_float+0xf0>
 80068ea:	464b      	mov	r3, r9
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	bfbc      	itt	lt
 80068f0:	232d      	movlt	r3, #45	; 0x2d
 80068f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80068f6:	487f      	ldr	r0, [pc, #508]	; (8006af4 <_printf_float+0x2e8>)
 80068f8:	4b7f      	ldr	r3, [pc, #508]	; (8006af8 <_printf_float+0x2ec>)
 80068fa:	e7d1      	b.n	80068a0 <_printf_float+0x94>
 80068fc:	6863      	ldr	r3, [r4, #4]
 80068fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006902:	9206      	str	r2, [sp, #24]
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	d13f      	bne.n	8006988 <_printf_float+0x17c>
 8006908:	2306      	movs	r3, #6
 800690a:	6063      	str	r3, [r4, #4]
 800690c:	9b05      	ldr	r3, [sp, #20]
 800690e:	6861      	ldr	r1, [r4, #4]
 8006910:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006914:	2300      	movs	r3, #0
 8006916:	9303      	str	r3, [sp, #12]
 8006918:	ab0a      	add	r3, sp, #40	; 0x28
 800691a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800691e:	ab09      	add	r3, sp, #36	; 0x24
 8006920:	ec49 8b10 	vmov	d0, r8, r9
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	6022      	str	r2, [r4, #0]
 8006928:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800692c:	4628      	mov	r0, r5
 800692e:	f7ff fecd 	bl	80066cc <__cvt>
 8006932:	9b06      	ldr	r3, [sp, #24]
 8006934:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006936:	2b47      	cmp	r3, #71	; 0x47
 8006938:	4680      	mov	r8, r0
 800693a:	d108      	bne.n	800694e <_printf_float+0x142>
 800693c:	1cc8      	adds	r0, r1, #3
 800693e:	db02      	blt.n	8006946 <_printf_float+0x13a>
 8006940:	6863      	ldr	r3, [r4, #4]
 8006942:	4299      	cmp	r1, r3
 8006944:	dd41      	ble.n	80069ca <_printf_float+0x1be>
 8006946:	f1ab 0b02 	sub.w	fp, fp, #2
 800694a:	fa5f fb8b 	uxtb.w	fp, fp
 800694e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006952:	d820      	bhi.n	8006996 <_printf_float+0x18a>
 8006954:	3901      	subs	r1, #1
 8006956:	465a      	mov	r2, fp
 8006958:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800695c:	9109      	str	r1, [sp, #36]	; 0x24
 800695e:	f7ff ff17 	bl	8006790 <__exponent>
 8006962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006964:	1813      	adds	r3, r2, r0
 8006966:	2a01      	cmp	r2, #1
 8006968:	4681      	mov	r9, r0
 800696a:	6123      	str	r3, [r4, #16]
 800696c:	dc02      	bgt.n	8006974 <_printf_float+0x168>
 800696e:	6822      	ldr	r2, [r4, #0]
 8006970:	07d2      	lsls	r2, r2, #31
 8006972:	d501      	bpl.n	8006978 <_printf_float+0x16c>
 8006974:	3301      	adds	r3, #1
 8006976:	6123      	str	r3, [r4, #16]
 8006978:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800697c:	2b00      	cmp	r3, #0
 800697e:	d09c      	beq.n	80068ba <_printf_float+0xae>
 8006980:	232d      	movs	r3, #45	; 0x2d
 8006982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006986:	e798      	b.n	80068ba <_printf_float+0xae>
 8006988:	9a06      	ldr	r2, [sp, #24]
 800698a:	2a47      	cmp	r2, #71	; 0x47
 800698c:	d1be      	bne.n	800690c <_printf_float+0x100>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1bc      	bne.n	800690c <_printf_float+0x100>
 8006992:	2301      	movs	r3, #1
 8006994:	e7b9      	b.n	800690a <_printf_float+0xfe>
 8006996:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800699a:	d118      	bne.n	80069ce <_printf_float+0x1c2>
 800699c:	2900      	cmp	r1, #0
 800699e:	6863      	ldr	r3, [r4, #4]
 80069a0:	dd0b      	ble.n	80069ba <_printf_float+0x1ae>
 80069a2:	6121      	str	r1, [r4, #16]
 80069a4:	b913      	cbnz	r3, 80069ac <_printf_float+0x1a0>
 80069a6:	6822      	ldr	r2, [r4, #0]
 80069a8:	07d0      	lsls	r0, r2, #31
 80069aa:	d502      	bpl.n	80069b2 <_printf_float+0x1a6>
 80069ac:	3301      	adds	r3, #1
 80069ae:	440b      	add	r3, r1
 80069b0:	6123      	str	r3, [r4, #16]
 80069b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80069b4:	f04f 0900 	mov.w	r9, #0
 80069b8:	e7de      	b.n	8006978 <_printf_float+0x16c>
 80069ba:	b913      	cbnz	r3, 80069c2 <_printf_float+0x1b6>
 80069bc:	6822      	ldr	r2, [r4, #0]
 80069be:	07d2      	lsls	r2, r2, #31
 80069c0:	d501      	bpl.n	80069c6 <_printf_float+0x1ba>
 80069c2:	3302      	adds	r3, #2
 80069c4:	e7f4      	b.n	80069b0 <_printf_float+0x1a4>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e7f2      	b.n	80069b0 <_printf_float+0x1a4>
 80069ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80069ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d0:	4299      	cmp	r1, r3
 80069d2:	db05      	blt.n	80069e0 <_printf_float+0x1d4>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	6121      	str	r1, [r4, #16]
 80069d8:	07d8      	lsls	r0, r3, #31
 80069da:	d5ea      	bpl.n	80069b2 <_printf_float+0x1a6>
 80069dc:	1c4b      	adds	r3, r1, #1
 80069de:	e7e7      	b.n	80069b0 <_printf_float+0x1a4>
 80069e0:	2900      	cmp	r1, #0
 80069e2:	bfd4      	ite	le
 80069e4:	f1c1 0202 	rsble	r2, r1, #2
 80069e8:	2201      	movgt	r2, #1
 80069ea:	4413      	add	r3, r2
 80069ec:	e7e0      	b.n	80069b0 <_printf_float+0x1a4>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	055a      	lsls	r2, r3, #21
 80069f2:	d407      	bmi.n	8006a04 <_printf_float+0x1f8>
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	4642      	mov	r2, r8
 80069f8:	4631      	mov	r1, r6
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b8      	blx	r7
 80069fe:	3001      	adds	r0, #1
 8006a00:	d12c      	bne.n	8006a5c <_printf_float+0x250>
 8006a02:	e764      	b.n	80068ce <_printf_float+0xc2>
 8006a04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a08:	f240 80e0 	bls.w	8006bcc <_printf_float+0x3c0>
 8006a0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a10:	2200      	movs	r2, #0
 8006a12:	2300      	movs	r3, #0
 8006a14:	f7fa f868 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d034      	beq.n	8006a86 <_printf_float+0x27a>
 8006a1c:	4a37      	ldr	r2, [pc, #220]	; (8006afc <_printf_float+0x2f0>)
 8006a1e:	2301      	movs	r3, #1
 8006a20:	4631      	mov	r1, r6
 8006a22:	4628      	mov	r0, r5
 8006a24:	47b8      	blx	r7
 8006a26:	3001      	adds	r0, #1
 8006a28:	f43f af51 	beq.w	80068ce <_printf_float+0xc2>
 8006a2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a30:	429a      	cmp	r2, r3
 8006a32:	db02      	blt.n	8006a3a <_printf_float+0x22e>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	07d8      	lsls	r0, r3, #31
 8006a38:	d510      	bpl.n	8006a5c <_printf_float+0x250>
 8006a3a:	ee18 3a10 	vmov	r3, s16
 8006a3e:	4652      	mov	r2, sl
 8006a40:	4631      	mov	r1, r6
 8006a42:	4628      	mov	r0, r5
 8006a44:	47b8      	blx	r7
 8006a46:	3001      	adds	r0, #1
 8006a48:	f43f af41 	beq.w	80068ce <_printf_float+0xc2>
 8006a4c:	f04f 0800 	mov.w	r8, #0
 8006a50:	f104 091a 	add.w	r9, r4, #26
 8006a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a56:	3b01      	subs	r3, #1
 8006a58:	4543      	cmp	r3, r8
 8006a5a:	dc09      	bgt.n	8006a70 <_printf_float+0x264>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	079b      	lsls	r3, r3, #30
 8006a60:	f100 8105 	bmi.w	8006c6e <_printf_float+0x462>
 8006a64:	68e0      	ldr	r0, [r4, #12]
 8006a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a68:	4298      	cmp	r0, r3
 8006a6a:	bfb8      	it	lt
 8006a6c:	4618      	movlt	r0, r3
 8006a6e:	e730      	b.n	80068d2 <_printf_float+0xc6>
 8006a70:	2301      	movs	r3, #1
 8006a72:	464a      	mov	r2, r9
 8006a74:	4631      	mov	r1, r6
 8006a76:	4628      	mov	r0, r5
 8006a78:	47b8      	blx	r7
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	f43f af27 	beq.w	80068ce <_printf_float+0xc2>
 8006a80:	f108 0801 	add.w	r8, r8, #1
 8006a84:	e7e6      	b.n	8006a54 <_printf_float+0x248>
 8006a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	dc39      	bgt.n	8006b00 <_printf_float+0x2f4>
 8006a8c:	4a1b      	ldr	r2, [pc, #108]	; (8006afc <_printf_float+0x2f0>)
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4631      	mov	r1, r6
 8006a92:	4628      	mov	r0, r5
 8006a94:	47b8      	blx	r7
 8006a96:	3001      	adds	r0, #1
 8006a98:	f43f af19 	beq.w	80068ce <_printf_float+0xc2>
 8006a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	d102      	bne.n	8006aaa <_printf_float+0x29e>
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	07d9      	lsls	r1, r3, #31
 8006aa8:	d5d8      	bpl.n	8006a5c <_printf_float+0x250>
 8006aaa:	ee18 3a10 	vmov	r3, s16
 8006aae:	4652      	mov	r2, sl
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	f43f af09 	beq.w	80068ce <_printf_float+0xc2>
 8006abc:	f04f 0900 	mov.w	r9, #0
 8006ac0:	f104 0a1a 	add.w	sl, r4, #26
 8006ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac6:	425b      	negs	r3, r3
 8006ac8:	454b      	cmp	r3, r9
 8006aca:	dc01      	bgt.n	8006ad0 <_printf_float+0x2c4>
 8006acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ace:	e792      	b.n	80069f6 <_printf_float+0x1ea>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	4652      	mov	r2, sl
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	47b8      	blx	r7
 8006ada:	3001      	adds	r0, #1
 8006adc:	f43f aef7 	beq.w	80068ce <_printf_float+0xc2>
 8006ae0:	f109 0901 	add.w	r9, r9, #1
 8006ae4:	e7ee      	b.n	8006ac4 <_printf_float+0x2b8>
 8006ae6:	bf00      	nop
 8006ae8:	7fefffff 	.word	0x7fefffff
 8006aec:	0800b014 	.word	0x0800b014
 8006af0:	0800b018 	.word	0x0800b018
 8006af4:	0800b020 	.word	0x0800b020
 8006af8:	0800b01c 	.word	0x0800b01c
 8006afc:	0800b024 	.word	0x0800b024
 8006b00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b04:	429a      	cmp	r2, r3
 8006b06:	bfa8      	it	ge
 8006b08:	461a      	movge	r2, r3
 8006b0a:	2a00      	cmp	r2, #0
 8006b0c:	4691      	mov	r9, r2
 8006b0e:	dc37      	bgt.n	8006b80 <_printf_float+0x374>
 8006b10:	f04f 0b00 	mov.w	fp, #0
 8006b14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b18:	f104 021a 	add.w	r2, r4, #26
 8006b1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b1e:	9305      	str	r3, [sp, #20]
 8006b20:	eba3 0309 	sub.w	r3, r3, r9
 8006b24:	455b      	cmp	r3, fp
 8006b26:	dc33      	bgt.n	8006b90 <_printf_float+0x384>
 8006b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	db3b      	blt.n	8006ba8 <_printf_float+0x39c>
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	07da      	lsls	r2, r3, #31
 8006b34:	d438      	bmi.n	8006ba8 <_printf_float+0x39c>
 8006b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b38:	9a05      	ldr	r2, [sp, #20]
 8006b3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b3c:	1a9a      	subs	r2, r3, r2
 8006b3e:	eba3 0901 	sub.w	r9, r3, r1
 8006b42:	4591      	cmp	r9, r2
 8006b44:	bfa8      	it	ge
 8006b46:	4691      	movge	r9, r2
 8006b48:	f1b9 0f00 	cmp.w	r9, #0
 8006b4c:	dc35      	bgt.n	8006bba <_printf_float+0x3ae>
 8006b4e:	f04f 0800 	mov.w	r8, #0
 8006b52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b56:	f104 0a1a 	add.w	sl, r4, #26
 8006b5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	eba3 0309 	sub.w	r3, r3, r9
 8006b64:	4543      	cmp	r3, r8
 8006b66:	f77f af79 	ble.w	8006a5c <_printf_float+0x250>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	4652      	mov	r2, sl
 8006b6e:	4631      	mov	r1, r6
 8006b70:	4628      	mov	r0, r5
 8006b72:	47b8      	blx	r7
 8006b74:	3001      	adds	r0, #1
 8006b76:	f43f aeaa 	beq.w	80068ce <_printf_float+0xc2>
 8006b7a:	f108 0801 	add.w	r8, r8, #1
 8006b7e:	e7ec      	b.n	8006b5a <_printf_float+0x34e>
 8006b80:	4613      	mov	r3, r2
 8006b82:	4631      	mov	r1, r6
 8006b84:	4642      	mov	r2, r8
 8006b86:	4628      	mov	r0, r5
 8006b88:	47b8      	blx	r7
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d1c0      	bne.n	8006b10 <_printf_float+0x304>
 8006b8e:	e69e      	b.n	80068ce <_printf_float+0xc2>
 8006b90:	2301      	movs	r3, #1
 8006b92:	4631      	mov	r1, r6
 8006b94:	4628      	mov	r0, r5
 8006b96:	9205      	str	r2, [sp, #20]
 8006b98:	47b8      	blx	r7
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	f43f ae97 	beq.w	80068ce <_printf_float+0xc2>
 8006ba0:	9a05      	ldr	r2, [sp, #20]
 8006ba2:	f10b 0b01 	add.w	fp, fp, #1
 8006ba6:	e7b9      	b.n	8006b1c <_printf_float+0x310>
 8006ba8:	ee18 3a10 	vmov	r3, s16
 8006bac:	4652      	mov	r2, sl
 8006bae:	4631      	mov	r1, r6
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	47b8      	blx	r7
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d1be      	bne.n	8006b36 <_printf_float+0x32a>
 8006bb8:	e689      	b.n	80068ce <_printf_float+0xc2>
 8006bba:	9a05      	ldr	r2, [sp, #20]
 8006bbc:	464b      	mov	r3, r9
 8006bbe:	4442      	add	r2, r8
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	47b8      	blx	r7
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d1c1      	bne.n	8006b4e <_printf_float+0x342>
 8006bca:	e680      	b.n	80068ce <_printf_float+0xc2>
 8006bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bce:	2a01      	cmp	r2, #1
 8006bd0:	dc01      	bgt.n	8006bd6 <_printf_float+0x3ca>
 8006bd2:	07db      	lsls	r3, r3, #31
 8006bd4:	d538      	bpl.n	8006c48 <_printf_float+0x43c>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	4642      	mov	r2, r8
 8006bda:	4631      	mov	r1, r6
 8006bdc:	4628      	mov	r0, r5
 8006bde:	47b8      	blx	r7
 8006be0:	3001      	adds	r0, #1
 8006be2:	f43f ae74 	beq.w	80068ce <_printf_float+0xc2>
 8006be6:	ee18 3a10 	vmov	r3, s16
 8006bea:	4652      	mov	r2, sl
 8006bec:	4631      	mov	r1, r6
 8006bee:	4628      	mov	r0, r5
 8006bf0:	47b8      	blx	r7
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	f43f ae6b 	beq.w	80068ce <_printf_float+0xc2>
 8006bf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f7f9 ff72 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c04:	b9d8      	cbnz	r0, 8006c3e <_printf_float+0x432>
 8006c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c08:	f108 0201 	add.w	r2, r8, #1
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b8      	blx	r7
 8006c14:	3001      	adds	r0, #1
 8006c16:	d10e      	bne.n	8006c36 <_printf_float+0x42a>
 8006c18:	e659      	b.n	80068ce <_printf_float+0xc2>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4652      	mov	r2, sl
 8006c1e:	4631      	mov	r1, r6
 8006c20:	4628      	mov	r0, r5
 8006c22:	47b8      	blx	r7
 8006c24:	3001      	adds	r0, #1
 8006c26:	f43f ae52 	beq.w	80068ce <_printf_float+0xc2>
 8006c2a:	f108 0801 	add.w	r8, r8, #1
 8006c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c30:	3b01      	subs	r3, #1
 8006c32:	4543      	cmp	r3, r8
 8006c34:	dcf1      	bgt.n	8006c1a <_printf_float+0x40e>
 8006c36:	464b      	mov	r3, r9
 8006c38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c3c:	e6dc      	b.n	80069f8 <_printf_float+0x1ec>
 8006c3e:	f04f 0800 	mov.w	r8, #0
 8006c42:	f104 0a1a 	add.w	sl, r4, #26
 8006c46:	e7f2      	b.n	8006c2e <_printf_float+0x422>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	4642      	mov	r2, r8
 8006c4c:	e7df      	b.n	8006c0e <_printf_float+0x402>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	464a      	mov	r2, r9
 8006c52:	4631      	mov	r1, r6
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b8      	blx	r7
 8006c58:	3001      	adds	r0, #1
 8006c5a:	f43f ae38 	beq.w	80068ce <_printf_float+0xc2>
 8006c5e:	f108 0801 	add.w	r8, r8, #1
 8006c62:	68e3      	ldr	r3, [r4, #12]
 8006c64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c66:	1a5b      	subs	r3, r3, r1
 8006c68:	4543      	cmp	r3, r8
 8006c6a:	dcf0      	bgt.n	8006c4e <_printf_float+0x442>
 8006c6c:	e6fa      	b.n	8006a64 <_printf_float+0x258>
 8006c6e:	f04f 0800 	mov.w	r8, #0
 8006c72:	f104 0919 	add.w	r9, r4, #25
 8006c76:	e7f4      	b.n	8006c62 <_printf_float+0x456>

08006c78 <_printf_common>:
 8006c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c7c:	4616      	mov	r6, r2
 8006c7e:	4699      	mov	r9, r3
 8006c80:	688a      	ldr	r2, [r1, #8]
 8006c82:	690b      	ldr	r3, [r1, #16]
 8006c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	bfb8      	it	lt
 8006c8c:	4613      	movlt	r3, r2
 8006c8e:	6033      	str	r3, [r6, #0]
 8006c90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c94:	4607      	mov	r7, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	b10a      	cbz	r2, 8006c9e <_printf_common+0x26>
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	6033      	str	r3, [r6, #0]
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	0699      	lsls	r1, r3, #26
 8006ca2:	bf42      	ittt	mi
 8006ca4:	6833      	ldrmi	r3, [r6, #0]
 8006ca6:	3302      	addmi	r3, #2
 8006ca8:	6033      	strmi	r3, [r6, #0]
 8006caa:	6825      	ldr	r5, [r4, #0]
 8006cac:	f015 0506 	ands.w	r5, r5, #6
 8006cb0:	d106      	bne.n	8006cc0 <_printf_common+0x48>
 8006cb2:	f104 0a19 	add.w	sl, r4, #25
 8006cb6:	68e3      	ldr	r3, [r4, #12]
 8006cb8:	6832      	ldr	r2, [r6, #0]
 8006cba:	1a9b      	subs	r3, r3, r2
 8006cbc:	42ab      	cmp	r3, r5
 8006cbe:	dc26      	bgt.n	8006d0e <_printf_common+0x96>
 8006cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cc4:	1e13      	subs	r3, r2, #0
 8006cc6:	6822      	ldr	r2, [r4, #0]
 8006cc8:	bf18      	it	ne
 8006cca:	2301      	movne	r3, #1
 8006ccc:	0692      	lsls	r2, r2, #26
 8006cce:	d42b      	bmi.n	8006d28 <_printf_common+0xb0>
 8006cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	47c0      	blx	r8
 8006cda:	3001      	adds	r0, #1
 8006cdc:	d01e      	beq.n	8006d1c <_printf_common+0xa4>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	68e5      	ldr	r5, [r4, #12]
 8006ce2:	6832      	ldr	r2, [r6, #0]
 8006ce4:	f003 0306 	and.w	r3, r3, #6
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	bf08      	it	eq
 8006cec:	1aad      	subeq	r5, r5, r2
 8006cee:	68a3      	ldr	r3, [r4, #8]
 8006cf0:	6922      	ldr	r2, [r4, #16]
 8006cf2:	bf0c      	ite	eq
 8006cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cf8:	2500      	movne	r5, #0
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	bfc4      	itt	gt
 8006cfe:	1a9b      	subgt	r3, r3, r2
 8006d00:	18ed      	addgt	r5, r5, r3
 8006d02:	2600      	movs	r6, #0
 8006d04:	341a      	adds	r4, #26
 8006d06:	42b5      	cmp	r5, r6
 8006d08:	d11a      	bne.n	8006d40 <_printf_common+0xc8>
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	e008      	b.n	8006d20 <_printf_common+0xa8>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	4652      	mov	r2, sl
 8006d12:	4649      	mov	r1, r9
 8006d14:	4638      	mov	r0, r7
 8006d16:	47c0      	blx	r8
 8006d18:	3001      	adds	r0, #1
 8006d1a:	d103      	bne.n	8006d24 <_printf_common+0xac>
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d24:	3501      	adds	r5, #1
 8006d26:	e7c6      	b.n	8006cb6 <_printf_common+0x3e>
 8006d28:	18e1      	adds	r1, r4, r3
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	2030      	movs	r0, #48	; 0x30
 8006d2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d32:	4422      	add	r2, r4
 8006d34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d3c:	3302      	adds	r3, #2
 8006d3e:	e7c7      	b.n	8006cd0 <_printf_common+0x58>
 8006d40:	2301      	movs	r3, #1
 8006d42:	4622      	mov	r2, r4
 8006d44:	4649      	mov	r1, r9
 8006d46:	4638      	mov	r0, r7
 8006d48:	47c0      	blx	r8
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	d0e6      	beq.n	8006d1c <_printf_common+0xa4>
 8006d4e:	3601      	adds	r6, #1
 8006d50:	e7d9      	b.n	8006d06 <_printf_common+0x8e>
	...

08006d54 <_printf_i>:
 8006d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d58:	7e0f      	ldrb	r7, [r1, #24]
 8006d5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d5c:	2f78      	cmp	r7, #120	; 0x78
 8006d5e:	4691      	mov	r9, r2
 8006d60:	4680      	mov	r8, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	469a      	mov	sl, r3
 8006d66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d6a:	d807      	bhi.n	8006d7c <_printf_i+0x28>
 8006d6c:	2f62      	cmp	r7, #98	; 0x62
 8006d6e:	d80a      	bhi.n	8006d86 <_printf_i+0x32>
 8006d70:	2f00      	cmp	r7, #0
 8006d72:	f000 80d8 	beq.w	8006f26 <_printf_i+0x1d2>
 8006d76:	2f58      	cmp	r7, #88	; 0x58
 8006d78:	f000 80a3 	beq.w	8006ec2 <_printf_i+0x16e>
 8006d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d84:	e03a      	b.n	8006dfc <_printf_i+0xa8>
 8006d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d8a:	2b15      	cmp	r3, #21
 8006d8c:	d8f6      	bhi.n	8006d7c <_printf_i+0x28>
 8006d8e:	a101      	add	r1, pc, #4	; (adr r1, 8006d94 <_printf_i+0x40>)
 8006d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d94:	08006ded 	.word	0x08006ded
 8006d98:	08006e01 	.word	0x08006e01
 8006d9c:	08006d7d 	.word	0x08006d7d
 8006da0:	08006d7d 	.word	0x08006d7d
 8006da4:	08006d7d 	.word	0x08006d7d
 8006da8:	08006d7d 	.word	0x08006d7d
 8006dac:	08006e01 	.word	0x08006e01
 8006db0:	08006d7d 	.word	0x08006d7d
 8006db4:	08006d7d 	.word	0x08006d7d
 8006db8:	08006d7d 	.word	0x08006d7d
 8006dbc:	08006d7d 	.word	0x08006d7d
 8006dc0:	08006f0d 	.word	0x08006f0d
 8006dc4:	08006e31 	.word	0x08006e31
 8006dc8:	08006eef 	.word	0x08006eef
 8006dcc:	08006d7d 	.word	0x08006d7d
 8006dd0:	08006d7d 	.word	0x08006d7d
 8006dd4:	08006f2f 	.word	0x08006f2f
 8006dd8:	08006d7d 	.word	0x08006d7d
 8006ddc:	08006e31 	.word	0x08006e31
 8006de0:	08006d7d 	.word	0x08006d7d
 8006de4:	08006d7d 	.word	0x08006d7d
 8006de8:	08006ef7 	.word	0x08006ef7
 8006dec:	682b      	ldr	r3, [r5, #0]
 8006dee:	1d1a      	adds	r2, r3, #4
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	602a      	str	r2, [r5, #0]
 8006df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0a3      	b.n	8006f48 <_printf_i+0x1f4>
 8006e00:	6820      	ldr	r0, [r4, #0]
 8006e02:	6829      	ldr	r1, [r5, #0]
 8006e04:	0606      	lsls	r6, r0, #24
 8006e06:	f101 0304 	add.w	r3, r1, #4
 8006e0a:	d50a      	bpl.n	8006e22 <_printf_i+0xce>
 8006e0c:	680e      	ldr	r6, [r1, #0]
 8006e0e:	602b      	str	r3, [r5, #0]
 8006e10:	2e00      	cmp	r6, #0
 8006e12:	da03      	bge.n	8006e1c <_printf_i+0xc8>
 8006e14:	232d      	movs	r3, #45	; 0x2d
 8006e16:	4276      	negs	r6, r6
 8006e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e1c:	485e      	ldr	r0, [pc, #376]	; (8006f98 <_printf_i+0x244>)
 8006e1e:	230a      	movs	r3, #10
 8006e20:	e019      	b.n	8006e56 <_printf_i+0x102>
 8006e22:	680e      	ldr	r6, [r1, #0]
 8006e24:	602b      	str	r3, [r5, #0]
 8006e26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e2a:	bf18      	it	ne
 8006e2c:	b236      	sxthne	r6, r6
 8006e2e:	e7ef      	b.n	8006e10 <_printf_i+0xbc>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	6820      	ldr	r0, [r4, #0]
 8006e34:	1d19      	adds	r1, r3, #4
 8006e36:	6029      	str	r1, [r5, #0]
 8006e38:	0601      	lsls	r1, r0, #24
 8006e3a:	d501      	bpl.n	8006e40 <_printf_i+0xec>
 8006e3c:	681e      	ldr	r6, [r3, #0]
 8006e3e:	e002      	b.n	8006e46 <_printf_i+0xf2>
 8006e40:	0646      	lsls	r6, r0, #25
 8006e42:	d5fb      	bpl.n	8006e3c <_printf_i+0xe8>
 8006e44:	881e      	ldrh	r6, [r3, #0]
 8006e46:	4854      	ldr	r0, [pc, #336]	; (8006f98 <_printf_i+0x244>)
 8006e48:	2f6f      	cmp	r7, #111	; 0x6f
 8006e4a:	bf0c      	ite	eq
 8006e4c:	2308      	moveq	r3, #8
 8006e4e:	230a      	movne	r3, #10
 8006e50:	2100      	movs	r1, #0
 8006e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e56:	6865      	ldr	r5, [r4, #4]
 8006e58:	60a5      	str	r5, [r4, #8]
 8006e5a:	2d00      	cmp	r5, #0
 8006e5c:	bfa2      	ittt	ge
 8006e5e:	6821      	ldrge	r1, [r4, #0]
 8006e60:	f021 0104 	bicge.w	r1, r1, #4
 8006e64:	6021      	strge	r1, [r4, #0]
 8006e66:	b90e      	cbnz	r6, 8006e6c <_printf_i+0x118>
 8006e68:	2d00      	cmp	r5, #0
 8006e6a:	d04d      	beq.n	8006f08 <_printf_i+0x1b4>
 8006e6c:	4615      	mov	r5, r2
 8006e6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e72:	fb03 6711 	mls	r7, r3, r1, r6
 8006e76:	5dc7      	ldrb	r7, [r0, r7]
 8006e78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e7c:	4637      	mov	r7, r6
 8006e7e:	42bb      	cmp	r3, r7
 8006e80:	460e      	mov	r6, r1
 8006e82:	d9f4      	bls.n	8006e6e <_printf_i+0x11a>
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d10b      	bne.n	8006ea0 <_printf_i+0x14c>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	07de      	lsls	r6, r3, #31
 8006e8c:	d508      	bpl.n	8006ea0 <_printf_i+0x14c>
 8006e8e:	6923      	ldr	r3, [r4, #16]
 8006e90:	6861      	ldr	r1, [r4, #4]
 8006e92:	4299      	cmp	r1, r3
 8006e94:	bfde      	ittt	le
 8006e96:	2330      	movle	r3, #48	; 0x30
 8006e98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ea0:	1b52      	subs	r2, r2, r5
 8006ea2:	6122      	str	r2, [r4, #16]
 8006ea4:	f8cd a000 	str.w	sl, [sp]
 8006ea8:	464b      	mov	r3, r9
 8006eaa:	aa03      	add	r2, sp, #12
 8006eac:	4621      	mov	r1, r4
 8006eae:	4640      	mov	r0, r8
 8006eb0:	f7ff fee2 	bl	8006c78 <_printf_common>
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d14c      	bne.n	8006f52 <_printf_i+0x1fe>
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	b004      	add	sp, #16
 8006ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec2:	4835      	ldr	r0, [pc, #212]	; (8006f98 <_printf_i+0x244>)
 8006ec4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ec8:	6829      	ldr	r1, [r5, #0]
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ed0:	6029      	str	r1, [r5, #0]
 8006ed2:	061d      	lsls	r5, r3, #24
 8006ed4:	d514      	bpl.n	8006f00 <_printf_i+0x1ac>
 8006ed6:	07df      	lsls	r7, r3, #31
 8006ed8:	bf44      	itt	mi
 8006eda:	f043 0320 	orrmi.w	r3, r3, #32
 8006ede:	6023      	strmi	r3, [r4, #0]
 8006ee0:	b91e      	cbnz	r6, 8006eea <_printf_i+0x196>
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	f023 0320 	bic.w	r3, r3, #32
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	2310      	movs	r3, #16
 8006eec:	e7b0      	b.n	8006e50 <_printf_i+0xfc>
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	f043 0320 	orr.w	r3, r3, #32
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	2378      	movs	r3, #120	; 0x78
 8006ef8:	4828      	ldr	r0, [pc, #160]	; (8006f9c <_printf_i+0x248>)
 8006efa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006efe:	e7e3      	b.n	8006ec8 <_printf_i+0x174>
 8006f00:	0659      	lsls	r1, r3, #25
 8006f02:	bf48      	it	mi
 8006f04:	b2b6      	uxthmi	r6, r6
 8006f06:	e7e6      	b.n	8006ed6 <_printf_i+0x182>
 8006f08:	4615      	mov	r5, r2
 8006f0a:	e7bb      	b.n	8006e84 <_printf_i+0x130>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	6826      	ldr	r6, [r4, #0]
 8006f10:	6961      	ldr	r1, [r4, #20]
 8006f12:	1d18      	adds	r0, r3, #4
 8006f14:	6028      	str	r0, [r5, #0]
 8006f16:	0635      	lsls	r5, r6, #24
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	d501      	bpl.n	8006f20 <_printf_i+0x1cc>
 8006f1c:	6019      	str	r1, [r3, #0]
 8006f1e:	e002      	b.n	8006f26 <_printf_i+0x1d2>
 8006f20:	0670      	lsls	r0, r6, #25
 8006f22:	d5fb      	bpl.n	8006f1c <_printf_i+0x1c8>
 8006f24:	8019      	strh	r1, [r3, #0]
 8006f26:	2300      	movs	r3, #0
 8006f28:	6123      	str	r3, [r4, #16]
 8006f2a:	4615      	mov	r5, r2
 8006f2c:	e7ba      	b.n	8006ea4 <_printf_i+0x150>
 8006f2e:	682b      	ldr	r3, [r5, #0]
 8006f30:	1d1a      	adds	r2, r3, #4
 8006f32:	602a      	str	r2, [r5, #0]
 8006f34:	681d      	ldr	r5, [r3, #0]
 8006f36:	6862      	ldr	r2, [r4, #4]
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f7f9 f960 	bl	8000200 <memchr>
 8006f40:	b108      	cbz	r0, 8006f46 <_printf_i+0x1f2>
 8006f42:	1b40      	subs	r0, r0, r5
 8006f44:	6060      	str	r0, [r4, #4]
 8006f46:	6863      	ldr	r3, [r4, #4]
 8006f48:	6123      	str	r3, [r4, #16]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f50:	e7a8      	b.n	8006ea4 <_printf_i+0x150>
 8006f52:	6923      	ldr	r3, [r4, #16]
 8006f54:	462a      	mov	r2, r5
 8006f56:	4649      	mov	r1, r9
 8006f58:	4640      	mov	r0, r8
 8006f5a:	47d0      	blx	sl
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	d0ab      	beq.n	8006eb8 <_printf_i+0x164>
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	079b      	lsls	r3, r3, #30
 8006f64:	d413      	bmi.n	8006f8e <_printf_i+0x23a>
 8006f66:	68e0      	ldr	r0, [r4, #12]
 8006f68:	9b03      	ldr	r3, [sp, #12]
 8006f6a:	4298      	cmp	r0, r3
 8006f6c:	bfb8      	it	lt
 8006f6e:	4618      	movlt	r0, r3
 8006f70:	e7a4      	b.n	8006ebc <_printf_i+0x168>
 8006f72:	2301      	movs	r3, #1
 8006f74:	4632      	mov	r2, r6
 8006f76:	4649      	mov	r1, r9
 8006f78:	4640      	mov	r0, r8
 8006f7a:	47d0      	blx	sl
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d09b      	beq.n	8006eb8 <_printf_i+0x164>
 8006f80:	3501      	adds	r5, #1
 8006f82:	68e3      	ldr	r3, [r4, #12]
 8006f84:	9903      	ldr	r1, [sp, #12]
 8006f86:	1a5b      	subs	r3, r3, r1
 8006f88:	42ab      	cmp	r3, r5
 8006f8a:	dcf2      	bgt.n	8006f72 <_printf_i+0x21e>
 8006f8c:	e7eb      	b.n	8006f66 <_printf_i+0x212>
 8006f8e:	2500      	movs	r5, #0
 8006f90:	f104 0619 	add.w	r6, r4, #25
 8006f94:	e7f5      	b.n	8006f82 <_printf_i+0x22e>
 8006f96:	bf00      	nop
 8006f98:	0800b026 	.word	0x0800b026
 8006f9c:	0800b037 	.word	0x0800b037

08006fa0 <_scanf_float>:
 8006fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	b087      	sub	sp, #28
 8006fa6:	4617      	mov	r7, r2
 8006fa8:	9303      	str	r3, [sp, #12]
 8006faa:	688b      	ldr	r3, [r1, #8]
 8006fac:	1e5a      	subs	r2, r3, #1
 8006fae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006fb2:	bf83      	ittte	hi
 8006fb4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006fb8:	195b      	addhi	r3, r3, r5
 8006fba:	9302      	strhi	r3, [sp, #8]
 8006fbc:	2300      	movls	r3, #0
 8006fbe:	bf86      	itte	hi
 8006fc0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006fc4:	608b      	strhi	r3, [r1, #8]
 8006fc6:	9302      	strls	r3, [sp, #8]
 8006fc8:	680b      	ldr	r3, [r1, #0]
 8006fca:	468b      	mov	fp, r1
 8006fcc:	2500      	movs	r5, #0
 8006fce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006fd2:	f84b 3b1c 	str.w	r3, [fp], #28
 8006fd6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006fda:	4680      	mov	r8, r0
 8006fdc:	460c      	mov	r4, r1
 8006fde:	465e      	mov	r6, fp
 8006fe0:	46aa      	mov	sl, r5
 8006fe2:	46a9      	mov	r9, r5
 8006fe4:	9501      	str	r5, [sp, #4]
 8006fe6:	68a2      	ldr	r2, [r4, #8]
 8006fe8:	b152      	cbz	r2, 8007000 <_scanf_float+0x60>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b4e      	cmp	r3, #78	; 0x4e
 8006ff0:	d864      	bhi.n	80070bc <_scanf_float+0x11c>
 8006ff2:	2b40      	cmp	r3, #64	; 0x40
 8006ff4:	d83c      	bhi.n	8007070 <_scanf_float+0xd0>
 8006ff6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006ffa:	b2c8      	uxtb	r0, r1
 8006ffc:	280e      	cmp	r0, #14
 8006ffe:	d93a      	bls.n	8007076 <_scanf_float+0xd6>
 8007000:	f1b9 0f00 	cmp.w	r9, #0
 8007004:	d003      	beq.n	800700e <_scanf_float+0x6e>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007012:	f1ba 0f01 	cmp.w	sl, #1
 8007016:	f200 8113 	bhi.w	8007240 <_scanf_float+0x2a0>
 800701a:	455e      	cmp	r6, fp
 800701c:	f200 8105 	bhi.w	800722a <_scanf_float+0x28a>
 8007020:	2501      	movs	r5, #1
 8007022:	4628      	mov	r0, r5
 8007024:	b007      	add	sp, #28
 8007026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800702e:	2a0d      	cmp	r2, #13
 8007030:	d8e6      	bhi.n	8007000 <_scanf_float+0x60>
 8007032:	a101      	add	r1, pc, #4	; (adr r1, 8007038 <_scanf_float+0x98>)
 8007034:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007038:	08007177 	.word	0x08007177
 800703c:	08007001 	.word	0x08007001
 8007040:	08007001 	.word	0x08007001
 8007044:	08007001 	.word	0x08007001
 8007048:	080071d7 	.word	0x080071d7
 800704c:	080071af 	.word	0x080071af
 8007050:	08007001 	.word	0x08007001
 8007054:	08007001 	.word	0x08007001
 8007058:	08007185 	.word	0x08007185
 800705c:	08007001 	.word	0x08007001
 8007060:	08007001 	.word	0x08007001
 8007064:	08007001 	.word	0x08007001
 8007068:	08007001 	.word	0x08007001
 800706c:	0800713d 	.word	0x0800713d
 8007070:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007074:	e7db      	b.n	800702e <_scanf_float+0x8e>
 8007076:	290e      	cmp	r1, #14
 8007078:	d8c2      	bhi.n	8007000 <_scanf_float+0x60>
 800707a:	a001      	add	r0, pc, #4	; (adr r0, 8007080 <_scanf_float+0xe0>)
 800707c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007080:	0800712f 	.word	0x0800712f
 8007084:	08007001 	.word	0x08007001
 8007088:	0800712f 	.word	0x0800712f
 800708c:	080071c3 	.word	0x080071c3
 8007090:	08007001 	.word	0x08007001
 8007094:	080070dd 	.word	0x080070dd
 8007098:	08007119 	.word	0x08007119
 800709c:	08007119 	.word	0x08007119
 80070a0:	08007119 	.word	0x08007119
 80070a4:	08007119 	.word	0x08007119
 80070a8:	08007119 	.word	0x08007119
 80070ac:	08007119 	.word	0x08007119
 80070b0:	08007119 	.word	0x08007119
 80070b4:	08007119 	.word	0x08007119
 80070b8:	08007119 	.word	0x08007119
 80070bc:	2b6e      	cmp	r3, #110	; 0x6e
 80070be:	d809      	bhi.n	80070d4 <_scanf_float+0x134>
 80070c0:	2b60      	cmp	r3, #96	; 0x60
 80070c2:	d8b2      	bhi.n	800702a <_scanf_float+0x8a>
 80070c4:	2b54      	cmp	r3, #84	; 0x54
 80070c6:	d077      	beq.n	80071b8 <_scanf_float+0x218>
 80070c8:	2b59      	cmp	r3, #89	; 0x59
 80070ca:	d199      	bne.n	8007000 <_scanf_float+0x60>
 80070cc:	2d07      	cmp	r5, #7
 80070ce:	d197      	bne.n	8007000 <_scanf_float+0x60>
 80070d0:	2508      	movs	r5, #8
 80070d2:	e029      	b.n	8007128 <_scanf_float+0x188>
 80070d4:	2b74      	cmp	r3, #116	; 0x74
 80070d6:	d06f      	beq.n	80071b8 <_scanf_float+0x218>
 80070d8:	2b79      	cmp	r3, #121	; 0x79
 80070da:	e7f6      	b.n	80070ca <_scanf_float+0x12a>
 80070dc:	6821      	ldr	r1, [r4, #0]
 80070de:	05c8      	lsls	r0, r1, #23
 80070e0:	d51a      	bpl.n	8007118 <_scanf_float+0x178>
 80070e2:	9b02      	ldr	r3, [sp, #8]
 80070e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80070e8:	6021      	str	r1, [r4, #0]
 80070ea:	f109 0901 	add.w	r9, r9, #1
 80070ee:	b11b      	cbz	r3, 80070f8 <_scanf_float+0x158>
 80070f0:	3b01      	subs	r3, #1
 80070f2:	3201      	adds	r2, #1
 80070f4:	9302      	str	r3, [sp, #8]
 80070f6:	60a2      	str	r2, [r4, #8]
 80070f8:	68a3      	ldr	r3, [r4, #8]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	60a3      	str	r3, [r4, #8]
 80070fe:	6923      	ldr	r3, [r4, #16]
 8007100:	3301      	adds	r3, #1
 8007102:	6123      	str	r3, [r4, #16]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3b01      	subs	r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	607b      	str	r3, [r7, #4]
 800710c:	f340 8084 	ble.w	8007218 <_scanf_float+0x278>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	3301      	adds	r3, #1
 8007114:	603b      	str	r3, [r7, #0]
 8007116:	e766      	b.n	8006fe6 <_scanf_float+0x46>
 8007118:	eb1a 0f05 	cmn.w	sl, r5
 800711c:	f47f af70 	bne.w	8007000 <_scanf_float+0x60>
 8007120:	6822      	ldr	r2, [r4, #0]
 8007122:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007126:	6022      	str	r2, [r4, #0]
 8007128:	f806 3b01 	strb.w	r3, [r6], #1
 800712c:	e7e4      	b.n	80070f8 <_scanf_float+0x158>
 800712e:	6822      	ldr	r2, [r4, #0]
 8007130:	0610      	lsls	r0, r2, #24
 8007132:	f57f af65 	bpl.w	8007000 <_scanf_float+0x60>
 8007136:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800713a:	e7f4      	b.n	8007126 <_scanf_float+0x186>
 800713c:	f1ba 0f00 	cmp.w	sl, #0
 8007140:	d10e      	bne.n	8007160 <_scanf_float+0x1c0>
 8007142:	f1b9 0f00 	cmp.w	r9, #0
 8007146:	d10e      	bne.n	8007166 <_scanf_float+0x1c6>
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800714e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007152:	d108      	bne.n	8007166 <_scanf_float+0x1c6>
 8007154:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007158:	6022      	str	r2, [r4, #0]
 800715a:	f04f 0a01 	mov.w	sl, #1
 800715e:	e7e3      	b.n	8007128 <_scanf_float+0x188>
 8007160:	f1ba 0f02 	cmp.w	sl, #2
 8007164:	d055      	beq.n	8007212 <_scanf_float+0x272>
 8007166:	2d01      	cmp	r5, #1
 8007168:	d002      	beq.n	8007170 <_scanf_float+0x1d0>
 800716a:	2d04      	cmp	r5, #4
 800716c:	f47f af48 	bne.w	8007000 <_scanf_float+0x60>
 8007170:	3501      	adds	r5, #1
 8007172:	b2ed      	uxtb	r5, r5
 8007174:	e7d8      	b.n	8007128 <_scanf_float+0x188>
 8007176:	f1ba 0f01 	cmp.w	sl, #1
 800717a:	f47f af41 	bne.w	8007000 <_scanf_float+0x60>
 800717e:	f04f 0a02 	mov.w	sl, #2
 8007182:	e7d1      	b.n	8007128 <_scanf_float+0x188>
 8007184:	b97d      	cbnz	r5, 80071a6 <_scanf_float+0x206>
 8007186:	f1b9 0f00 	cmp.w	r9, #0
 800718a:	f47f af3c 	bne.w	8007006 <_scanf_float+0x66>
 800718e:	6822      	ldr	r2, [r4, #0]
 8007190:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007194:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007198:	f47f af39 	bne.w	800700e <_scanf_float+0x6e>
 800719c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071a0:	6022      	str	r2, [r4, #0]
 80071a2:	2501      	movs	r5, #1
 80071a4:	e7c0      	b.n	8007128 <_scanf_float+0x188>
 80071a6:	2d03      	cmp	r5, #3
 80071a8:	d0e2      	beq.n	8007170 <_scanf_float+0x1d0>
 80071aa:	2d05      	cmp	r5, #5
 80071ac:	e7de      	b.n	800716c <_scanf_float+0x1cc>
 80071ae:	2d02      	cmp	r5, #2
 80071b0:	f47f af26 	bne.w	8007000 <_scanf_float+0x60>
 80071b4:	2503      	movs	r5, #3
 80071b6:	e7b7      	b.n	8007128 <_scanf_float+0x188>
 80071b8:	2d06      	cmp	r5, #6
 80071ba:	f47f af21 	bne.w	8007000 <_scanf_float+0x60>
 80071be:	2507      	movs	r5, #7
 80071c0:	e7b2      	b.n	8007128 <_scanf_float+0x188>
 80071c2:	6822      	ldr	r2, [r4, #0]
 80071c4:	0591      	lsls	r1, r2, #22
 80071c6:	f57f af1b 	bpl.w	8007000 <_scanf_float+0x60>
 80071ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80071ce:	6022      	str	r2, [r4, #0]
 80071d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80071d4:	e7a8      	b.n	8007128 <_scanf_float+0x188>
 80071d6:	6822      	ldr	r2, [r4, #0]
 80071d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80071dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80071e0:	d006      	beq.n	80071f0 <_scanf_float+0x250>
 80071e2:	0550      	lsls	r0, r2, #21
 80071e4:	f57f af0c 	bpl.w	8007000 <_scanf_float+0x60>
 80071e8:	f1b9 0f00 	cmp.w	r9, #0
 80071ec:	f43f af0f 	beq.w	800700e <_scanf_float+0x6e>
 80071f0:	0591      	lsls	r1, r2, #22
 80071f2:	bf58      	it	pl
 80071f4:	9901      	ldrpl	r1, [sp, #4]
 80071f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071fa:	bf58      	it	pl
 80071fc:	eba9 0101 	subpl.w	r1, r9, r1
 8007200:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007204:	bf58      	it	pl
 8007206:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800720a:	6022      	str	r2, [r4, #0]
 800720c:	f04f 0900 	mov.w	r9, #0
 8007210:	e78a      	b.n	8007128 <_scanf_float+0x188>
 8007212:	f04f 0a03 	mov.w	sl, #3
 8007216:	e787      	b.n	8007128 <_scanf_float+0x188>
 8007218:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800721c:	4639      	mov	r1, r7
 800721e:	4640      	mov	r0, r8
 8007220:	4798      	blx	r3
 8007222:	2800      	cmp	r0, #0
 8007224:	f43f aedf 	beq.w	8006fe6 <_scanf_float+0x46>
 8007228:	e6ea      	b.n	8007000 <_scanf_float+0x60>
 800722a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800722e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007232:	463a      	mov	r2, r7
 8007234:	4640      	mov	r0, r8
 8007236:	4798      	blx	r3
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	3b01      	subs	r3, #1
 800723c:	6123      	str	r3, [r4, #16]
 800723e:	e6ec      	b.n	800701a <_scanf_float+0x7a>
 8007240:	1e6b      	subs	r3, r5, #1
 8007242:	2b06      	cmp	r3, #6
 8007244:	d825      	bhi.n	8007292 <_scanf_float+0x2f2>
 8007246:	2d02      	cmp	r5, #2
 8007248:	d836      	bhi.n	80072b8 <_scanf_float+0x318>
 800724a:	455e      	cmp	r6, fp
 800724c:	f67f aee8 	bls.w	8007020 <_scanf_float+0x80>
 8007250:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007254:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007258:	463a      	mov	r2, r7
 800725a:	4640      	mov	r0, r8
 800725c:	4798      	blx	r3
 800725e:	6923      	ldr	r3, [r4, #16]
 8007260:	3b01      	subs	r3, #1
 8007262:	6123      	str	r3, [r4, #16]
 8007264:	e7f1      	b.n	800724a <_scanf_float+0x2aa>
 8007266:	9802      	ldr	r0, [sp, #8]
 8007268:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800726c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007270:	9002      	str	r0, [sp, #8]
 8007272:	463a      	mov	r2, r7
 8007274:	4640      	mov	r0, r8
 8007276:	4798      	blx	r3
 8007278:	6923      	ldr	r3, [r4, #16]
 800727a:	3b01      	subs	r3, #1
 800727c:	6123      	str	r3, [r4, #16]
 800727e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007282:	fa5f fa8a 	uxtb.w	sl, sl
 8007286:	f1ba 0f02 	cmp.w	sl, #2
 800728a:	d1ec      	bne.n	8007266 <_scanf_float+0x2c6>
 800728c:	3d03      	subs	r5, #3
 800728e:	b2ed      	uxtb	r5, r5
 8007290:	1b76      	subs	r6, r6, r5
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	05da      	lsls	r2, r3, #23
 8007296:	d52f      	bpl.n	80072f8 <_scanf_float+0x358>
 8007298:	055b      	lsls	r3, r3, #21
 800729a:	d510      	bpl.n	80072be <_scanf_float+0x31e>
 800729c:	455e      	cmp	r6, fp
 800729e:	f67f aebf 	bls.w	8007020 <_scanf_float+0x80>
 80072a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072aa:	463a      	mov	r2, r7
 80072ac:	4640      	mov	r0, r8
 80072ae:	4798      	blx	r3
 80072b0:	6923      	ldr	r3, [r4, #16]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	e7f1      	b.n	800729c <_scanf_float+0x2fc>
 80072b8:	46aa      	mov	sl, r5
 80072ba:	9602      	str	r6, [sp, #8]
 80072bc:	e7df      	b.n	800727e <_scanf_float+0x2de>
 80072be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80072c2:	6923      	ldr	r3, [r4, #16]
 80072c4:	2965      	cmp	r1, #101	; 0x65
 80072c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80072ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80072ce:	6123      	str	r3, [r4, #16]
 80072d0:	d00c      	beq.n	80072ec <_scanf_float+0x34c>
 80072d2:	2945      	cmp	r1, #69	; 0x45
 80072d4:	d00a      	beq.n	80072ec <_scanf_float+0x34c>
 80072d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072da:	463a      	mov	r2, r7
 80072dc:	4640      	mov	r0, r8
 80072de:	4798      	blx	r3
 80072e0:	6923      	ldr	r3, [r4, #16]
 80072e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	1eb5      	subs	r5, r6, #2
 80072ea:	6123      	str	r3, [r4, #16]
 80072ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072f0:	463a      	mov	r2, r7
 80072f2:	4640      	mov	r0, r8
 80072f4:	4798      	blx	r3
 80072f6:	462e      	mov	r6, r5
 80072f8:	6825      	ldr	r5, [r4, #0]
 80072fa:	f015 0510 	ands.w	r5, r5, #16
 80072fe:	d159      	bne.n	80073b4 <_scanf_float+0x414>
 8007300:	7035      	strb	r5, [r6, #0]
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800730c:	d11b      	bne.n	8007346 <_scanf_float+0x3a6>
 800730e:	9b01      	ldr	r3, [sp, #4]
 8007310:	454b      	cmp	r3, r9
 8007312:	eba3 0209 	sub.w	r2, r3, r9
 8007316:	d123      	bne.n	8007360 <_scanf_float+0x3c0>
 8007318:	2200      	movs	r2, #0
 800731a:	4659      	mov	r1, fp
 800731c:	4640      	mov	r0, r8
 800731e:	f000 fe99 	bl	8008054 <_strtod_r>
 8007322:	6822      	ldr	r2, [r4, #0]
 8007324:	9b03      	ldr	r3, [sp, #12]
 8007326:	f012 0f02 	tst.w	r2, #2
 800732a:	ec57 6b10 	vmov	r6, r7, d0
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	d021      	beq.n	8007376 <_scanf_float+0x3d6>
 8007332:	9903      	ldr	r1, [sp, #12]
 8007334:	1d1a      	adds	r2, r3, #4
 8007336:	600a      	str	r2, [r1, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	e9c3 6700 	strd	r6, r7, [r3]
 800733e:	68e3      	ldr	r3, [r4, #12]
 8007340:	3301      	adds	r3, #1
 8007342:	60e3      	str	r3, [r4, #12]
 8007344:	e66d      	b.n	8007022 <_scanf_float+0x82>
 8007346:	9b04      	ldr	r3, [sp, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d0e5      	beq.n	8007318 <_scanf_float+0x378>
 800734c:	9905      	ldr	r1, [sp, #20]
 800734e:	230a      	movs	r3, #10
 8007350:	462a      	mov	r2, r5
 8007352:	3101      	adds	r1, #1
 8007354:	4640      	mov	r0, r8
 8007356:	f000 ff05 	bl	8008164 <_strtol_r>
 800735a:	9b04      	ldr	r3, [sp, #16]
 800735c:	9e05      	ldr	r6, [sp, #20]
 800735e:	1ac2      	subs	r2, r0, r3
 8007360:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007364:	429e      	cmp	r6, r3
 8007366:	bf28      	it	cs
 8007368:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800736c:	4912      	ldr	r1, [pc, #72]	; (80073b8 <_scanf_float+0x418>)
 800736e:	4630      	mov	r0, r6
 8007370:	f000 f82c 	bl	80073cc <siprintf>
 8007374:	e7d0      	b.n	8007318 <_scanf_float+0x378>
 8007376:	9903      	ldr	r1, [sp, #12]
 8007378:	f012 0f04 	tst.w	r2, #4
 800737c:	f103 0204 	add.w	r2, r3, #4
 8007380:	600a      	str	r2, [r1, #0]
 8007382:	d1d9      	bne.n	8007338 <_scanf_float+0x398>
 8007384:	f8d3 8000 	ldr.w	r8, [r3]
 8007388:	ee10 2a10 	vmov	r2, s0
 800738c:	ee10 0a10 	vmov	r0, s0
 8007390:	463b      	mov	r3, r7
 8007392:	4639      	mov	r1, r7
 8007394:	f7f9 fbda 	bl	8000b4c <__aeabi_dcmpun>
 8007398:	b128      	cbz	r0, 80073a6 <_scanf_float+0x406>
 800739a:	4808      	ldr	r0, [pc, #32]	; (80073bc <_scanf_float+0x41c>)
 800739c:	f000 f810 	bl	80073c0 <nanf>
 80073a0:	ed88 0a00 	vstr	s0, [r8]
 80073a4:	e7cb      	b.n	800733e <_scanf_float+0x39e>
 80073a6:	4630      	mov	r0, r6
 80073a8:	4639      	mov	r1, r7
 80073aa:	f7f9 fc2d 	bl	8000c08 <__aeabi_d2f>
 80073ae:	f8c8 0000 	str.w	r0, [r8]
 80073b2:	e7c4      	b.n	800733e <_scanf_float+0x39e>
 80073b4:	2500      	movs	r5, #0
 80073b6:	e634      	b.n	8007022 <_scanf_float+0x82>
 80073b8:	0800b048 	.word	0x0800b048
 80073bc:	0800b450 	.word	0x0800b450

080073c0 <nanf>:
 80073c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80073c8 <nanf+0x8>
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	7fc00000 	.word	0x7fc00000

080073cc <siprintf>:
 80073cc:	b40e      	push	{r1, r2, r3}
 80073ce:	b500      	push	{lr}
 80073d0:	b09c      	sub	sp, #112	; 0x70
 80073d2:	ab1d      	add	r3, sp, #116	; 0x74
 80073d4:	9002      	str	r0, [sp, #8]
 80073d6:	9006      	str	r0, [sp, #24]
 80073d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073dc:	4809      	ldr	r0, [pc, #36]	; (8007404 <siprintf+0x38>)
 80073de:	9107      	str	r1, [sp, #28]
 80073e0:	9104      	str	r1, [sp, #16]
 80073e2:	4909      	ldr	r1, [pc, #36]	; (8007408 <siprintf+0x3c>)
 80073e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e8:	9105      	str	r1, [sp, #20]
 80073ea:	6800      	ldr	r0, [r0, #0]
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	a902      	add	r1, sp, #8
 80073f0:	f002 fee4 	bl	800a1bc <_svfiprintf_r>
 80073f4:	9b02      	ldr	r3, [sp, #8]
 80073f6:	2200      	movs	r2, #0
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	b01c      	add	sp, #112	; 0x70
 80073fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007400:	b003      	add	sp, #12
 8007402:	4770      	bx	lr
 8007404:	20000020 	.word	0x20000020
 8007408:	ffff0208 	.word	0xffff0208

0800740c <sulp>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	4604      	mov	r4, r0
 8007410:	460d      	mov	r5, r1
 8007412:	ec45 4b10 	vmov	d0, r4, r5
 8007416:	4616      	mov	r6, r2
 8007418:	f002 fc2e 	bl	8009c78 <__ulp>
 800741c:	ec51 0b10 	vmov	r0, r1, d0
 8007420:	b17e      	cbz	r6, 8007442 <sulp+0x36>
 8007422:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007426:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800742a:	2b00      	cmp	r3, #0
 800742c:	dd09      	ble.n	8007442 <sulp+0x36>
 800742e:	051b      	lsls	r3, r3, #20
 8007430:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007434:	2400      	movs	r4, #0
 8007436:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800743a:	4622      	mov	r2, r4
 800743c:	462b      	mov	r3, r5
 800743e:	f7f9 f8eb 	bl	8000618 <__aeabi_dmul>
 8007442:	bd70      	pop	{r4, r5, r6, pc}
 8007444:	0000      	movs	r0, r0
	...

08007448 <_strtod_l>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	ed2d 8b02 	vpush	{d8}
 8007450:	b09d      	sub	sp, #116	; 0x74
 8007452:	461f      	mov	r7, r3
 8007454:	2300      	movs	r3, #0
 8007456:	9318      	str	r3, [sp, #96]	; 0x60
 8007458:	4ba2      	ldr	r3, [pc, #648]	; (80076e4 <_strtod_l+0x29c>)
 800745a:	9213      	str	r2, [sp, #76]	; 0x4c
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	9305      	str	r3, [sp, #20]
 8007460:	4604      	mov	r4, r0
 8007462:	4618      	mov	r0, r3
 8007464:	4688      	mov	r8, r1
 8007466:	f7f8 fec3 	bl	80001f0 <strlen>
 800746a:	f04f 0a00 	mov.w	sl, #0
 800746e:	4605      	mov	r5, r0
 8007470:	f04f 0b00 	mov.w	fp, #0
 8007474:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800747a:	781a      	ldrb	r2, [r3, #0]
 800747c:	2a2b      	cmp	r2, #43	; 0x2b
 800747e:	d04e      	beq.n	800751e <_strtod_l+0xd6>
 8007480:	d83b      	bhi.n	80074fa <_strtod_l+0xb2>
 8007482:	2a0d      	cmp	r2, #13
 8007484:	d834      	bhi.n	80074f0 <_strtod_l+0xa8>
 8007486:	2a08      	cmp	r2, #8
 8007488:	d834      	bhi.n	80074f4 <_strtod_l+0xac>
 800748a:	2a00      	cmp	r2, #0
 800748c:	d03e      	beq.n	800750c <_strtod_l+0xc4>
 800748e:	2300      	movs	r3, #0
 8007490:	930a      	str	r3, [sp, #40]	; 0x28
 8007492:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007494:	7833      	ldrb	r3, [r6, #0]
 8007496:	2b30      	cmp	r3, #48	; 0x30
 8007498:	f040 80b0 	bne.w	80075fc <_strtod_l+0x1b4>
 800749c:	7873      	ldrb	r3, [r6, #1]
 800749e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80074a2:	2b58      	cmp	r3, #88	; 0x58
 80074a4:	d168      	bne.n	8007578 <_strtod_l+0x130>
 80074a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a8:	9301      	str	r3, [sp, #4]
 80074aa:	ab18      	add	r3, sp, #96	; 0x60
 80074ac:	9702      	str	r7, [sp, #8]
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	4a8d      	ldr	r2, [pc, #564]	; (80076e8 <_strtod_l+0x2a0>)
 80074b2:	ab19      	add	r3, sp, #100	; 0x64
 80074b4:	a917      	add	r1, sp, #92	; 0x5c
 80074b6:	4620      	mov	r0, r4
 80074b8:	f001 fd38 	bl	8008f2c <__gethex>
 80074bc:	f010 0707 	ands.w	r7, r0, #7
 80074c0:	4605      	mov	r5, r0
 80074c2:	d005      	beq.n	80074d0 <_strtod_l+0x88>
 80074c4:	2f06      	cmp	r7, #6
 80074c6:	d12c      	bne.n	8007522 <_strtod_l+0xda>
 80074c8:	3601      	adds	r6, #1
 80074ca:	2300      	movs	r3, #0
 80074cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80074ce:	930a      	str	r3, [sp, #40]	; 0x28
 80074d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f040 8590 	bne.w	8007ff8 <_strtod_l+0xbb0>
 80074d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074da:	b1eb      	cbz	r3, 8007518 <_strtod_l+0xd0>
 80074dc:	4652      	mov	r2, sl
 80074de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80074e2:	ec43 2b10 	vmov	d0, r2, r3
 80074e6:	b01d      	add	sp, #116	; 0x74
 80074e8:	ecbd 8b02 	vpop	{d8}
 80074ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f0:	2a20      	cmp	r2, #32
 80074f2:	d1cc      	bne.n	800748e <_strtod_l+0x46>
 80074f4:	3301      	adds	r3, #1
 80074f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80074f8:	e7be      	b.n	8007478 <_strtod_l+0x30>
 80074fa:	2a2d      	cmp	r2, #45	; 0x2d
 80074fc:	d1c7      	bne.n	800748e <_strtod_l+0x46>
 80074fe:	2201      	movs	r2, #1
 8007500:	920a      	str	r2, [sp, #40]	; 0x28
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	9217      	str	r2, [sp, #92]	; 0x5c
 8007506:	785b      	ldrb	r3, [r3, #1]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1c2      	bne.n	8007492 <_strtod_l+0x4a>
 800750c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800750e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007512:	2b00      	cmp	r3, #0
 8007514:	f040 856e 	bne.w	8007ff4 <_strtod_l+0xbac>
 8007518:	4652      	mov	r2, sl
 800751a:	465b      	mov	r3, fp
 800751c:	e7e1      	b.n	80074e2 <_strtod_l+0x9a>
 800751e:	2200      	movs	r2, #0
 8007520:	e7ee      	b.n	8007500 <_strtod_l+0xb8>
 8007522:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007524:	b13a      	cbz	r2, 8007536 <_strtod_l+0xee>
 8007526:	2135      	movs	r1, #53	; 0x35
 8007528:	a81a      	add	r0, sp, #104	; 0x68
 800752a:	f002 fcb0 	bl	8009e8e <__copybits>
 800752e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007530:	4620      	mov	r0, r4
 8007532:	f002 f86f 	bl	8009614 <_Bfree>
 8007536:	3f01      	subs	r7, #1
 8007538:	2f04      	cmp	r7, #4
 800753a:	d806      	bhi.n	800754a <_strtod_l+0x102>
 800753c:	e8df f007 	tbb	[pc, r7]
 8007540:	1714030a 	.word	0x1714030a
 8007544:	0a          	.byte	0x0a
 8007545:	00          	.byte	0x00
 8007546:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800754a:	0728      	lsls	r0, r5, #28
 800754c:	d5c0      	bpl.n	80074d0 <_strtod_l+0x88>
 800754e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007552:	e7bd      	b.n	80074d0 <_strtod_l+0x88>
 8007554:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007558:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800755a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800755e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007562:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007566:	e7f0      	b.n	800754a <_strtod_l+0x102>
 8007568:	f8df b180 	ldr.w	fp, [pc, #384]	; 80076ec <_strtod_l+0x2a4>
 800756c:	e7ed      	b.n	800754a <_strtod_l+0x102>
 800756e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007572:	f04f 3aff 	mov.w	sl, #4294967295
 8007576:	e7e8      	b.n	800754a <_strtod_l+0x102>
 8007578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	9217      	str	r2, [sp, #92]	; 0x5c
 800757e:	785b      	ldrb	r3, [r3, #1]
 8007580:	2b30      	cmp	r3, #48	; 0x30
 8007582:	d0f9      	beq.n	8007578 <_strtod_l+0x130>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0a3      	beq.n	80074d0 <_strtod_l+0x88>
 8007588:	2301      	movs	r3, #1
 800758a:	f04f 0900 	mov.w	r9, #0
 800758e:	9304      	str	r3, [sp, #16]
 8007590:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007592:	9308      	str	r3, [sp, #32]
 8007594:	f8cd 901c 	str.w	r9, [sp, #28]
 8007598:	464f      	mov	r7, r9
 800759a:	220a      	movs	r2, #10
 800759c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800759e:	7806      	ldrb	r6, [r0, #0]
 80075a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80075a4:	b2d9      	uxtb	r1, r3
 80075a6:	2909      	cmp	r1, #9
 80075a8:	d92a      	bls.n	8007600 <_strtod_l+0x1b8>
 80075aa:	9905      	ldr	r1, [sp, #20]
 80075ac:	462a      	mov	r2, r5
 80075ae:	f002 ff1f 	bl	800a3f0 <strncmp>
 80075b2:	b398      	cbz	r0, 800761c <_strtod_l+0x1d4>
 80075b4:	2000      	movs	r0, #0
 80075b6:	4632      	mov	r2, r6
 80075b8:	463d      	mov	r5, r7
 80075ba:	9005      	str	r0, [sp, #20]
 80075bc:	4603      	mov	r3, r0
 80075be:	2a65      	cmp	r2, #101	; 0x65
 80075c0:	d001      	beq.n	80075c6 <_strtod_l+0x17e>
 80075c2:	2a45      	cmp	r2, #69	; 0x45
 80075c4:	d118      	bne.n	80075f8 <_strtod_l+0x1b0>
 80075c6:	b91d      	cbnz	r5, 80075d0 <_strtod_l+0x188>
 80075c8:	9a04      	ldr	r2, [sp, #16]
 80075ca:	4302      	orrs	r2, r0
 80075cc:	d09e      	beq.n	800750c <_strtod_l+0xc4>
 80075ce:	2500      	movs	r5, #0
 80075d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80075d4:	f108 0201 	add.w	r2, r8, #1
 80075d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80075da:	f898 2001 	ldrb.w	r2, [r8, #1]
 80075de:	2a2b      	cmp	r2, #43	; 0x2b
 80075e0:	d075      	beq.n	80076ce <_strtod_l+0x286>
 80075e2:	2a2d      	cmp	r2, #45	; 0x2d
 80075e4:	d07b      	beq.n	80076de <_strtod_l+0x296>
 80075e6:	f04f 0c00 	mov.w	ip, #0
 80075ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80075ee:	2909      	cmp	r1, #9
 80075f0:	f240 8082 	bls.w	80076f8 <_strtod_l+0x2b0>
 80075f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80075f8:	2600      	movs	r6, #0
 80075fa:	e09d      	b.n	8007738 <_strtod_l+0x2f0>
 80075fc:	2300      	movs	r3, #0
 80075fe:	e7c4      	b.n	800758a <_strtod_l+0x142>
 8007600:	2f08      	cmp	r7, #8
 8007602:	bfd8      	it	le
 8007604:	9907      	ldrle	r1, [sp, #28]
 8007606:	f100 0001 	add.w	r0, r0, #1
 800760a:	bfda      	itte	le
 800760c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007610:	9307      	strle	r3, [sp, #28]
 8007612:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007616:	3701      	adds	r7, #1
 8007618:	9017      	str	r0, [sp, #92]	; 0x5c
 800761a:	e7bf      	b.n	800759c <_strtod_l+0x154>
 800761c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800761e:	195a      	adds	r2, r3, r5
 8007620:	9217      	str	r2, [sp, #92]	; 0x5c
 8007622:	5d5a      	ldrb	r2, [r3, r5]
 8007624:	2f00      	cmp	r7, #0
 8007626:	d037      	beq.n	8007698 <_strtod_l+0x250>
 8007628:	9005      	str	r0, [sp, #20]
 800762a:	463d      	mov	r5, r7
 800762c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007630:	2b09      	cmp	r3, #9
 8007632:	d912      	bls.n	800765a <_strtod_l+0x212>
 8007634:	2301      	movs	r3, #1
 8007636:	e7c2      	b.n	80075be <_strtod_l+0x176>
 8007638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	9217      	str	r2, [sp, #92]	; 0x5c
 800763e:	785a      	ldrb	r2, [r3, #1]
 8007640:	3001      	adds	r0, #1
 8007642:	2a30      	cmp	r2, #48	; 0x30
 8007644:	d0f8      	beq.n	8007638 <_strtod_l+0x1f0>
 8007646:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800764a:	2b08      	cmp	r3, #8
 800764c:	f200 84d9 	bhi.w	8008002 <_strtod_l+0xbba>
 8007650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007652:	9005      	str	r0, [sp, #20]
 8007654:	2000      	movs	r0, #0
 8007656:	9308      	str	r3, [sp, #32]
 8007658:	4605      	mov	r5, r0
 800765a:	3a30      	subs	r2, #48	; 0x30
 800765c:	f100 0301 	add.w	r3, r0, #1
 8007660:	d014      	beq.n	800768c <_strtod_l+0x244>
 8007662:	9905      	ldr	r1, [sp, #20]
 8007664:	4419      	add	r1, r3
 8007666:	9105      	str	r1, [sp, #20]
 8007668:	462b      	mov	r3, r5
 800766a:	eb00 0e05 	add.w	lr, r0, r5
 800766e:	210a      	movs	r1, #10
 8007670:	4573      	cmp	r3, lr
 8007672:	d113      	bne.n	800769c <_strtod_l+0x254>
 8007674:	182b      	adds	r3, r5, r0
 8007676:	2b08      	cmp	r3, #8
 8007678:	f105 0501 	add.w	r5, r5, #1
 800767c:	4405      	add	r5, r0
 800767e:	dc1c      	bgt.n	80076ba <_strtod_l+0x272>
 8007680:	9907      	ldr	r1, [sp, #28]
 8007682:	230a      	movs	r3, #10
 8007684:	fb03 2301 	mla	r3, r3, r1, r2
 8007688:	9307      	str	r3, [sp, #28]
 800768a:	2300      	movs	r3, #0
 800768c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800768e:	1c51      	adds	r1, r2, #1
 8007690:	9117      	str	r1, [sp, #92]	; 0x5c
 8007692:	7852      	ldrb	r2, [r2, #1]
 8007694:	4618      	mov	r0, r3
 8007696:	e7c9      	b.n	800762c <_strtod_l+0x1e4>
 8007698:	4638      	mov	r0, r7
 800769a:	e7d2      	b.n	8007642 <_strtod_l+0x1fa>
 800769c:	2b08      	cmp	r3, #8
 800769e:	dc04      	bgt.n	80076aa <_strtod_l+0x262>
 80076a0:	9e07      	ldr	r6, [sp, #28]
 80076a2:	434e      	muls	r6, r1
 80076a4:	9607      	str	r6, [sp, #28]
 80076a6:	3301      	adds	r3, #1
 80076a8:	e7e2      	b.n	8007670 <_strtod_l+0x228>
 80076aa:	f103 0c01 	add.w	ip, r3, #1
 80076ae:	f1bc 0f10 	cmp.w	ip, #16
 80076b2:	bfd8      	it	le
 80076b4:	fb01 f909 	mulle.w	r9, r1, r9
 80076b8:	e7f5      	b.n	80076a6 <_strtod_l+0x25e>
 80076ba:	2d10      	cmp	r5, #16
 80076bc:	bfdc      	itt	le
 80076be:	230a      	movle	r3, #10
 80076c0:	fb03 2909 	mlale	r9, r3, r9, r2
 80076c4:	e7e1      	b.n	800768a <_strtod_l+0x242>
 80076c6:	2300      	movs	r3, #0
 80076c8:	9305      	str	r3, [sp, #20]
 80076ca:	2301      	movs	r3, #1
 80076cc:	e77c      	b.n	80075c8 <_strtod_l+0x180>
 80076ce:	f04f 0c00 	mov.w	ip, #0
 80076d2:	f108 0202 	add.w	r2, r8, #2
 80076d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80076d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80076dc:	e785      	b.n	80075ea <_strtod_l+0x1a2>
 80076de:	f04f 0c01 	mov.w	ip, #1
 80076e2:	e7f6      	b.n	80076d2 <_strtod_l+0x28a>
 80076e4:	0800b298 	.word	0x0800b298
 80076e8:	0800b050 	.word	0x0800b050
 80076ec:	7ff00000 	.word	0x7ff00000
 80076f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076f2:	1c51      	adds	r1, r2, #1
 80076f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80076f6:	7852      	ldrb	r2, [r2, #1]
 80076f8:	2a30      	cmp	r2, #48	; 0x30
 80076fa:	d0f9      	beq.n	80076f0 <_strtod_l+0x2a8>
 80076fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007700:	2908      	cmp	r1, #8
 8007702:	f63f af79 	bhi.w	80075f8 <_strtod_l+0x1b0>
 8007706:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800770a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800770c:	9206      	str	r2, [sp, #24]
 800770e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007710:	1c51      	adds	r1, r2, #1
 8007712:	9117      	str	r1, [sp, #92]	; 0x5c
 8007714:	7852      	ldrb	r2, [r2, #1]
 8007716:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800771a:	2e09      	cmp	r6, #9
 800771c:	d937      	bls.n	800778e <_strtod_l+0x346>
 800771e:	9e06      	ldr	r6, [sp, #24]
 8007720:	1b89      	subs	r1, r1, r6
 8007722:	2908      	cmp	r1, #8
 8007724:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007728:	dc02      	bgt.n	8007730 <_strtod_l+0x2e8>
 800772a:	4576      	cmp	r6, lr
 800772c:	bfa8      	it	ge
 800772e:	4676      	movge	r6, lr
 8007730:	f1bc 0f00 	cmp.w	ip, #0
 8007734:	d000      	beq.n	8007738 <_strtod_l+0x2f0>
 8007736:	4276      	negs	r6, r6
 8007738:	2d00      	cmp	r5, #0
 800773a:	d14d      	bne.n	80077d8 <_strtod_l+0x390>
 800773c:	9904      	ldr	r1, [sp, #16]
 800773e:	4301      	orrs	r1, r0
 8007740:	f47f aec6 	bne.w	80074d0 <_strtod_l+0x88>
 8007744:	2b00      	cmp	r3, #0
 8007746:	f47f aee1 	bne.w	800750c <_strtod_l+0xc4>
 800774a:	2a69      	cmp	r2, #105	; 0x69
 800774c:	d027      	beq.n	800779e <_strtod_l+0x356>
 800774e:	dc24      	bgt.n	800779a <_strtod_l+0x352>
 8007750:	2a49      	cmp	r2, #73	; 0x49
 8007752:	d024      	beq.n	800779e <_strtod_l+0x356>
 8007754:	2a4e      	cmp	r2, #78	; 0x4e
 8007756:	f47f aed9 	bne.w	800750c <_strtod_l+0xc4>
 800775a:	499f      	ldr	r1, [pc, #636]	; (80079d8 <_strtod_l+0x590>)
 800775c:	a817      	add	r0, sp, #92	; 0x5c
 800775e:	f001 fe3d 	bl	80093dc <__match>
 8007762:	2800      	cmp	r0, #0
 8007764:	f43f aed2 	beq.w	800750c <_strtod_l+0xc4>
 8007768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	2b28      	cmp	r3, #40	; 0x28
 800776e:	d12d      	bne.n	80077cc <_strtod_l+0x384>
 8007770:	499a      	ldr	r1, [pc, #616]	; (80079dc <_strtod_l+0x594>)
 8007772:	aa1a      	add	r2, sp, #104	; 0x68
 8007774:	a817      	add	r0, sp, #92	; 0x5c
 8007776:	f001 fe45 	bl	8009404 <__hexnan>
 800777a:	2805      	cmp	r0, #5
 800777c:	d126      	bne.n	80077cc <_strtod_l+0x384>
 800777e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007780:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007784:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007788:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800778c:	e6a0      	b.n	80074d0 <_strtod_l+0x88>
 800778e:	210a      	movs	r1, #10
 8007790:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007794:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007798:	e7b9      	b.n	800770e <_strtod_l+0x2c6>
 800779a:	2a6e      	cmp	r2, #110	; 0x6e
 800779c:	e7db      	b.n	8007756 <_strtod_l+0x30e>
 800779e:	4990      	ldr	r1, [pc, #576]	; (80079e0 <_strtod_l+0x598>)
 80077a0:	a817      	add	r0, sp, #92	; 0x5c
 80077a2:	f001 fe1b 	bl	80093dc <__match>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f43f aeb0 	beq.w	800750c <_strtod_l+0xc4>
 80077ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077ae:	498d      	ldr	r1, [pc, #564]	; (80079e4 <_strtod_l+0x59c>)
 80077b0:	3b01      	subs	r3, #1
 80077b2:	a817      	add	r0, sp, #92	; 0x5c
 80077b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80077b6:	f001 fe11 	bl	80093dc <__match>
 80077ba:	b910      	cbnz	r0, 80077c2 <_strtod_l+0x37a>
 80077bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077be:	3301      	adds	r3, #1
 80077c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80077c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80079f4 <_strtod_l+0x5ac>
 80077c6:	f04f 0a00 	mov.w	sl, #0
 80077ca:	e681      	b.n	80074d0 <_strtod_l+0x88>
 80077cc:	4886      	ldr	r0, [pc, #536]	; (80079e8 <_strtod_l+0x5a0>)
 80077ce:	f002 fdf7 	bl	800a3c0 <nan>
 80077d2:	ec5b ab10 	vmov	sl, fp, d0
 80077d6:	e67b      	b.n	80074d0 <_strtod_l+0x88>
 80077d8:	9b05      	ldr	r3, [sp, #20]
 80077da:	9807      	ldr	r0, [sp, #28]
 80077dc:	1af3      	subs	r3, r6, r3
 80077de:	2f00      	cmp	r7, #0
 80077e0:	bf08      	it	eq
 80077e2:	462f      	moveq	r7, r5
 80077e4:	2d10      	cmp	r5, #16
 80077e6:	9306      	str	r3, [sp, #24]
 80077e8:	46a8      	mov	r8, r5
 80077ea:	bfa8      	it	ge
 80077ec:	f04f 0810 	movge.w	r8, #16
 80077f0:	f7f8 fe98 	bl	8000524 <__aeabi_ui2d>
 80077f4:	2d09      	cmp	r5, #9
 80077f6:	4682      	mov	sl, r0
 80077f8:	468b      	mov	fp, r1
 80077fa:	dd13      	ble.n	8007824 <_strtod_l+0x3dc>
 80077fc:	4b7b      	ldr	r3, [pc, #492]	; (80079ec <_strtod_l+0x5a4>)
 80077fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007802:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007806:	f7f8 ff07 	bl	8000618 <__aeabi_dmul>
 800780a:	4682      	mov	sl, r0
 800780c:	4648      	mov	r0, r9
 800780e:	468b      	mov	fp, r1
 8007810:	f7f8 fe88 	bl	8000524 <__aeabi_ui2d>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4650      	mov	r0, sl
 800781a:	4659      	mov	r1, fp
 800781c:	f7f8 fd46 	bl	80002ac <__adddf3>
 8007820:	4682      	mov	sl, r0
 8007822:	468b      	mov	fp, r1
 8007824:	2d0f      	cmp	r5, #15
 8007826:	dc38      	bgt.n	800789a <_strtod_l+0x452>
 8007828:	9b06      	ldr	r3, [sp, #24]
 800782a:	2b00      	cmp	r3, #0
 800782c:	f43f ae50 	beq.w	80074d0 <_strtod_l+0x88>
 8007830:	dd24      	ble.n	800787c <_strtod_l+0x434>
 8007832:	2b16      	cmp	r3, #22
 8007834:	dc0b      	bgt.n	800784e <_strtod_l+0x406>
 8007836:	496d      	ldr	r1, [pc, #436]	; (80079ec <_strtod_l+0x5a4>)
 8007838:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800783c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007840:	4652      	mov	r2, sl
 8007842:	465b      	mov	r3, fp
 8007844:	f7f8 fee8 	bl	8000618 <__aeabi_dmul>
 8007848:	4682      	mov	sl, r0
 800784a:	468b      	mov	fp, r1
 800784c:	e640      	b.n	80074d0 <_strtod_l+0x88>
 800784e:	9a06      	ldr	r2, [sp, #24]
 8007850:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007854:	4293      	cmp	r3, r2
 8007856:	db20      	blt.n	800789a <_strtod_l+0x452>
 8007858:	4c64      	ldr	r4, [pc, #400]	; (80079ec <_strtod_l+0x5a4>)
 800785a:	f1c5 050f 	rsb	r5, r5, #15
 800785e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007862:	4652      	mov	r2, sl
 8007864:	465b      	mov	r3, fp
 8007866:	e9d1 0100 	ldrd	r0, r1, [r1]
 800786a:	f7f8 fed5 	bl	8000618 <__aeabi_dmul>
 800786e:	9b06      	ldr	r3, [sp, #24]
 8007870:	1b5d      	subs	r5, r3, r5
 8007872:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007876:	e9d4 2300 	ldrd	r2, r3, [r4]
 800787a:	e7e3      	b.n	8007844 <_strtod_l+0x3fc>
 800787c:	9b06      	ldr	r3, [sp, #24]
 800787e:	3316      	adds	r3, #22
 8007880:	db0b      	blt.n	800789a <_strtod_l+0x452>
 8007882:	9b05      	ldr	r3, [sp, #20]
 8007884:	1b9e      	subs	r6, r3, r6
 8007886:	4b59      	ldr	r3, [pc, #356]	; (80079ec <_strtod_l+0x5a4>)
 8007888:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800788c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007890:	4650      	mov	r0, sl
 8007892:	4659      	mov	r1, fp
 8007894:	f7f8 ffea 	bl	800086c <__aeabi_ddiv>
 8007898:	e7d6      	b.n	8007848 <_strtod_l+0x400>
 800789a:	9b06      	ldr	r3, [sp, #24]
 800789c:	eba5 0808 	sub.w	r8, r5, r8
 80078a0:	4498      	add	r8, r3
 80078a2:	f1b8 0f00 	cmp.w	r8, #0
 80078a6:	dd74      	ble.n	8007992 <_strtod_l+0x54a>
 80078a8:	f018 030f 	ands.w	r3, r8, #15
 80078ac:	d00a      	beq.n	80078c4 <_strtod_l+0x47c>
 80078ae:	494f      	ldr	r1, [pc, #316]	; (80079ec <_strtod_l+0x5a4>)
 80078b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078b4:	4652      	mov	r2, sl
 80078b6:	465b      	mov	r3, fp
 80078b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078bc:	f7f8 feac 	bl	8000618 <__aeabi_dmul>
 80078c0:	4682      	mov	sl, r0
 80078c2:	468b      	mov	fp, r1
 80078c4:	f038 080f 	bics.w	r8, r8, #15
 80078c8:	d04f      	beq.n	800796a <_strtod_l+0x522>
 80078ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80078ce:	dd22      	ble.n	8007916 <_strtod_l+0x4ce>
 80078d0:	2500      	movs	r5, #0
 80078d2:	462e      	mov	r6, r5
 80078d4:	9507      	str	r5, [sp, #28]
 80078d6:	9505      	str	r5, [sp, #20]
 80078d8:	2322      	movs	r3, #34	; 0x22
 80078da:	f8df b118 	ldr.w	fp, [pc, #280]	; 80079f4 <_strtod_l+0x5ac>
 80078de:	6023      	str	r3, [r4, #0]
 80078e0:	f04f 0a00 	mov.w	sl, #0
 80078e4:	9b07      	ldr	r3, [sp, #28]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f43f adf2 	beq.w	80074d0 <_strtod_l+0x88>
 80078ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078ee:	4620      	mov	r0, r4
 80078f0:	f001 fe90 	bl	8009614 <_Bfree>
 80078f4:	9905      	ldr	r1, [sp, #20]
 80078f6:	4620      	mov	r0, r4
 80078f8:	f001 fe8c 	bl	8009614 <_Bfree>
 80078fc:	4631      	mov	r1, r6
 80078fe:	4620      	mov	r0, r4
 8007900:	f001 fe88 	bl	8009614 <_Bfree>
 8007904:	9907      	ldr	r1, [sp, #28]
 8007906:	4620      	mov	r0, r4
 8007908:	f001 fe84 	bl	8009614 <_Bfree>
 800790c:	4629      	mov	r1, r5
 800790e:	4620      	mov	r0, r4
 8007910:	f001 fe80 	bl	8009614 <_Bfree>
 8007914:	e5dc      	b.n	80074d0 <_strtod_l+0x88>
 8007916:	4b36      	ldr	r3, [pc, #216]	; (80079f0 <_strtod_l+0x5a8>)
 8007918:	9304      	str	r3, [sp, #16]
 800791a:	2300      	movs	r3, #0
 800791c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007920:	4650      	mov	r0, sl
 8007922:	4659      	mov	r1, fp
 8007924:	4699      	mov	r9, r3
 8007926:	f1b8 0f01 	cmp.w	r8, #1
 800792a:	dc21      	bgt.n	8007970 <_strtod_l+0x528>
 800792c:	b10b      	cbz	r3, 8007932 <_strtod_l+0x4ea>
 800792e:	4682      	mov	sl, r0
 8007930:	468b      	mov	fp, r1
 8007932:	4b2f      	ldr	r3, [pc, #188]	; (80079f0 <_strtod_l+0x5a8>)
 8007934:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007938:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800793c:	4652      	mov	r2, sl
 800793e:	465b      	mov	r3, fp
 8007940:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007944:	f7f8 fe68 	bl	8000618 <__aeabi_dmul>
 8007948:	4b2a      	ldr	r3, [pc, #168]	; (80079f4 <_strtod_l+0x5ac>)
 800794a:	460a      	mov	r2, r1
 800794c:	400b      	ands	r3, r1
 800794e:	492a      	ldr	r1, [pc, #168]	; (80079f8 <_strtod_l+0x5b0>)
 8007950:	428b      	cmp	r3, r1
 8007952:	4682      	mov	sl, r0
 8007954:	d8bc      	bhi.n	80078d0 <_strtod_l+0x488>
 8007956:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800795a:	428b      	cmp	r3, r1
 800795c:	bf86      	itte	hi
 800795e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80079fc <_strtod_l+0x5b4>
 8007962:	f04f 3aff 	movhi.w	sl, #4294967295
 8007966:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800796a:	2300      	movs	r3, #0
 800796c:	9304      	str	r3, [sp, #16]
 800796e:	e084      	b.n	8007a7a <_strtod_l+0x632>
 8007970:	f018 0f01 	tst.w	r8, #1
 8007974:	d005      	beq.n	8007982 <_strtod_l+0x53a>
 8007976:	9b04      	ldr	r3, [sp, #16]
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	f7f8 fe4c 	bl	8000618 <__aeabi_dmul>
 8007980:	2301      	movs	r3, #1
 8007982:	9a04      	ldr	r2, [sp, #16]
 8007984:	3208      	adds	r2, #8
 8007986:	f109 0901 	add.w	r9, r9, #1
 800798a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800798e:	9204      	str	r2, [sp, #16]
 8007990:	e7c9      	b.n	8007926 <_strtod_l+0x4de>
 8007992:	d0ea      	beq.n	800796a <_strtod_l+0x522>
 8007994:	f1c8 0800 	rsb	r8, r8, #0
 8007998:	f018 020f 	ands.w	r2, r8, #15
 800799c:	d00a      	beq.n	80079b4 <_strtod_l+0x56c>
 800799e:	4b13      	ldr	r3, [pc, #76]	; (80079ec <_strtod_l+0x5a4>)
 80079a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079a4:	4650      	mov	r0, sl
 80079a6:	4659      	mov	r1, fp
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	f7f8 ff5e 	bl	800086c <__aeabi_ddiv>
 80079b0:	4682      	mov	sl, r0
 80079b2:	468b      	mov	fp, r1
 80079b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80079b8:	d0d7      	beq.n	800796a <_strtod_l+0x522>
 80079ba:	f1b8 0f1f 	cmp.w	r8, #31
 80079be:	dd1f      	ble.n	8007a00 <_strtod_l+0x5b8>
 80079c0:	2500      	movs	r5, #0
 80079c2:	462e      	mov	r6, r5
 80079c4:	9507      	str	r5, [sp, #28]
 80079c6:	9505      	str	r5, [sp, #20]
 80079c8:	2322      	movs	r3, #34	; 0x22
 80079ca:	f04f 0a00 	mov.w	sl, #0
 80079ce:	f04f 0b00 	mov.w	fp, #0
 80079d2:	6023      	str	r3, [r4, #0]
 80079d4:	e786      	b.n	80078e4 <_strtod_l+0x49c>
 80079d6:	bf00      	nop
 80079d8:	0800b021 	.word	0x0800b021
 80079dc:	0800b064 	.word	0x0800b064
 80079e0:	0800b019 	.word	0x0800b019
 80079e4:	0800b1a4 	.word	0x0800b1a4
 80079e8:	0800b450 	.word	0x0800b450
 80079ec:	0800b330 	.word	0x0800b330
 80079f0:	0800b308 	.word	0x0800b308
 80079f4:	7ff00000 	.word	0x7ff00000
 80079f8:	7ca00000 	.word	0x7ca00000
 80079fc:	7fefffff 	.word	0x7fefffff
 8007a00:	f018 0310 	ands.w	r3, r8, #16
 8007a04:	bf18      	it	ne
 8007a06:	236a      	movne	r3, #106	; 0x6a
 8007a08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007db8 <_strtod_l+0x970>
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	4650      	mov	r0, sl
 8007a10:	4659      	mov	r1, fp
 8007a12:	2300      	movs	r3, #0
 8007a14:	f018 0f01 	tst.w	r8, #1
 8007a18:	d004      	beq.n	8007a24 <_strtod_l+0x5dc>
 8007a1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a1e:	f7f8 fdfb 	bl	8000618 <__aeabi_dmul>
 8007a22:	2301      	movs	r3, #1
 8007a24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007a28:	f109 0908 	add.w	r9, r9, #8
 8007a2c:	d1f2      	bne.n	8007a14 <_strtod_l+0x5cc>
 8007a2e:	b10b      	cbz	r3, 8007a34 <_strtod_l+0x5ec>
 8007a30:	4682      	mov	sl, r0
 8007a32:	468b      	mov	fp, r1
 8007a34:	9b04      	ldr	r3, [sp, #16]
 8007a36:	b1c3      	cbz	r3, 8007a6a <_strtod_l+0x622>
 8007a38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	4659      	mov	r1, fp
 8007a44:	dd11      	ble.n	8007a6a <_strtod_l+0x622>
 8007a46:	2b1f      	cmp	r3, #31
 8007a48:	f340 8124 	ble.w	8007c94 <_strtod_l+0x84c>
 8007a4c:	2b34      	cmp	r3, #52	; 0x34
 8007a4e:	bfde      	ittt	le
 8007a50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007a54:	f04f 33ff 	movle.w	r3, #4294967295
 8007a58:	fa03 f202 	lslle.w	r2, r3, r2
 8007a5c:	f04f 0a00 	mov.w	sl, #0
 8007a60:	bfcc      	ite	gt
 8007a62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007a66:	ea02 0b01 	andle.w	fp, r2, r1
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4650      	mov	r0, sl
 8007a70:	4659      	mov	r1, fp
 8007a72:	f7f9 f839 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d1a2      	bne.n	80079c0 <_strtod_l+0x578>
 8007a7a:	9b07      	ldr	r3, [sp, #28]
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	9908      	ldr	r1, [sp, #32]
 8007a80:	462b      	mov	r3, r5
 8007a82:	463a      	mov	r2, r7
 8007a84:	4620      	mov	r0, r4
 8007a86:	f001 fe2d 	bl	80096e4 <__s2b>
 8007a8a:	9007      	str	r0, [sp, #28]
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	f43f af1f 	beq.w	80078d0 <_strtod_l+0x488>
 8007a92:	9b05      	ldr	r3, [sp, #20]
 8007a94:	1b9e      	subs	r6, r3, r6
 8007a96:	9b06      	ldr	r3, [sp, #24]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	bfb4      	ite	lt
 8007a9c:	4633      	movlt	r3, r6
 8007a9e:	2300      	movge	r3, #0
 8007aa0:	930c      	str	r3, [sp, #48]	; 0x30
 8007aa2:	9b06      	ldr	r3, [sp, #24]
 8007aa4:	2500      	movs	r5, #0
 8007aa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007aaa:	9312      	str	r3, [sp, #72]	; 0x48
 8007aac:	462e      	mov	r6, r5
 8007aae:	9b07      	ldr	r3, [sp, #28]
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	6859      	ldr	r1, [r3, #4]
 8007ab4:	f001 fd6e 	bl	8009594 <_Balloc>
 8007ab8:	9005      	str	r0, [sp, #20]
 8007aba:	2800      	cmp	r0, #0
 8007abc:	f43f af0c 	beq.w	80078d8 <_strtod_l+0x490>
 8007ac0:	9b07      	ldr	r3, [sp, #28]
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	3202      	adds	r2, #2
 8007ac6:	f103 010c 	add.w	r1, r3, #12
 8007aca:	0092      	lsls	r2, r2, #2
 8007acc:	300c      	adds	r0, #12
 8007ace:	f001 fd53 	bl	8009578 <memcpy>
 8007ad2:	ec4b ab10 	vmov	d0, sl, fp
 8007ad6:	aa1a      	add	r2, sp, #104	; 0x68
 8007ad8:	a919      	add	r1, sp, #100	; 0x64
 8007ada:	4620      	mov	r0, r4
 8007adc:	f002 f948 	bl	8009d70 <__d2b>
 8007ae0:	ec4b ab18 	vmov	d8, sl, fp
 8007ae4:	9018      	str	r0, [sp, #96]	; 0x60
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	f43f aef6 	beq.w	80078d8 <_strtod_l+0x490>
 8007aec:	2101      	movs	r1, #1
 8007aee:	4620      	mov	r0, r4
 8007af0:	f001 fe92 	bl	8009818 <__i2b>
 8007af4:	4606      	mov	r6, r0
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f43f aeee 	beq.w	80078d8 <_strtod_l+0x490>
 8007afc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007afe:	9904      	ldr	r1, [sp, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bfab      	itete	ge
 8007b04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007b06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007b08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007b0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007b0e:	bfac      	ite	ge
 8007b10:	eb03 0902 	addge.w	r9, r3, r2
 8007b14:	1ad7      	sublt	r7, r2, r3
 8007b16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b18:	eba3 0801 	sub.w	r8, r3, r1
 8007b1c:	4490      	add	r8, r2
 8007b1e:	4ba1      	ldr	r3, [pc, #644]	; (8007da4 <_strtod_l+0x95c>)
 8007b20:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b24:	4598      	cmp	r8, r3
 8007b26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b2a:	f280 80c7 	bge.w	8007cbc <_strtod_l+0x874>
 8007b2e:	eba3 0308 	sub.w	r3, r3, r8
 8007b32:	2b1f      	cmp	r3, #31
 8007b34:	eba2 0203 	sub.w	r2, r2, r3
 8007b38:	f04f 0101 	mov.w	r1, #1
 8007b3c:	f300 80b1 	bgt.w	8007ca2 <_strtod_l+0x85a>
 8007b40:	fa01 f303 	lsl.w	r3, r1, r3
 8007b44:	930d      	str	r3, [sp, #52]	; 0x34
 8007b46:	2300      	movs	r3, #0
 8007b48:	9308      	str	r3, [sp, #32]
 8007b4a:	eb09 0802 	add.w	r8, r9, r2
 8007b4e:	9b04      	ldr	r3, [sp, #16]
 8007b50:	45c1      	cmp	r9, r8
 8007b52:	4417      	add	r7, r2
 8007b54:	441f      	add	r7, r3
 8007b56:	464b      	mov	r3, r9
 8007b58:	bfa8      	it	ge
 8007b5a:	4643      	movge	r3, r8
 8007b5c:	42bb      	cmp	r3, r7
 8007b5e:	bfa8      	it	ge
 8007b60:	463b      	movge	r3, r7
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bfc2      	ittt	gt
 8007b66:	eba8 0803 	subgt.w	r8, r8, r3
 8007b6a:	1aff      	subgt	r7, r7, r3
 8007b6c:	eba9 0903 	subgt.w	r9, r9, r3
 8007b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dd17      	ble.n	8007ba6 <_strtod_l+0x75e>
 8007b76:	4631      	mov	r1, r6
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f001 ff0c 	bl	8009998 <__pow5mult>
 8007b80:	4606      	mov	r6, r0
 8007b82:	2800      	cmp	r0, #0
 8007b84:	f43f aea8 	beq.w	80078d8 <_strtod_l+0x490>
 8007b88:	4601      	mov	r1, r0
 8007b8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f001 fe59 	bl	8009844 <__multiply>
 8007b92:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b94:	2800      	cmp	r0, #0
 8007b96:	f43f ae9f 	beq.w	80078d8 <_strtod_l+0x490>
 8007b9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f001 fd39 	bl	8009614 <_Bfree>
 8007ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ba4:	9318      	str	r3, [sp, #96]	; 0x60
 8007ba6:	f1b8 0f00 	cmp.w	r8, #0
 8007baa:	f300 808c 	bgt.w	8007cc6 <_strtod_l+0x87e>
 8007bae:	9b06      	ldr	r3, [sp, #24]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	dd08      	ble.n	8007bc6 <_strtod_l+0x77e>
 8007bb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bb6:	9905      	ldr	r1, [sp, #20]
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f001 feed 	bl	8009998 <__pow5mult>
 8007bbe:	9005      	str	r0, [sp, #20]
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f43f ae89 	beq.w	80078d8 <_strtod_l+0x490>
 8007bc6:	2f00      	cmp	r7, #0
 8007bc8:	dd08      	ble.n	8007bdc <_strtod_l+0x794>
 8007bca:	9905      	ldr	r1, [sp, #20]
 8007bcc:	463a      	mov	r2, r7
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f001 ff3c 	bl	8009a4c <__lshift>
 8007bd4:	9005      	str	r0, [sp, #20]
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	f43f ae7e 	beq.w	80078d8 <_strtod_l+0x490>
 8007bdc:	f1b9 0f00 	cmp.w	r9, #0
 8007be0:	dd08      	ble.n	8007bf4 <_strtod_l+0x7ac>
 8007be2:	4631      	mov	r1, r6
 8007be4:	464a      	mov	r2, r9
 8007be6:	4620      	mov	r0, r4
 8007be8:	f001 ff30 	bl	8009a4c <__lshift>
 8007bec:	4606      	mov	r6, r0
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f43f ae72 	beq.w	80078d8 <_strtod_l+0x490>
 8007bf4:	9a05      	ldr	r2, [sp, #20]
 8007bf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f001 ffb3 	bl	8009b64 <__mdiff>
 8007bfe:	4605      	mov	r5, r0
 8007c00:	2800      	cmp	r0, #0
 8007c02:	f43f ae69 	beq.w	80078d8 <_strtod_l+0x490>
 8007c06:	68c3      	ldr	r3, [r0, #12]
 8007c08:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60c3      	str	r3, [r0, #12]
 8007c0e:	4631      	mov	r1, r6
 8007c10:	f001 ff8c 	bl	8009b2c <__mcmp>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	da60      	bge.n	8007cda <_strtod_l+0x892>
 8007c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c1a:	ea53 030a 	orrs.w	r3, r3, sl
 8007c1e:	f040 8082 	bne.w	8007d26 <_strtod_l+0x8de>
 8007c22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d17d      	bne.n	8007d26 <_strtod_l+0x8de>
 8007c2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c2e:	0d1b      	lsrs	r3, r3, #20
 8007c30:	051b      	lsls	r3, r3, #20
 8007c32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c36:	d976      	bls.n	8007d26 <_strtod_l+0x8de>
 8007c38:	696b      	ldr	r3, [r5, #20]
 8007c3a:	b913      	cbnz	r3, 8007c42 <_strtod_l+0x7fa>
 8007c3c:	692b      	ldr	r3, [r5, #16]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	dd71      	ble.n	8007d26 <_strtod_l+0x8de>
 8007c42:	4629      	mov	r1, r5
 8007c44:	2201      	movs	r2, #1
 8007c46:	4620      	mov	r0, r4
 8007c48:	f001 ff00 	bl	8009a4c <__lshift>
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4605      	mov	r5, r0
 8007c50:	f001 ff6c 	bl	8009b2c <__mcmp>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	dd66      	ble.n	8007d26 <_strtod_l+0x8de>
 8007c58:	9904      	ldr	r1, [sp, #16]
 8007c5a:	4a53      	ldr	r2, [pc, #332]	; (8007da8 <_strtod_l+0x960>)
 8007c5c:	465b      	mov	r3, fp
 8007c5e:	2900      	cmp	r1, #0
 8007c60:	f000 8081 	beq.w	8007d66 <_strtod_l+0x91e>
 8007c64:	ea02 010b 	and.w	r1, r2, fp
 8007c68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c6c:	dc7b      	bgt.n	8007d66 <_strtod_l+0x91e>
 8007c6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c72:	f77f aea9 	ble.w	80079c8 <_strtod_l+0x580>
 8007c76:	4b4d      	ldr	r3, [pc, #308]	; (8007dac <_strtod_l+0x964>)
 8007c78:	4650      	mov	r0, sl
 8007c7a:	4659      	mov	r1, fp
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f7f8 fccb 	bl	8000618 <__aeabi_dmul>
 8007c82:	460b      	mov	r3, r1
 8007c84:	4303      	orrs	r3, r0
 8007c86:	bf08      	it	eq
 8007c88:	2322      	moveq	r3, #34	; 0x22
 8007c8a:	4682      	mov	sl, r0
 8007c8c:	468b      	mov	fp, r1
 8007c8e:	bf08      	it	eq
 8007c90:	6023      	streq	r3, [r4, #0]
 8007c92:	e62b      	b.n	80078ec <_strtod_l+0x4a4>
 8007c94:	f04f 32ff 	mov.w	r2, #4294967295
 8007c98:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9c:	ea03 0a0a 	and.w	sl, r3, sl
 8007ca0:	e6e3      	b.n	8007a6a <_strtod_l+0x622>
 8007ca2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007ca6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007caa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007cae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007cb2:	fa01 f308 	lsl.w	r3, r1, r8
 8007cb6:	9308      	str	r3, [sp, #32]
 8007cb8:	910d      	str	r1, [sp, #52]	; 0x34
 8007cba:	e746      	b.n	8007b4a <_strtod_l+0x702>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	9308      	str	r3, [sp, #32]
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	930d      	str	r3, [sp, #52]	; 0x34
 8007cc4:	e741      	b.n	8007b4a <_strtod_l+0x702>
 8007cc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cc8:	4642      	mov	r2, r8
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f001 febe 	bl	8009a4c <__lshift>
 8007cd0:	9018      	str	r0, [sp, #96]	; 0x60
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	f47f af6b 	bne.w	8007bae <_strtod_l+0x766>
 8007cd8:	e5fe      	b.n	80078d8 <_strtod_l+0x490>
 8007cda:	465f      	mov	r7, fp
 8007cdc:	d16e      	bne.n	8007dbc <_strtod_l+0x974>
 8007cde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ce0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ce4:	b342      	cbz	r2, 8007d38 <_strtod_l+0x8f0>
 8007ce6:	4a32      	ldr	r2, [pc, #200]	; (8007db0 <_strtod_l+0x968>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d128      	bne.n	8007d3e <_strtod_l+0x8f6>
 8007cec:	9b04      	ldr	r3, [sp, #16]
 8007cee:	4651      	mov	r1, sl
 8007cf0:	b1eb      	cbz	r3, 8007d2e <_strtod_l+0x8e6>
 8007cf2:	4b2d      	ldr	r3, [pc, #180]	; (8007da8 <_strtod_l+0x960>)
 8007cf4:	403b      	ands	r3, r7
 8007cf6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfe:	d819      	bhi.n	8007d34 <_strtod_l+0x8ec>
 8007d00:	0d1b      	lsrs	r3, r3, #20
 8007d02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	4299      	cmp	r1, r3
 8007d0c:	d117      	bne.n	8007d3e <_strtod_l+0x8f6>
 8007d0e:	4b29      	ldr	r3, [pc, #164]	; (8007db4 <_strtod_l+0x96c>)
 8007d10:	429f      	cmp	r7, r3
 8007d12:	d102      	bne.n	8007d1a <_strtod_l+0x8d2>
 8007d14:	3101      	adds	r1, #1
 8007d16:	f43f addf 	beq.w	80078d8 <_strtod_l+0x490>
 8007d1a:	4b23      	ldr	r3, [pc, #140]	; (8007da8 <_strtod_l+0x960>)
 8007d1c:	403b      	ands	r3, r7
 8007d1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007d22:	f04f 0a00 	mov.w	sl, #0
 8007d26:	9b04      	ldr	r3, [sp, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1a4      	bne.n	8007c76 <_strtod_l+0x82e>
 8007d2c:	e5de      	b.n	80078ec <_strtod_l+0x4a4>
 8007d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d32:	e7ea      	b.n	8007d0a <_strtod_l+0x8c2>
 8007d34:	4613      	mov	r3, r2
 8007d36:	e7e8      	b.n	8007d0a <_strtod_l+0x8c2>
 8007d38:	ea53 030a 	orrs.w	r3, r3, sl
 8007d3c:	d08c      	beq.n	8007c58 <_strtod_l+0x810>
 8007d3e:	9b08      	ldr	r3, [sp, #32]
 8007d40:	b1db      	cbz	r3, 8007d7a <_strtod_l+0x932>
 8007d42:	423b      	tst	r3, r7
 8007d44:	d0ef      	beq.n	8007d26 <_strtod_l+0x8de>
 8007d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d48:	9a04      	ldr	r2, [sp, #16]
 8007d4a:	4650      	mov	r0, sl
 8007d4c:	4659      	mov	r1, fp
 8007d4e:	b1c3      	cbz	r3, 8007d82 <_strtod_l+0x93a>
 8007d50:	f7ff fb5c 	bl	800740c <sulp>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	ec51 0b18 	vmov	r0, r1, d8
 8007d5c:	f7f8 faa6 	bl	80002ac <__adddf3>
 8007d60:	4682      	mov	sl, r0
 8007d62:	468b      	mov	fp, r1
 8007d64:	e7df      	b.n	8007d26 <_strtod_l+0x8de>
 8007d66:	4013      	ands	r3, r2
 8007d68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007d6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007d70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007d74:	f04f 3aff 	mov.w	sl, #4294967295
 8007d78:	e7d5      	b.n	8007d26 <_strtod_l+0x8de>
 8007d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d7c:	ea13 0f0a 	tst.w	r3, sl
 8007d80:	e7e0      	b.n	8007d44 <_strtod_l+0x8fc>
 8007d82:	f7ff fb43 	bl	800740c <sulp>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	ec51 0b18 	vmov	r0, r1, d8
 8007d8e:	f7f8 fa8b 	bl	80002a8 <__aeabi_dsub>
 8007d92:	2200      	movs	r2, #0
 8007d94:	2300      	movs	r3, #0
 8007d96:	4682      	mov	sl, r0
 8007d98:	468b      	mov	fp, r1
 8007d9a:	f7f8 fea5 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	d0c1      	beq.n	8007d26 <_strtod_l+0x8de>
 8007da2:	e611      	b.n	80079c8 <_strtod_l+0x580>
 8007da4:	fffffc02 	.word	0xfffffc02
 8007da8:	7ff00000 	.word	0x7ff00000
 8007dac:	39500000 	.word	0x39500000
 8007db0:	000fffff 	.word	0x000fffff
 8007db4:	7fefffff 	.word	0x7fefffff
 8007db8:	0800b078 	.word	0x0800b078
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f002 f832 	bl	8009e28 <__ratio>
 8007dc4:	ec59 8b10 	vmov	r8, r9, d0
 8007dc8:	ee10 0a10 	vmov	r0, s0
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	f7f8 fe9c 	bl	8000b10 <__aeabi_dcmple>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d07a      	beq.n	8007ed2 <_strtod_l+0xa8a>
 8007ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d04a      	beq.n	8007e78 <_strtod_l+0xa30>
 8007de2:	4b95      	ldr	r3, [pc, #596]	; (8008038 <_strtod_l+0xbf0>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007dea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008038 <_strtod_l+0xbf0>
 8007dee:	f04f 0800 	mov.w	r8, #0
 8007df2:	4b92      	ldr	r3, [pc, #584]	; (800803c <_strtod_l+0xbf4>)
 8007df4:	403b      	ands	r3, r7
 8007df6:	930d      	str	r3, [sp, #52]	; 0x34
 8007df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dfa:	4b91      	ldr	r3, [pc, #580]	; (8008040 <_strtod_l+0xbf8>)
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	f040 80b0 	bne.w	8007f62 <_strtod_l+0xb1a>
 8007e02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e06:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007e0a:	ec4b ab10 	vmov	d0, sl, fp
 8007e0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e12:	f001 ff31 	bl	8009c78 <__ulp>
 8007e16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e1a:	ec53 2b10 	vmov	r2, r3, d0
 8007e1e:	f7f8 fbfb 	bl	8000618 <__aeabi_dmul>
 8007e22:	4652      	mov	r2, sl
 8007e24:	465b      	mov	r3, fp
 8007e26:	f7f8 fa41 	bl	80002ac <__adddf3>
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4983      	ldr	r1, [pc, #524]	; (800803c <_strtod_l+0xbf4>)
 8007e2e:	4a85      	ldr	r2, [pc, #532]	; (8008044 <_strtod_l+0xbfc>)
 8007e30:	4019      	ands	r1, r3
 8007e32:	4291      	cmp	r1, r2
 8007e34:	4682      	mov	sl, r0
 8007e36:	d960      	bls.n	8007efa <_strtod_l+0xab2>
 8007e38:	ee18 3a90 	vmov	r3, s17
 8007e3c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d104      	bne.n	8007e4e <_strtod_l+0xa06>
 8007e44:	ee18 3a10 	vmov	r3, s16
 8007e48:	3301      	adds	r3, #1
 8007e4a:	f43f ad45 	beq.w	80078d8 <_strtod_l+0x490>
 8007e4e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008050 <_strtod_l+0xc08>
 8007e52:	f04f 3aff 	mov.w	sl, #4294967295
 8007e56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f001 fbdb 	bl	8009614 <_Bfree>
 8007e5e:	9905      	ldr	r1, [sp, #20]
 8007e60:	4620      	mov	r0, r4
 8007e62:	f001 fbd7 	bl	8009614 <_Bfree>
 8007e66:	4631      	mov	r1, r6
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f001 fbd3 	bl	8009614 <_Bfree>
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4620      	mov	r0, r4
 8007e72:	f001 fbcf 	bl	8009614 <_Bfree>
 8007e76:	e61a      	b.n	8007aae <_strtod_l+0x666>
 8007e78:	f1ba 0f00 	cmp.w	sl, #0
 8007e7c:	d11b      	bne.n	8007eb6 <_strtod_l+0xa6e>
 8007e7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e82:	b9f3      	cbnz	r3, 8007ec2 <_strtod_l+0xa7a>
 8007e84:	4b6c      	ldr	r3, [pc, #432]	; (8008038 <_strtod_l+0xbf0>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	4640      	mov	r0, r8
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	f7f8 fe36 	bl	8000afc <__aeabi_dcmplt>
 8007e90:	b9d0      	cbnz	r0, 8007ec8 <_strtod_l+0xa80>
 8007e92:	4640      	mov	r0, r8
 8007e94:	4649      	mov	r1, r9
 8007e96:	4b6c      	ldr	r3, [pc, #432]	; (8008048 <_strtod_l+0xc00>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f7f8 fbbd 	bl	8000618 <__aeabi_dmul>
 8007e9e:	4680      	mov	r8, r0
 8007ea0:	4689      	mov	r9, r1
 8007ea2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007ea6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007eaa:	9315      	str	r3, [sp, #84]	; 0x54
 8007eac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007eb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007eb4:	e79d      	b.n	8007df2 <_strtod_l+0x9aa>
 8007eb6:	f1ba 0f01 	cmp.w	sl, #1
 8007eba:	d102      	bne.n	8007ec2 <_strtod_l+0xa7a>
 8007ebc:	2f00      	cmp	r7, #0
 8007ebe:	f43f ad83 	beq.w	80079c8 <_strtod_l+0x580>
 8007ec2:	4b62      	ldr	r3, [pc, #392]	; (800804c <_strtod_l+0xc04>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	e78e      	b.n	8007de6 <_strtod_l+0x99e>
 8007ec8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008048 <_strtod_l+0xc00>
 8007ecc:	f04f 0800 	mov.w	r8, #0
 8007ed0:	e7e7      	b.n	8007ea2 <_strtod_l+0xa5a>
 8007ed2:	4b5d      	ldr	r3, [pc, #372]	; (8008048 <_strtod_l+0xc00>)
 8007ed4:	4640      	mov	r0, r8
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f7f8 fb9d 	bl	8000618 <__aeabi_dmul>
 8007ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ee0:	4680      	mov	r8, r0
 8007ee2:	4689      	mov	r9, r1
 8007ee4:	b933      	cbnz	r3, 8007ef4 <_strtod_l+0xaac>
 8007ee6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007eea:	900e      	str	r0, [sp, #56]	; 0x38
 8007eec:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007ef2:	e7dd      	b.n	8007eb0 <_strtod_l+0xa68>
 8007ef4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007ef8:	e7f9      	b.n	8007eee <_strtod_l+0xaa6>
 8007efa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007efe:	9b04      	ldr	r3, [sp, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1a8      	bne.n	8007e56 <_strtod_l+0xa0e>
 8007f04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f0a:	0d1b      	lsrs	r3, r3, #20
 8007f0c:	051b      	lsls	r3, r3, #20
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d1a1      	bne.n	8007e56 <_strtod_l+0xa0e>
 8007f12:	4640      	mov	r0, r8
 8007f14:	4649      	mov	r1, r9
 8007f16:	f7f8 fedf 	bl	8000cd8 <__aeabi_d2lz>
 8007f1a:	f7f8 fb4f 	bl	80005bc <__aeabi_l2d>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4640      	mov	r0, r8
 8007f24:	4649      	mov	r1, r9
 8007f26:	f7f8 f9bf 	bl	80002a8 <__aeabi_dsub>
 8007f2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f30:	ea43 030a 	orr.w	r3, r3, sl
 8007f34:	4313      	orrs	r3, r2
 8007f36:	4680      	mov	r8, r0
 8007f38:	4689      	mov	r9, r1
 8007f3a:	d055      	beq.n	8007fe8 <_strtod_l+0xba0>
 8007f3c:	a336      	add	r3, pc, #216	; (adr r3, 8008018 <_strtod_l+0xbd0>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	f7f8 fddb 	bl	8000afc <__aeabi_dcmplt>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	f47f acd0 	bne.w	80078ec <_strtod_l+0x4a4>
 8007f4c:	a334      	add	r3, pc, #208	; (adr r3, 8008020 <_strtod_l+0xbd8>)
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	4640      	mov	r0, r8
 8007f54:	4649      	mov	r1, r9
 8007f56:	f7f8 fdef 	bl	8000b38 <__aeabi_dcmpgt>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	f43f af7b 	beq.w	8007e56 <_strtod_l+0xa0e>
 8007f60:	e4c4      	b.n	80078ec <_strtod_l+0x4a4>
 8007f62:	9b04      	ldr	r3, [sp, #16]
 8007f64:	b333      	cbz	r3, 8007fb4 <_strtod_l+0xb6c>
 8007f66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f6c:	d822      	bhi.n	8007fb4 <_strtod_l+0xb6c>
 8007f6e:	a32e      	add	r3, pc, #184	; (adr r3, 8008028 <_strtod_l+0xbe0>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	4640      	mov	r0, r8
 8007f76:	4649      	mov	r1, r9
 8007f78:	f7f8 fdca 	bl	8000b10 <__aeabi_dcmple>
 8007f7c:	b1a0      	cbz	r0, 8007fa8 <_strtod_l+0xb60>
 8007f7e:	4649      	mov	r1, r9
 8007f80:	4640      	mov	r0, r8
 8007f82:	f7f8 fe21 	bl	8000bc8 <__aeabi_d2uiz>
 8007f86:	2801      	cmp	r0, #1
 8007f88:	bf38      	it	cc
 8007f8a:	2001      	movcc	r0, #1
 8007f8c:	f7f8 faca 	bl	8000524 <__aeabi_ui2d>
 8007f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f92:	4680      	mov	r8, r0
 8007f94:	4689      	mov	r9, r1
 8007f96:	bb23      	cbnz	r3, 8007fe2 <_strtod_l+0xb9a>
 8007f98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f9c:	9010      	str	r0, [sp, #64]	; 0x40
 8007f9e:	9311      	str	r3, [sp, #68]	; 0x44
 8007fa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fa4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007faa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007fb0:	1a9b      	subs	r3, r3, r2
 8007fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fb8:	eeb0 0a48 	vmov.f32	s0, s16
 8007fbc:	eef0 0a68 	vmov.f32	s1, s17
 8007fc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007fc4:	f001 fe58 	bl	8009c78 <__ulp>
 8007fc8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fcc:	ec53 2b10 	vmov	r2, r3, d0
 8007fd0:	f7f8 fb22 	bl	8000618 <__aeabi_dmul>
 8007fd4:	ec53 2b18 	vmov	r2, r3, d8
 8007fd8:	f7f8 f968 	bl	80002ac <__adddf3>
 8007fdc:	4682      	mov	sl, r0
 8007fde:	468b      	mov	fp, r1
 8007fe0:	e78d      	b.n	8007efe <_strtod_l+0xab6>
 8007fe2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007fe6:	e7db      	b.n	8007fa0 <_strtod_l+0xb58>
 8007fe8:	a311      	add	r3, pc, #68	; (adr r3, 8008030 <_strtod_l+0xbe8>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f7f8 fd85 	bl	8000afc <__aeabi_dcmplt>
 8007ff2:	e7b2      	b.n	8007f5a <_strtod_l+0xb12>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ffa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	f7ff ba6b 	b.w	80074d8 <_strtod_l+0x90>
 8008002:	2a65      	cmp	r2, #101	; 0x65
 8008004:	f43f ab5f 	beq.w	80076c6 <_strtod_l+0x27e>
 8008008:	2a45      	cmp	r2, #69	; 0x45
 800800a:	f43f ab5c 	beq.w	80076c6 <_strtod_l+0x27e>
 800800e:	2301      	movs	r3, #1
 8008010:	f7ff bb94 	b.w	800773c <_strtod_l+0x2f4>
 8008014:	f3af 8000 	nop.w
 8008018:	94a03595 	.word	0x94a03595
 800801c:	3fdfffff 	.word	0x3fdfffff
 8008020:	35afe535 	.word	0x35afe535
 8008024:	3fe00000 	.word	0x3fe00000
 8008028:	ffc00000 	.word	0xffc00000
 800802c:	41dfffff 	.word	0x41dfffff
 8008030:	94a03595 	.word	0x94a03595
 8008034:	3fcfffff 	.word	0x3fcfffff
 8008038:	3ff00000 	.word	0x3ff00000
 800803c:	7ff00000 	.word	0x7ff00000
 8008040:	7fe00000 	.word	0x7fe00000
 8008044:	7c9fffff 	.word	0x7c9fffff
 8008048:	3fe00000 	.word	0x3fe00000
 800804c:	bff00000 	.word	0xbff00000
 8008050:	7fefffff 	.word	0x7fefffff

08008054 <_strtod_r>:
 8008054:	4b01      	ldr	r3, [pc, #4]	; (800805c <_strtod_r+0x8>)
 8008056:	f7ff b9f7 	b.w	8007448 <_strtod_l>
 800805a:	bf00      	nop
 800805c:	20000088 	.word	0x20000088

08008060 <_strtol_l.constprop.0>:
 8008060:	2b01      	cmp	r3, #1
 8008062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008066:	d001      	beq.n	800806c <_strtol_l.constprop.0+0xc>
 8008068:	2b24      	cmp	r3, #36	; 0x24
 800806a:	d906      	bls.n	800807a <_strtol_l.constprop.0+0x1a>
 800806c:	f7fe fafc 	bl	8006668 <__errno>
 8008070:	2316      	movs	r3, #22
 8008072:	6003      	str	r3, [r0, #0]
 8008074:	2000      	movs	r0, #0
 8008076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800807a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008160 <_strtol_l.constprop.0+0x100>
 800807e:	460d      	mov	r5, r1
 8008080:	462e      	mov	r6, r5
 8008082:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008086:	f814 700c 	ldrb.w	r7, [r4, ip]
 800808a:	f017 0708 	ands.w	r7, r7, #8
 800808e:	d1f7      	bne.n	8008080 <_strtol_l.constprop.0+0x20>
 8008090:	2c2d      	cmp	r4, #45	; 0x2d
 8008092:	d132      	bne.n	80080fa <_strtol_l.constprop.0+0x9a>
 8008094:	782c      	ldrb	r4, [r5, #0]
 8008096:	2701      	movs	r7, #1
 8008098:	1cb5      	adds	r5, r6, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d05b      	beq.n	8008156 <_strtol_l.constprop.0+0xf6>
 800809e:	2b10      	cmp	r3, #16
 80080a0:	d109      	bne.n	80080b6 <_strtol_l.constprop.0+0x56>
 80080a2:	2c30      	cmp	r4, #48	; 0x30
 80080a4:	d107      	bne.n	80080b6 <_strtol_l.constprop.0+0x56>
 80080a6:	782c      	ldrb	r4, [r5, #0]
 80080a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80080ac:	2c58      	cmp	r4, #88	; 0x58
 80080ae:	d14d      	bne.n	800814c <_strtol_l.constprop.0+0xec>
 80080b0:	786c      	ldrb	r4, [r5, #1]
 80080b2:	2310      	movs	r3, #16
 80080b4:	3502      	adds	r5, #2
 80080b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80080ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80080be:	f04f 0c00 	mov.w	ip, #0
 80080c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80080c6:	4666      	mov	r6, ip
 80080c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80080cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80080d0:	f1be 0f09 	cmp.w	lr, #9
 80080d4:	d816      	bhi.n	8008104 <_strtol_l.constprop.0+0xa4>
 80080d6:	4674      	mov	r4, lr
 80080d8:	42a3      	cmp	r3, r4
 80080da:	dd24      	ble.n	8008126 <_strtol_l.constprop.0+0xc6>
 80080dc:	f1bc 0f00 	cmp.w	ip, #0
 80080e0:	db1e      	blt.n	8008120 <_strtol_l.constprop.0+0xc0>
 80080e2:	45b1      	cmp	r9, r6
 80080e4:	d31c      	bcc.n	8008120 <_strtol_l.constprop.0+0xc0>
 80080e6:	d101      	bne.n	80080ec <_strtol_l.constprop.0+0x8c>
 80080e8:	45a2      	cmp	sl, r4
 80080ea:	db19      	blt.n	8008120 <_strtol_l.constprop.0+0xc0>
 80080ec:	fb06 4603 	mla	r6, r6, r3, r4
 80080f0:	f04f 0c01 	mov.w	ip, #1
 80080f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080f8:	e7e8      	b.n	80080cc <_strtol_l.constprop.0+0x6c>
 80080fa:	2c2b      	cmp	r4, #43	; 0x2b
 80080fc:	bf04      	itt	eq
 80080fe:	782c      	ldrbeq	r4, [r5, #0]
 8008100:	1cb5      	addeq	r5, r6, #2
 8008102:	e7ca      	b.n	800809a <_strtol_l.constprop.0+0x3a>
 8008104:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008108:	f1be 0f19 	cmp.w	lr, #25
 800810c:	d801      	bhi.n	8008112 <_strtol_l.constprop.0+0xb2>
 800810e:	3c37      	subs	r4, #55	; 0x37
 8008110:	e7e2      	b.n	80080d8 <_strtol_l.constprop.0+0x78>
 8008112:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008116:	f1be 0f19 	cmp.w	lr, #25
 800811a:	d804      	bhi.n	8008126 <_strtol_l.constprop.0+0xc6>
 800811c:	3c57      	subs	r4, #87	; 0x57
 800811e:	e7db      	b.n	80080d8 <_strtol_l.constprop.0+0x78>
 8008120:	f04f 3cff 	mov.w	ip, #4294967295
 8008124:	e7e6      	b.n	80080f4 <_strtol_l.constprop.0+0x94>
 8008126:	f1bc 0f00 	cmp.w	ip, #0
 800812a:	da05      	bge.n	8008138 <_strtol_l.constprop.0+0xd8>
 800812c:	2322      	movs	r3, #34	; 0x22
 800812e:	6003      	str	r3, [r0, #0]
 8008130:	4646      	mov	r6, r8
 8008132:	b942      	cbnz	r2, 8008146 <_strtol_l.constprop.0+0xe6>
 8008134:	4630      	mov	r0, r6
 8008136:	e79e      	b.n	8008076 <_strtol_l.constprop.0+0x16>
 8008138:	b107      	cbz	r7, 800813c <_strtol_l.constprop.0+0xdc>
 800813a:	4276      	negs	r6, r6
 800813c:	2a00      	cmp	r2, #0
 800813e:	d0f9      	beq.n	8008134 <_strtol_l.constprop.0+0xd4>
 8008140:	f1bc 0f00 	cmp.w	ip, #0
 8008144:	d000      	beq.n	8008148 <_strtol_l.constprop.0+0xe8>
 8008146:	1e69      	subs	r1, r5, #1
 8008148:	6011      	str	r1, [r2, #0]
 800814a:	e7f3      	b.n	8008134 <_strtol_l.constprop.0+0xd4>
 800814c:	2430      	movs	r4, #48	; 0x30
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1b1      	bne.n	80080b6 <_strtol_l.constprop.0+0x56>
 8008152:	2308      	movs	r3, #8
 8008154:	e7af      	b.n	80080b6 <_strtol_l.constprop.0+0x56>
 8008156:	2c30      	cmp	r4, #48	; 0x30
 8008158:	d0a5      	beq.n	80080a6 <_strtol_l.constprop.0+0x46>
 800815a:	230a      	movs	r3, #10
 800815c:	e7ab      	b.n	80080b6 <_strtol_l.constprop.0+0x56>
 800815e:	bf00      	nop
 8008160:	0800b0a1 	.word	0x0800b0a1

08008164 <_strtol_r>:
 8008164:	f7ff bf7c 	b.w	8008060 <_strtol_l.constprop.0>

08008168 <quorem>:
 8008168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	6903      	ldr	r3, [r0, #16]
 800816e:	690c      	ldr	r4, [r1, #16]
 8008170:	42a3      	cmp	r3, r4
 8008172:	4607      	mov	r7, r0
 8008174:	f2c0 8081 	blt.w	800827a <quorem+0x112>
 8008178:	3c01      	subs	r4, #1
 800817a:	f101 0814 	add.w	r8, r1, #20
 800817e:	f100 0514 	add.w	r5, r0, #20
 8008182:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800818c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008190:	3301      	adds	r3, #1
 8008192:	429a      	cmp	r2, r3
 8008194:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008198:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800819c:	fbb2 f6f3 	udiv	r6, r2, r3
 80081a0:	d331      	bcc.n	8008206 <quorem+0x9e>
 80081a2:	f04f 0e00 	mov.w	lr, #0
 80081a6:	4640      	mov	r0, r8
 80081a8:	46ac      	mov	ip, r5
 80081aa:	46f2      	mov	sl, lr
 80081ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80081b0:	b293      	uxth	r3, r2
 80081b2:	fb06 e303 	mla	r3, r6, r3, lr
 80081b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	ebaa 0303 	sub.w	r3, sl, r3
 80081c0:	f8dc a000 	ldr.w	sl, [ip]
 80081c4:	0c12      	lsrs	r2, r2, #16
 80081c6:	fa13 f38a 	uxtah	r3, r3, sl
 80081ca:	fb06 e202 	mla	r2, r6, r2, lr
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	9b00      	ldr	r3, [sp, #0]
 80081d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081d6:	b292      	uxth	r2, r2
 80081d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80081dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80081e4:	4581      	cmp	r9, r0
 80081e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081ea:	f84c 3b04 	str.w	r3, [ip], #4
 80081ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081f2:	d2db      	bcs.n	80081ac <quorem+0x44>
 80081f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80081f8:	b92b      	cbnz	r3, 8008206 <quorem+0x9e>
 80081fa:	9b01      	ldr	r3, [sp, #4]
 80081fc:	3b04      	subs	r3, #4
 80081fe:	429d      	cmp	r5, r3
 8008200:	461a      	mov	r2, r3
 8008202:	d32e      	bcc.n	8008262 <quorem+0xfa>
 8008204:	613c      	str	r4, [r7, #16]
 8008206:	4638      	mov	r0, r7
 8008208:	f001 fc90 	bl	8009b2c <__mcmp>
 800820c:	2800      	cmp	r0, #0
 800820e:	db24      	blt.n	800825a <quorem+0xf2>
 8008210:	3601      	adds	r6, #1
 8008212:	4628      	mov	r0, r5
 8008214:	f04f 0c00 	mov.w	ip, #0
 8008218:	f858 2b04 	ldr.w	r2, [r8], #4
 800821c:	f8d0 e000 	ldr.w	lr, [r0]
 8008220:	b293      	uxth	r3, r2
 8008222:	ebac 0303 	sub.w	r3, ip, r3
 8008226:	0c12      	lsrs	r2, r2, #16
 8008228:	fa13 f38e 	uxtah	r3, r3, lr
 800822c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008234:	b29b      	uxth	r3, r3
 8008236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800823a:	45c1      	cmp	r9, r8
 800823c:	f840 3b04 	str.w	r3, [r0], #4
 8008240:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008244:	d2e8      	bcs.n	8008218 <quorem+0xb0>
 8008246:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800824a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800824e:	b922      	cbnz	r2, 800825a <quorem+0xf2>
 8008250:	3b04      	subs	r3, #4
 8008252:	429d      	cmp	r5, r3
 8008254:	461a      	mov	r2, r3
 8008256:	d30a      	bcc.n	800826e <quorem+0x106>
 8008258:	613c      	str	r4, [r7, #16]
 800825a:	4630      	mov	r0, r6
 800825c:	b003      	add	sp, #12
 800825e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008262:	6812      	ldr	r2, [r2, #0]
 8008264:	3b04      	subs	r3, #4
 8008266:	2a00      	cmp	r2, #0
 8008268:	d1cc      	bne.n	8008204 <quorem+0x9c>
 800826a:	3c01      	subs	r4, #1
 800826c:	e7c7      	b.n	80081fe <quorem+0x96>
 800826e:	6812      	ldr	r2, [r2, #0]
 8008270:	3b04      	subs	r3, #4
 8008272:	2a00      	cmp	r2, #0
 8008274:	d1f0      	bne.n	8008258 <quorem+0xf0>
 8008276:	3c01      	subs	r4, #1
 8008278:	e7eb      	b.n	8008252 <quorem+0xea>
 800827a:	2000      	movs	r0, #0
 800827c:	e7ee      	b.n	800825c <quorem+0xf4>
	...

08008280 <_dtoa_r>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	ed2d 8b04 	vpush	{d8-d9}
 8008288:	ec57 6b10 	vmov	r6, r7, d0
 800828c:	b093      	sub	sp, #76	; 0x4c
 800828e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008290:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008294:	9106      	str	r1, [sp, #24]
 8008296:	ee10 aa10 	vmov	sl, s0
 800829a:	4604      	mov	r4, r0
 800829c:	9209      	str	r2, [sp, #36]	; 0x24
 800829e:	930c      	str	r3, [sp, #48]	; 0x30
 80082a0:	46bb      	mov	fp, r7
 80082a2:	b975      	cbnz	r5, 80082c2 <_dtoa_r+0x42>
 80082a4:	2010      	movs	r0, #16
 80082a6:	f001 f94d 	bl	8009544 <malloc>
 80082aa:	4602      	mov	r2, r0
 80082ac:	6260      	str	r0, [r4, #36]	; 0x24
 80082ae:	b920      	cbnz	r0, 80082ba <_dtoa_r+0x3a>
 80082b0:	4ba7      	ldr	r3, [pc, #668]	; (8008550 <_dtoa_r+0x2d0>)
 80082b2:	21ea      	movs	r1, #234	; 0xea
 80082b4:	48a7      	ldr	r0, [pc, #668]	; (8008554 <_dtoa_r+0x2d4>)
 80082b6:	f002 f8bd 	bl	800a434 <__assert_func>
 80082ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082be:	6005      	str	r5, [r0, #0]
 80082c0:	60c5      	str	r5, [r0, #12]
 80082c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082c4:	6819      	ldr	r1, [r3, #0]
 80082c6:	b151      	cbz	r1, 80082de <_dtoa_r+0x5e>
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	604a      	str	r2, [r1, #4]
 80082cc:	2301      	movs	r3, #1
 80082ce:	4093      	lsls	r3, r2
 80082d0:	608b      	str	r3, [r1, #8]
 80082d2:	4620      	mov	r0, r4
 80082d4:	f001 f99e 	bl	8009614 <_Bfree>
 80082d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	1e3b      	subs	r3, r7, #0
 80082e0:	bfaa      	itet	ge
 80082e2:	2300      	movge	r3, #0
 80082e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80082e8:	f8c8 3000 	strge.w	r3, [r8]
 80082ec:	4b9a      	ldr	r3, [pc, #616]	; (8008558 <_dtoa_r+0x2d8>)
 80082ee:	bfbc      	itt	lt
 80082f0:	2201      	movlt	r2, #1
 80082f2:	f8c8 2000 	strlt.w	r2, [r8]
 80082f6:	ea33 030b 	bics.w	r3, r3, fp
 80082fa:	d11b      	bne.n	8008334 <_dtoa_r+0xb4>
 80082fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008308:	4333      	orrs	r3, r6
 800830a:	f000 8592 	beq.w	8008e32 <_dtoa_r+0xbb2>
 800830e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008310:	b963      	cbnz	r3, 800832c <_dtoa_r+0xac>
 8008312:	4b92      	ldr	r3, [pc, #584]	; (800855c <_dtoa_r+0x2dc>)
 8008314:	e022      	b.n	800835c <_dtoa_r+0xdc>
 8008316:	4b92      	ldr	r3, [pc, #584]	; (8008560 <_dtoa_r+0x2e0>)
 8008318:	9301      	str	r3, [sp, #4]
 800831a:	3308      	adds	r3, #8
 800831c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	9801      	ldr	r0, [sp, #4]
 8008322:	b013      	add	sp, #76	; 0x4c
 8008324:	ecbd 8b04 	vpop	{d8-d9}
 8008328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832c:	4b8b      	ldr	r3, [pc, #556]	; (800855c <_dtoa_r+0x2dc>)
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	3303      	adds	r3, #3
 8008332:	e7f3      	b.n	800831c <_dtoa_r+0x9c>
 8008334:	2200      	movs	r2, #0
 8008336:	2300      	movs	r3, #0
 8008338:	4650      	mov	r0, sl
 800833a:	4659      	mov	r1, fp
 800833c:	f7f8 fbd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8008340:	ec4b ab19 	vmov	d9, sl, fp
 8008344:	4680      	mov	r8, r0
 8008346:	b158      	cbz	r0, 8008360 <_dtoa_r+0xe0>
 8008348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800834a:	2301      	movs	r3, #1
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 856b 	beq.w	8008e2c <_dtoa_r+0xbac>
 8008356:	4883      	ldr	r0, [pc, #524]	; (8008564 <_dtoa_r+0x2e4>)
 8008358:	6018      	str	r0, [r3, #0]
 800835a:	1e43      	subs	r3, r0, #1
 800835c:	9301      	str	r3, [sp, #4]
 800835e:	e7df      	b.n	8008320 <_dtoa_r+0xa0>
 8008360:	ec4b ab10 	vmov	d0, sl, fp
 8008364:	aa10      	add	r2, sp, #64	; 0x40
 8008366:	a911      	add	r1, sp, #68	; 0x44
 8008368:	4620      	mov	r0, r4
 800836a:	f001 fd01 	bl	8009d70 <__d2b>
 800836e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008372:	ee08 0a10 	vmov	s16, r0
 8008376:	2d00      	cmp	r5, #0
 8008378:	f000 8084 	beq.w	8008484 <_dtoa_r+0x204>
 800837c:	ee19 3a90 	vmov	r3, s19
 8008380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008384:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008388:	4656      	mov	r6, sl
 800838a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800838e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008392:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008396:	4b74      	ldr	r3, [pc, #464]	; (8008568 <_dtoa_r+0x2e8>)
 8008398:	2200      	movs	r2, #0
 800839a:	4630      	mov	r0, r6
 800839c:	4639      	mov	r1, r7
 800839e:	f7f7 ff83 	bl	80002a8 <__aeabi_dsub>
 80083a2:	a365      	add	r3, pc, #404	; (adr r3, 8008538 <_dtoa_r+0x2b8>)
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	f7f8 f936 	bl	8000618 <__aeabi_dmul>
 80083ac:	a364      	add	r3, pc, #400	; (adr r3, 8008540 <_dtoa_r+0x2c0>)
 80083ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b2:	f7f7 ff7b 	bl	80002ac <__adddf3>
 80083b6:	4606      	mov	r6, r0
 80083b8:	4628      	mov	r0, r5
 80083ba:	460f      	mov	r7, r1
 80083bc:	f7f8 f8c2 	bl	8000544 <__aeabi_i2d>
 80083c0:	a361      	add	r3, pc, #388	; (adr r3, 8008548 <_dtoa_r+0x2c8>)
 80083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c6:	f7f8 f927 	bl	8000618 <__aeabi_dmul>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4630      	mov	r0, r6
 80083d0:	4639      	mov	r1, r7
 80083d2:	f7f7 ff6b 	bl	80002ac <__adddf3>
 80083d6:	4606      	mov	r6, r0
 80083d8:	460f      	mov	r7, r1
 80083da:	f7f8 fbcd 	bl	8000b78 <__aeabi_d2iz>
 80083de:	2200      	movs	r2, #0
 80083e0:	9000      	str	r0, [sp, #0]
 80083e2:	2300      	movs	r3, #0
 80083e4:	4630      	mov	r0, r6
 80083e6:	4639      	mov	r1, r7
 80083e8:	f7f8 fb88 	bl	8000afc <__aeabi_dcmplt>
 80083ec:	b150      	cbz	r0, 8008404 <_dtoa_r+0x184>
 80083ee:	9800      	ldr	r0, [sp, #0]
 80083f0:	f7f8 f8a8 	bl	8000544 <__aeabi_i2d>
 80083f4:	4632      	mov	r2, r6
 80083f6:	463b      	mov	r3, r7
 80083f8:	f7f8 fb76 	bl	8000ae8 <__aeabi_dcmpeq>
 80083fc:	b910      	cbnz	r0, 8008404 <_dtoa_r+0x184>
 80083fe:	9b00      	ldr	r3, [sp, #0]
 8008400:	3b01      	subs	r3, #1
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	9b00      	ldr	r3, [sp, #0]
 8008406:	2b16      	cmp	r3, #22
 8008408:	d85a      	bhi.n	80084c0 <_dtoa_r+0x240>
 800840a:	9a00      	ldr	r2, [sp, #0]
 800840c:	4b57      	ldr	r3, [pc, #348]	; (800856c <_dtoa_r+0x2ec>)
 800840e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	ec51 0b19 	vmov	r0, r1, d9
 800841a:	f7f8 fb6f 	bl	8000afc <__aeabi_dcmplt>
 800841e:	2800      	cmp	r0, #0
 8008420:	d050      	beq.n	80084c4 <_dtoa_r+0x244>
 8008422:	9b00      	ldr	r3, [sp, #0]
 8008424:	3b01      	subs	r3, #1
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	2300      	movs	r3, #0
 800842a:	930b      	str	r3, [sp, #44]	; 0x2c
 800842c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800842e:	1b5d      	subs	r5, r3, r5
 8008430:	1e6b      	subs	r3, r5, #1
 8008432:	9305      	str	r3, [sp, #20]
 8008434:	bf45      	ittet	mi
 8008436:	f1c5 0301 	rsbmi	r3, r5, #1
 800843a:	9304      	strmi	r3, [sp, #16]
 800843c:	2300      	movpl	r3, #0
 800843e:	2300      	movmi	r3, #0
 8008440:	bf4c      	ite	mi
 8008442:	9305      	strmi	r3, [sp, #20]
 8008444:	9304      	strpl	r3, [sp, #16]
 8008446:	9b00      	ldr	r3, [sp, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	db3d      	blt.n	80084c8 <_dtoa_r+0x248>
 800844c:	9b05      	ldr	r3, [sp, #20]
 800844e:	9a00      	ldr	r2, [sp, #0]
 8008450:	920a      	str	r2, [sp, #40]	; 0x28
 8008452:	4413      	add	r3, r2
 8008454:	9305      	str	r3, [sp, #20]
 8008456:	2300      	movs	r3, #0
 8008458:	9307      	str	r3, [sp, #28]
 800845a:	9b06      	ldr	r3, [sp, #24]
 800845c:	2b09      	cmp	r3, #9
 800845e:	f200 8089 	bhi.w	8008574 <_dtoa_r+0x2f4>
 8008462:	2b05      	cmp	r3, #5
 8008464:	bfc4      	itt	gt
 8008466:	3b04      	subgt	r3, #4
 8008468:	9306      	strgt	r3, [sp, #24]
 800846a:	9b06      	ldr	r3, [sp, #24]
 800846c:	f1a3 0302 	sub.w	r3, r3, #2
 8008470:	bfcc      	ite	gt
 8008472:	2500      	movgt	r5, #0
 8008474:	2501      	movle	r5, #1
 8008476:	2b03      	cmp	r3, #3
 8008478:	f200 8087 	bhi.w	800858a <_dtoa_r+0x30a>
 800847c:	e8df f003 	tbb	[pc, r3]
 8008480:	59383a2d 	.word	0x59383a2d
 8008484:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008488:	441d      	add	r5, r3
 800848a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800848e:	2b20      	cmp	r3, #32
 8008490:	bfc1      	itttt	gt
 8008492:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008496:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800849a:	fa0b f303 	lslgt.w	r3, fp, r3
 800849e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80084a2:	bfda      	itte	le
 80084a4:	f1c3 0320 	rsble	r3, r3, #32
 80084a8:	fa06 f003 	lslle.w	r0, r6, r3
 80084ac:	4318      	orrgt	r0, r3
 80084ae:	f7f8 f839 	bl	8000524 <__aeabi_ui2d>
 80084b2:	2301      	movs	r3, #1
 80084b4:	4606      	mov	r6, r0
 80084b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80084ba:	3d01      	subs	r5, #1
 80084bc:	930e      	str	r3, [sp, #56]	; 0x38
 80084be:	e76a      	b.n	8008396 <_dtoa_r+0x116>
 80084c0:	2301      	movs	r3, #1
 80084c2:	e7b2      	b.n	800842a <_dtoa_r+0x1aa>
 80084c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80084c6:	e7b1      	b.n	800842c <_dtoa_r+0x1ac>
 80084c8:	9b04      	ldr	r3, [sp, #16]
 80084ca:	9a00      	ldr	r2, [sp, #0]
 80084cc:	1a9b      	subs	r3, r3, r2
 80084ce:	9304      	str	r3, [sp, #16]
 80084d0:	4253      	negs	r3, r2
 80084d2:	9307      	str	r3, [sp, #28]
 80084d4:	2300      	movs	r3, #0
 80084d6:	930a      	str	r3, [sp, #40]	; 0x28
 80084d8:	e7bf      	b.n	800845a <_dtoa_r+0x1da>
 80084da:	2300      	movs	r3, #0
 80084dc:	9308      	str	r3, [sp, #32]
 80084de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	dc55      	bgt.n	8008590 <_dtoa_r+0x310>
 80084e4:	2301      	movs	r3, #1
 80084e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084ea:	461a      	mov	r2, r3
 80084ec:	9209      	str	r2, [sp, #36]	; 0x24
 80084ee:	e00c      	b.n	800850a <_dtoa_r+0x28a>
 80084f0:	2301      	movs	r3, #1
 80084f2:	e7f3      	b.n	80084dc <_dtoa_r+0x25c>
 80084f4:	2300      	movs	r3, #0
 80084f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084f8:	9308      	str	r3, [sp, #32]
 80084fa:	9b00      	ldr	r3, [sp, #0]
 80084fc:	4413      	add	r3, r2
 80084fe:	9302      	str	r3, [sp, #8]
 8008500:	3301      	adds	r3, #1
 8008502:	2b01      	cmp	r3, #1
 8008504:	9303      	str	r3, [sp, #12]
 8008506:	bfb8      	it	lt
 8008508:	2301      	movlt	r3, #1
 800850a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800850c:	2200      	movs	r2, #0
 800850e:	6042      	str	r2, [r0, #4]
 8008510:	2204      	movs	r2, #4
 8008512:	f102 0614 	add.w	r6, r2, #20
 8008516:	429e      	cmp	r6, r3
 8008518:	6841      	ldr	r1, [r0, #4]
 800851a:	d93d      	bls.n	8008598 <_dtoa_r+0x318>
 800851c:	4620      	mov	r0, r4
 800851e:	f001 f839 	bl	8009594 <_Balloc>
 8008522:	9001      	str	r0, [sp, #4]
 8008524:	2800      	cmp	r0, #0
 8008526:	d13b      	bne.n	80085a0 <_dtoa_r+0x320>
 8008528:	4b11      	ldr	r3, [pc, #68]	; (8008570 <_dtoa_r+0x2f0>)
 800852a:	4602      	mov	r2, r0
 800852c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008530:	e6c0      	b.n	80082b4 <_dtoa_r+0x34>
 8008532:	2301      	movs	r3, #1
 8008534:	e7df      	b.n	80084f6 <_dtoa_r+0x276>
 8008536:	bf00      	nop
 8008538:	636f4361 	.word	0x636f4361
 800853c:	3fd287a7 	.word	0x3fd287a7
 8008540:	8b60c8b3 	.word	0x8b60c8b3
 8008544:	3fc68a28 	.word	0x3fc68a28
 8008548:	509f79fb 	.word	0x509f79fb
 800854c:	3fd34413 	.word	0x3fd34413
 8008550:	0800b1ae 	.word	0x0800b1ae
 8008554:	0800b1c5 	.word	0x0800b1c5
 8008558:	7ff00000 	.word	0x7ff00000
 800855c:	0800b1aa 	.word	0x0800b1aa
 8008560:	0800b1a1 	.word	0x0800b1a1
 8008564:	0800b025 	.word	0x0800b025
 8008568:	3ff80000 	.word	0x3ff80000
 800856c:	0800b330 	.word	0x0800b330
 8008570:	0800b220 	.word	0x0800b220
 8008574:	2501      	movs	r5, #1
 8008576:	2300      	movs	r3, #0
 8008578:	9306      	str	r3, [sp, #24]
 800857a:	9508      	str	r5, [sp, #32]
 800857c:	f04f 33ff 	mov.w	r3, #4294967295
 8008580:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008584:	2200      	movs	r2, #0
 8008586:	2312      	movs	r3, #18
 8008588:	e7b0      	b.n	80084ec <_dtoa_r+0x26c>
 800858a:	2301      	movs	r3, #1
 800858c:	9308      	str	r3, [sp, #32]
 800858e:	e7f5      	b.n	800857c <_dtoa_r+0x2fc>
 8008590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008592:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008596:	e7b8      	b.n	800850a <_dtoa_r+0x28a>
 8008598:	3101      	adds	r1, #1
 800859a:	6041      	str	r1, [r0, #4]
 800859c:	0052      	lsls	r2, r2, #1
 800859e:	e7b8      	b.n	8008512 <_dtoa_r+0x292>
 80085a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085a2:	9a01      	ldr	r2, [sp, #4]
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	9b03      	ldr	r3, [sp, #12]
 80085a8:	2b0e      	cmp	r3, #14
 80085aa:	f200 809d 	bhi.w	80086e8 <_dtoa_r+0x468>
 80085ae:	2d00      	cmp	r5, #0
 80085b0:	f000 809a 	beq.w	80086e8 <_dtoa_r+0x468>
 80085b4:	9b00      	ldr	r3, [sp, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	dd32      	ble.n	8008620 <_dtoa_r+0x3a0>
 80085ba:	4ab7      	ldr	r2, [pc, #732]	; (8008898 <_dtoa_r+0x618>)
 80085bc:	f003 030f 	and.w	r3, r3, #15
 80085c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80085c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085c8:	9b00      	ldr	r3, [sp, #0]
 80085ca:	05d8      	lsls	r0, r3, #23
 80085cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80085d0:	d516      	bpl.n	8008600 <_dtoa_r+0x380>
 80085d2:	4bb2      	ldr	r3, [pc, #712]	; (800889c <_dtoa_r+0x61c>)
 80085d4:	ec51 0b19 	vmov	r0, r1, d9
 80085d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085dc:	f7f8 f946 	bl	800086c <__aeabi_ddiv>
 80085e0:	f007 070f 	and.w	r7, r7, #15
 80085e4:	4682      	mov	sl, r0
 80085e6:	468b      	mov	fp, r1
 80085e8:	2503      	movs	r5, #3
 80085ea:	4eac      	ldr	r6, [pc, #688]	; (800889c <_dtoa_r+0x61c>)
 80085ec:	b957      	cbnz	r7, 8008604 <_dtoa_r+0x384>
 80085ee:	4642      	mov	r2, r8
 80085f0:	464b      	mov	r3, r9
 80085f2:	4650      	mov	r0, sl
 80085f4:	4659      	mov	r1, fp
 80085f6:	f7f8 f939 	bl	800086c <__aeabi_ddiv>
 80085fa:	4682      	mov	sl, r0
 80085fc:	468b      	mov	fp, r1
 80085fe:	e028      	b.n	8008652 <_dtoa_r+0x3d2>
 8008600:	2502      	movs	r5, #2
 8008602:	e7f2      	b.n	80085ea <_dtoa_r+0x36a>
 8008604:	07f9      	lsls	r1, r7, #31
 8008606:	d508      	bpl.n	800861a <_dtoa_r+0x39a>
 8008608:	4640      	mov	r0, r8
 800860a:	4649      	mov	r1, r9
 800860c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008610:	f7f8 f802 	bl	8000618 <__aeabi_dmul>
 8008614:	3501      	adds	r5, #1
 8008616:	4680      	mov	r8, r0
 8008618:	4689      	mov	r9, r1
 800861a:	107f      	asrs	r7, r7, #1
 800861c:	3608      	adds	r6, #8
 800861e:	e7e5      	b.n	80085ec <_dtoa_r+0x36c>
 8008620:	f000 809b 	beq.w	800875a <_dtoa_r+0x4da>
 8008624:	9b00      	ldr	r3, [sp, #0]
 8008626:	4f9d      	ldr	r7, [pc, #628]	; (800889c <_dtoa_r+0x61c>)
 8008628:	425e      	negs	r6, r3
 800862a:	4b9b      	ldr	r3, [pc, #620]	; (8008898 <_dtoa_r+0x618>)
 800862c:	f006 020f 	and.w	r2, r6, #15
 8008630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	ec51 0b19 	vmov	r0, r1, d9
 800863c:	f7f7 ffec 	bl	8000618 <__aeabi_dmul>
 8008640:	1136      	asrs	r6, r6, #4
 8008642:	4682      	mov	sl, r0
 8008644:	468b      	mov	fp, r1
 8008646:	2300      	movs	r3, #0
 8008648:	2502      	movs	r5, #2
 800864a:	2e00      	cmp	r6, #0
 800864c:	d17a      	bne.n	8008744 <_dtoa_r+0x4c4>
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1d3      	bne.n	80085fa <_dtoa_r+0x37a>
 8008652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 8082 	beq.w	800875e <_dtoa_r+0x4de>
 800865a:	4b91      	ldr	r3, [pc, #580]	; (80088a0 <_dtoa_r+0x620>)
 800865c:	2200      	movs	r2, #0
 800865e:	4650      	mov	r0, sl
 8008660:	4659      	mov	r1, fp
 8008662:	f7f8 fa4b 	bl	8000afc <__aeabi_dcmplt>
 8008666:	2800      	cmp	r0, #0
 8008668:	d079      	beq.n	800875e <_dtoa_r+0x4de>
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d076      	beq.n	800875e <_dtoa_r+0x4de>
 8008670:	9b02      	ldr	r3, [sp, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	dd36      	ble.n	80086e4 <_dtoa_r+0x464>
 8008676:	9b00      	ldr	r3, [sp, #0]
 8008678:	4650      	mov	r0, sl
 800867a:	4659      	mov	r1, fp
 800867c:	1e5f      	subs	r7, r3, #1
 800867e:	2200      	movs	r2, #0
 8008680:	4b88      	ldr	r3, [pc, #544]	; (80088a4 <_dtoa_r+0x624>)
 8008682:	f7f7 ffc9 	bl	8000618 <__aeabi_dmul>
 8008686:	9e02      	ldr	r6, [sp, #8]
 8008688:	4682      	mov	sl, r0
 800868a:	468b      	mov	fp, r1
 800868c:	3501      	adds	r5, #1
 800868e:	4628      	mov	r0, r5
 8008690:	f7f7 ff58 	bl	8000544 <__aeabi_i2d>
 8008694:	4652      	mov	r2, sl
 8008696:	465b      	mov	r3, fp
 8008698:	f7f7 ffbe 	bl	8000618 <__aeabi_dmul>
 800869c:	4b82      	ldr	r3, [pc, #520]	; (80088a8 <_dtoa_r+0x628>)
 800869e:	2200      	movs	r2, #0
 80086a0:	f7f7 fe04 	bl	80002ac <__adddf3>
 80086a4:	46d0      	mov	r8, sl
 80086a6:	46d9      	mov	r9, fp
 80086a8:	4682      	mov	sl, r0
 80086aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80086ae:	2e00      	cmp	r6, #0
 80086b0:	d158      	bne.n	8008764 <_dtoa_r+0x4e4>
 80086b2:	4b7e      	ldr	r3, [pc, #504]	; (80088ac <_dtoa_r+0x62c>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	4640      	mov	r0, r8
 80086b8:	4649      	mov	r1, r9
 80086ba:	f7f7 fdf5 	bl	80002a8 <__aeabi_dsub>
 80086be:	4652      	mov	r2, sl
 80086c0:	465b      	mov	r3, fp
 80086c2:	4680      	mov	r8, r0
 80086c4:	4689      	mov	r9, r1
 80086c6:	f7f8 fa37 	bl	8000b38 <__aeabi_dcmpgt>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	f040 8295 	bne.w	8008bfa <_dtoa_r+0x97a>
 80086d0:	4652      	mov	r2, sl
 80086d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80086d6:	4640      	mov	r0, r8
 80086d8:	4649      	mov	r1, r9
 80086da:	f7f8 fa0f 	bl	8000afc <__aeabi_dcmplt>
 80086de:	2800      	cmp	r0, #0
 80086e0:	f040 8289 	bne.w	8008bf6 <_dtoa_r+0x976>
 80086e4:	ec5b ab19 	vmov	sl, fp, d9
 80086e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f2c0 8148 	blt.w	8008980 <_dtoa_r+0x700>
 80086f0:	9a00      	ldr	r2, [sp, #0]
 80086f2:	2a0e      	cmp	r2, #14
 80086f4:	f300 8144 	bgt.w	8008980 <_dtoa_r+0x700>
 80086f8:	4b67      	ldr	r3, [pc, #412]	; (8008898 <_dtoa_r+0x618>)
 80086fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008704:	2b00      	cmp	r3, #0
 8008706:	f280 80d5 	bge.w	80088b4 <_dtoa_r+0x634>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f300 80d1 	bgt.w	80088b4 <_dtoa_r+0x634>
 8008712:	f040 826f 	bne.w	8008bf4 <_dtoa_r+0x974>
 8008716:	4b65      	ldr	r3, [pc, #404]	; (80088ac <_dtoa_r+0x62c>)
 8008718:	2200      	movs	r2, #0
 800871a:	4640      	mov	r0, r8
 800871c:	4649      	mov	r1, r9
 800871e:	f7f7 ff7b 	bl	8000618 <__aeabi_dmul>
 8008722:	4652      	mov	r2, sl
 8008724:	465b      	mov	r3, fp
 8008726:	f7f8 f9fd 	bl	8000b24 <__aeabi_dcmpge>
 800872a:	9e03      	ldr	r6, [sp, #12]
 800872c:	4637      	mov	r7, r6
 800872e:	2800      	cmp	r0, #0
 8008730:	f040 8245 	bne.w	8008bbe <_dtoa_r+0x93e>
 8008734:	9d01      	ldr	r5, [sp, #4]
 8008736:	2331      	movs	r3, #49	; 0x31
 8008738:	f805 3b01 	strb.w	r3, [r5], #1
 800873c:	9b00      	ldr	r3, [sp, #0]
 800873e:	3301      	adds	r3, #1
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	e240      	b.n	8008bc6 <_dtoa_r+0x946>
 8008744:	07f2      	lsls	r2, r6, #31
 8008746:	d505      	bpl.n	8008754 <_dtoa_r+0x4d4>
 8008748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800874c:	f7f7 ff64 	bl	8000618 <__aeabi_dmul>
 8008750:	3501      	adds	r5, #1
 8008752:	2301      	movs	r3, #1
 8008754:	1076      	asrs	r6, r6, #1
 8008756:	3708      	adds	r7, #8
 8008758:	e777      	b.n	800864a <_dtoa_r+0x3ca>
 800875a:	2502      	movs	r5, #2
 800875c:	e779      	b.n	8008652 <_dtoa_r+0x3d2>
 800875e:	9f00      	ldr	r7, [sp, #0]
 8008760:	9e03      	ldr	r6, [sp, #12]
 8008762:	e794      	b.n	800868e <_dtoa_r+0x40e>
 8008764:	9901      	ldr	r1, [sp, #4]
 8008766:	4b4c      	ldr	r3, [pc, #304]	; (8008898 <_dtoa_r+0x618>)
 8008768:	4431      	add	r1, r6
 800876a:	910d      	str	r1, [sp, #52]	; 0x34
 800876c:	9908      	ldr	r1, [sp, #32]
 800876e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008772:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008776:	2900      	cmp	r1, #0
 8008778:	d043      	beq.n	8008802 <_dtoa_r+0x582>
 800877a:	494d      	ldr	r1, [pc, #308]	; (80088b0 <_dtoa_r+0x630>)
 800877c:	2000      	movs	r0, #0
 800877e:	f7f8 f875 	bl	800086c <__aeabi_ddiv>
 8008782:	4652      	mov	r2, sl
 8008784:	465b      	mov	r3, fp
 8008786:	f7f7 fd8f 	bl	80002a8 <__aeabi_dsub>
 800878a:	9d01      	ldr	r5, [sp, #4]
 800878c:	4682      	mov	sl, r0
 800878e:	468b      	mov	fp, r1
 8008790:	4649      	mov	r1, r9
 8008792:	4640      	mov	r0, r8
 8008794:	f7f8 f9f0 	bl	8000b78 <__aeabi_d2iz>
 8008798:	4606      	mov	r6, r0
 800879a:	f7f7 fed3 	bl	8000544 <__aeabi_i2d>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4640      	mov	r0, r8
 80087a4:	4649      	mov	r1, r9
 80087a6:	f7f7 fd7f 	bl	80002a8 <__aeabi_dsub>
 80087aa:	3630      	adds	r6, #48	; 0x30
 80087ac:	f805 6b01 	strb.w	r6, [r5], #1
 80087b0:	4652      	mov	r2, sl
 80087b2:	465b      	mov	r3, fp
 80087b4:	4680      	mov	r8, r0
 80087b6:	4689      	mov	r9, r1
 80087b8:	f7f8 f9a0 	bl	8000afc <__aeabi_dcmplt>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d163      	bne.n	8008888 <_dtoa_r+0x608>
 80087c0:	4642      	mov	r2, r8
 80087c2:	464b      	mov	r3, r9
 80087c4:	4936      	ldr	r1, [pc, #216]	; (80088a0 <_dtoa_r+0x620>)
 80087c6:	2000      	movs	r0, #0
 80087c8:	f7f7 fd6e 	bl	80002a8 <__aeabi_dsub>
 80087cc:	4652      	mov	r2, sl
 80087ce:	465b      	mov	r3, fp
 80087d0:	f7f8 f994 	bl	8000afc <__aeabi_dcmplt>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	f040 80b5 	bne.w	8008944 <_dtoa_r+0x6c4>
 80087da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087dc:	429d      	cmp	r5, r3
 80087de:	d081      	beq.n	80086e4 <_dtoa_r+0x464>
 80087e0:	4b30      	ldr	r3, [pc, #192]	; (80088a4 <_dtoa_r+0x624>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	4650      	mov	r0, sl
 80087e6:	4659      	mov	r1, fp
 80087e8:	f7f7 ff16 	bl	8000618 <__aeabi_dmul>
 80087ec:	4b2d      	ldr	r3, [pc, #180]	; (80088a4 <_dtoa_r+0x624>)
 80087ee:	4682      	mov	sl, r0
 80087f0:	468b      	mov	fp, r1
 80087f2:	4640      	mov	r0, r8
 80087f4:	4649      	mov	r1, r9
 80087f6:	2200      	movs	r2, #0
 80087f8:	f7f7 ff0e 	bl	8000618 <__aeabi_dmul>
 80087fc:	4680      	mov	r8, r0
 80087fe:	4689      	mov	r9, r1
 8008800:	e7c6      	b.n	8008790 <_dtoa_r+0x510>
 8008802:	4650      	mov	r0, sl
 8008804:	4659      	mov	r1, fp
 8008806:	f7f7 ff07 	bl	8000618 <__aeabi_dmul>
 800880a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800880c:	9d01      	ldr	r5, [sp, #4]
 800880e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008810:	4682      	mov	sl, r0
 8008812:	468b      	mov	fp, r1
 8008814:	4649      	mov	r1, r9
 8008816:	4640      	mov	r0, r8
 8008818:	f7f8 f9ae 	bl	8000b78 <__aeabi_d2iz>
 800881c:	4606      	mov	r6, r0
 800881e:	f7f7 fe91 	bl	8000544 <__aeabi_i2d>
 8008822:	3630      	adds	r6, #48	; 0x30
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	4640      	mov	r0, r8
 800882a:	4649      	mov	r1, r9
 800882c:	f7f7 fd3c 	bl	80002a8 <__aeabi_dsub>
 8008830:	f805 6b01 	strb.w	r6, [r5], #1
 8008834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008836:	429d      	cmp	r5, r3
 8008838:	4680      	mov	r8, r0
 800883a:	4689      	mov	r9, r1
 800883c:	f04f 0200 	mov.w	r2, #0
 8008840:	d124      	bne.n	800888c <_dtoa_r+0x60c>
 8008842:	4b1b      	ldr	r3, [pc, #108]	; (80088b0 <_dtoa_r+0x630>)
 8008844:	4650      	mov	r0, sl
 8008846:	4659      	mov	r1, fp
 8008848:	f7f7 fd30 	bl	80002ac <__adddf3>
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	4640      	mov	r0, r8
 8008852:	4649      	mov	r1, r9
 8008854:	f7f8 f970 	bl	8000b38 <__aeabi_dcmpgt>
 8008858:	2800      	cmp	r0, #0
 800885a:	d173      	bne.n	8008944 <_dtoa_r+0x6c4>
 800885c:	4652      	mov	r2, sl
 800885e:	465b      	mov	r3, fp
 8008860:	4913      	ldr	r1, [pc, #76]	; (80088b0 <_dtoa_r+0x630>)
 8008862:	2000      	movs	r0, #0
 8008864:	f7f7 fd20 	bl	80002a8 <__aeabi_dsub>
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4640      	mov	r0, r8
 800886e:	4649      	mov	r1, r9
 8008870:	f7f8 f944 	bl	8000afc <__aeabi_dcmplt>
 8008874:	2800      	cmp	r0, #0
 8008876:	f43f af35 	beq.w	80086e4 <_dtoa_r+0x464>
 800887a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800887c:	1e6b      	subs	r3, r5, #1
 800887e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008880:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008884:	2b30      	cmp	r3, #48	; 0x30
 8008886:	d0f8      	beq.n	800887a <_dtoa_r+0x5fa>
 8008888:	9700      	str	r7, [sp, #0]
 800888a:	e049      	b.n	8008920 <_dtoa_r+0x6a0>
 800888c:	4b05      	ldr	r3, [pc, #20]	; (80088a4 <_dtoa_r+0x624>)
 800888e:	f7f7 fec3 	bl	8000618 <__aeabi_dmul>
 8008892:	4680      	mov	r8, r0
 8008894:	4689      	mov	r9, r1
 8008896:	e7bd      	b.n	8008814 <_dtoa_r+0x594>
 8008898:	0800b330 	.word	0x0800b330
 800889c:	0800b308 	.word	0x0800b308
 80088a0:	3ff00000 	.word	0x3ff00000
 80088a4:	40240000 	.word	0x40240000
 80088a8:	401c0000 	.word	0x401c0000
 80088ac:	40140000 	.word	0x40140000
 80088b0:	3fe00000 	.word	0x3fe00000
 80088b4:	9d01      	ldr	r5, [sp, #4]
 80088b6:	4656      	mov	r6, sl
 80088b8:	465f      	mov	r7, fp
 80088ba:	4642      	mov	r2, r8
 80088bc:	464b      	mov	r3, r9
 80088be:	4630      	mov	r0, r6
 80088c0:	4639      	mov	r1, r7
 80088c2:	f7f7 ffd3 	bl	800086c <__aeabi_ddiv>
 80088c6:	f7f8 f957 	bl	8000b78 <__aeabi_d2iz>
 80088ca:	4682      	mov	sl, r0
 80088cc:	f7f7 fe3a 	bl	8000544 <__aeabi_i2d>
 80088d0:	4642      	mov	r2, r8
 80088d2:	464b      	mov	r3, r9
 80088d4:	f7f7 fea0 	bl	8000618 <__aeabi_dmul>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	4630      	mov	r0, r6
 80088de:	4639      	mov	r1, r7
 80088e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80088e4:	f7f7 fce0 	bl	80002a8 <__aeabi_dsub>
 80088e8:	f805 6b01 	strb.w	r6, [r5], #1
 80088ec:	9e01      	ldr	r6, [sp, #4]
 80088ee:	9f03      	ldr	r7, [sp, #12]
 80088f0:	1bae      	subs	r6, r5, r6
 80088f2:	42b7      	cmp	r7, r6
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	d135      	bne.n	8008966 <_dtoa_r+0x6e6>
 80088fa:	f7f7 fcd7 	bl	80002ac <__adddf3>
 80088fe:	4642      	mov	r2, r8
 8008900:	464b      	mov	r3, r9
 8008902:	4606      	mov	r6, r0
 8008904:	460f      	mov	r7, r1
 8008906:	f7f8 f917 	bl	8000b38 <__aeabi_dcmpgt>
 800890a:	b9d0      	cbnz	r0, 8008942 <_dtoa_r+0x6c2>
 800890c:	4642      	mov	r2, r8
 800890e:	464b      	mov	r3, r9
 8008910:	4630      	mov	r0, r6
 8008912:	4639      	mov	r1, r7
 8008914:	f7f8 f8e8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008918:	b110      	cbz	r0, 8008920 <_dtoa_r+0x6a0>
 800891a:	f01a 0f01 	tst.w	sl, #1
 800891e:	d110      	bne.n	8008942 <_dtoa_r+0x6c2>
 8008920:	4620      	mov	r0, r4
 8008922:	ee18 1a10 	vmov	r1, s16
 8008926:	f000 fe75 	bl	8009614 <_Bfree>
 800892a:	2300      	movs	r3, #0
 800892c:	9800      	ldr	r0, [sp, #0]
 800892e:	702b      	strb	r3, [r5, #0]
 8008930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008932:	3001      	adds	r0, #1
 8008934:	6018      	str	r0, [r3, #0]
 8008936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008938:	2b00      	cmp	r3, #0
 800893a:	f43f acf1 	beq.w	8008320 <_dtoa_r+0xa0>
 800893e:	601d      	str	r5, [r3, #0]
 8008940:	e4ee      	b.n	8008320 <_dtoa_r+0xa0>
 8008942:	9f00      	ldr	r7, [sp, #0]
 8008944:	462b      	mov	r3, r5
 8008946:	461d      	mov	r5, r3
 8008948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800894c:	2a39      	cmp	r2, #57	; 0x39
 800894e:	d106      	bne.n	800895e <_dtoa_r+0x6de>
 8008950:	9a01      	ldr	r2, [sp, #4]
 8008952:	429a      	cmp	r2, r3
 8008954:	d1f7      	bne.n	8008946 <_dtoa_r+0x6c6>
 8008956:	9901      	ldr	r1, [sp, #4]
 8008958:	2230      	movs	r2, #48	; 0x30
 800895a:	3701      	adds	r7, #1
 800895c:	700a      	strb	r2, [r1, #0]
 800895e:	781a      	ldrb	r2, [r3, #0]
 8008960:	3201      	adds	r2, #1
 8008962:	701a      	strb	r2, [r3, #0]
 8008964:	e790      	b.n	8008888 <_dtoa_r+0x608>
 8008966:	4ba6      	ldr	r3, [pc, #664]	; (8008c00 <_dtoa_r+0x980>)
 8008968:	2200      	movs	r2, #0
 800896a:	f7f7 fe55 	bl	8000618 <__aeabi_dmul>
 800896e:	2200      	movs	r2, #0
 8008970:	2300      	movs	r3, #0
 8008972:	4606      	mov	r6, r0
 8008974:	460f      	mov	r7, r1
 8008976:	f7f8 f8b7 	bl	8000ae8 <__aeabi_dcmpeq>
 800897a:	2800      	cmp	r0, #0
 800897c:	d09d      	beq.n	80088ba <_dtoa_r+0x63a>
 800897e:	e7cf      	b.n	8008920 <_dtoa_r+0x6a0>
 8008980:	9a08      	ldr	r2, [sp, #32]
 8008982:	2a00      	cmp	r2, #0
 8008984:	f000 80d7 	beq.w	8008b36 <_dtoa_r+0x8b6>
 8008988:	9a06      	ldr	r2, [sp, #24]
 800898a:	2a01      	cmp	r2, #1
 800898c:	f300 80ba 	bgt.w	8008b04 <_dtoa_r+0x884>
 8008990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008992:	2a00      	cmp	r2, #0
 8008994:	f000 80b2 	beq.w	8008afc <_dtoa_r+0x87c>
 8008998:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800899c:	9e07      	ldr	r6, [sp, #28]
 800899e:	9d04      	ldr	r5, [sp, #16]
 80089a0:	9a04      	ldr	r2, [sp, #16]
 80089a2:	441a      	add	r2, r3
 80089a4:	9204      	str	r2, [sp, #16]
 80089a6:	9a05      	ldr	r2, [sp, #20]
 80089a8:	2101      	movs	r1, #1
 80089aa:	441a      	add	r2, r3
 80089ac:	4620      	mov	r0, r4
 80089ae:	9205      	str	r2, [sp, #20]
 80089b0:	f000 ff32 	bl	8009818 <__i2b>
 80089b4:	4607      	mov	r7, r0
 80089b6:	2d00      	cmp	r5, #0
 80089b8:	dd0c      	ble.n	80089d4 <_dtoa_r+0x754>
 80089ba:	9b05      	ldr	r3, [sp, #20]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	dd09      	ble.n	80089d4 <_dtoa_r+0x754>
 80089c0:	42ab      	cmp	r3, r5
 80089c2:	9a04      	ldr	r2, [sp, #16]
 80089c4:	bfa8      	it	ge
 80089c6:	462b      	movge	r3, r5
 80089c8:	1ad2      	subs	r2, r2, r3
 80089ca:	9204      	str	r2, [sp, #16]
 80089cc:	9a05      	ldr	r2, [sp, #20]
 80089ce:	1aed      	subs	r5, r5, r3
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	9305      	str	r3, [sp, #20]
 80089d4:	9b07      	ldr	r3, [sp, #28]
 80089d6:	b31b      	cbz	r3, 8008a20 <_dtoa_r+0x7a0>
 80089d8:	9b08      	ldr	r3, [sp, #32]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 80af 	beq.w	8008b3e <_dtoa_r+0x8be>
 80089e0:	2e00      	cmp	r6, #0
 80089e2:	dd13      	ble.n	8008a0c <_dtoa_r+0x78c>
 80089e4:	4639      	mov	r1, r7
 80089e6:	4632      	mov	r2, r6
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 ffd5 	bl	8009998 <__pow5mult>
 80089ee:	ee18 2a10 	vmov	r2, s16
 80089f2:	4601      	mov	r1, r0
 80089f4:	4607      	mov	r7, r0
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 ff24 	bl	8009844 <__multiply>
 80089fc:	ee18 1a10 	vmov	r1, s16
 8008a00:	4680      	mov	r8, r0
 8008a02:	4620      	mov	r0, r4
 8008a04:	f000 fe06 	bl	8009614 <_Bfree>
 8008a08:	ee08 8a10 	vmov	s16, r8
 8008a0c:	9b07      	ldr	r3, [sp, #28]
 8008a0e:	1b9a      	subs	r2, r3, r6
 8008a10:	d006      	beq.n	8008a20 <_dtoa_r+0x7a0>
 8008a12:	ee18 1a10 	vmov	r1, s16
 8008a16:	4620      	mov	r0, r4
 8008a18:	f000 ffbe 	bl	8009998 <__pow5mult>
 8008a1c:	ee08 0a10 	vmov	s16, r0
 8008a20:	2101      	movs	r1, #1
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 fef8 	bl	8009818 <__i2b>
 8008a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	4606      	mov	r6, r0
 8008a2e:	f340 8088 	ble.w	8008b42 <_dtoa_r+0x8c2>
 8008a32:	461a      	mov	r2, r3
 8008a34:	4601      	mov	r1, r0
 8008a36:	4620      	mov	r0, r4
 8008a38:	f000 ffae 	bl	8009998 <__pow5mult>
 8008a3c:	9b06      	ldr	r3, [sp, #24]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	4606      	mov	r6, r0
 8008a42:	f340 8081 	ble.w	8008b48 <_dtoa_r+0x8c8>
 8008a46:	f04f 0800 	mov.w	r8, #0
 8008a4a:	6933      	ldr	r3, [r6, #16]
 8008a4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a50:	6918      	ldr	r0, [r3, #16]
 8008a52:	f000 fe91 	bl	8009778 <__hi0bits>
 8008a56:	f1c0 0020 	rsb	r0, r0, #32
 8008a5a:	9b05      	ldr	r3, [sp, #20]
 8008a5c:	4418      	add	r0, r3
 8008a5e:	f010 001f 	ands.w	r0, r0, #31
 8008a62:	f000 8092 	beq.w	8008b8a <_dtoa_r+0x90a>
 8008a66:	f1c0 0320 	rsb	r3, r0, #32
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	f340 808a 	ble.w	8008b84 <_dtoa_r+0x904>
 8008a70:	f1c0 001c 	rsb	r0, r0, #28
 8008a74:	9b04      	ldr	r3, [sp, #16]
 8008a76:	4403      	add	r3, r0
 8008a78:	9304      	str	r3, [sp, #16]
 8008a7a:	9b05      	ldr	r3, [sp, #20]
 8008a7c:	4403      	add	r3, r0
 8008a7e:	4405      	add	r5, r0
 8008a80:	9305      	str	r3, [sp, #20]
 8008a82:	9b04      	ldr	r3, [sp, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	dd07      	ble.n	8008a98 <_dtoa_r+0x818>
 8008a88:	ee18 1a10 	vmov	r1, s16
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 ffdc 	bl	8009a4c <__lshift>
 8008a94:	ee08 0a10 	vmov	s16, r0
 8008a98:	9b05      	ldr	r3, [sp, #20]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dd05      	ble.n	8008aaa <_dtoa_r+0x82a>
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f000 ffd2 	bl	8009a4c <__lshift>
 8008aa8:	4606      	mov	r6, r0
 8008aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d06e      	beq.n	8008b8e <_dtoa_r+0x90e>
 8008ab0:	ee18 0a10 	vmov	r0, s16
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	f001 f839 	bl	8009b2c <__mcmp>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	da67      	bge.n	8008b8e <_dtoa_r+0x90e>
 8008abe:	9b00      	ldr	r3, [sp, #0]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	ee18 1a10 	vmov	r1, s16
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	220a      	movs	r2, #10
 8008aca:	2300      	movs	r3, #0
 8008acc:	4620      	mov	r0, r4
 8008ace:	f000 fdc3 	bl	8009658 <__multadd>
 8008ad2:	9b08      	ldr	r3, [sp, #32]
 8008ad4:	ee08 0a10 	vmov	s16, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 81b1 	beq.w	8008e40 <_dtoa_r+0xbc0>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	220a      	movs	r2, #10
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f000 fdb7 	bl	8009658 <__multadd>
 8008aea:	9b02      	ldr	r3, [sp, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	4607      	mov	r7, r0
 8008af0:	f300 808e 	bgt.w	8008c10 <_dtoa_r+0x990>
 8008af4:	9b06      	ldr	r3, [sp, #24]
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	dc51      	bgt.n	8008b9e <_dtoa_r+0x91e>
 8008afa:	e089      	b.n	8008c10 <_dtoa_r+0x990>
 8008afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008afe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b02:	e74b      	b.n	800899c <_dtoa_r+0x71c>
 8008b04:	9b03      	ldr	r3, [sp, #12]
 8008b06:	1e5e      	subs	r6, r3, #1
 8008b08:	9b07      	ldr	r3, [sp, #28]
 8008b0a:	42b3      	cmp	r3, r6
 8008b0c:	bfbf      	itttt	lt
 8008b0e:	9b07      	ldrlt	r3, [sp, #28]
 8008b10:	9607      	strlt	r6, [sp, #28]
 8008b12:	1af2      	sublt	r2, r6, r3
 8008b14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b16:	bfb6      	itet	lt
 8008b18:	189b      	addlt	r3, r3, r2
 8008b1a:	1b9e      	subge	r6, r3, r6
 8008b1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b1e:	9b03      	ldr	r3, [sp, #12]
 8008b20:	bfb8      	it	lt
 8008b22:	2600      	movlt	r6, #0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	bfb7      	itett	lt
 8008b28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008b30:	1a9d      	sublt	r5, r3, r2
 8008b32:	2300      	movlt	r3, #0
 8008b34:	e734      	b.n	80089a0 <_dtoa_r+0x720>
 8008b36:	9e07      	ldr	r6, [sp, #28]
 8008b38:	9d04      	ldr	r5, [sp, #16]
 8008b3a:	9f08      	ldr	r7, [sp, #32]
 8008b3c:	e73b      	b.n	80089b6 <_dtoa_r+0x736>
 8008b3e:	9a07      	ldr	r2, [sp, #28]
 8008b40:	e767      	b.n	8008a12 <_dtoa_r+0x792>
 8008b42:	9b06      	ldr	r3, [sp, #24]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	dc18      	bgt.n	8008b7a <_dtoa_r+0x8fa>
 8008b48:	f1ba 0f00 	cmp.w	sl, #0
 8008b4c:	d115      	bne.n	8008b7a <_dtoa_r+0x8fa>
 8008b4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b52:	b993      	cbnz	r3, 8008b7a <_dtoa_r+0x8fa>
 8008b54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b58:	0d1b      	lsrs	r3, r3, #20
 8008b5a:	051b      	lsls	r3, r3, #20
 8008b5c:	b183      	cbz	r3, 8008b80 <_dtoa_r+0x900>
 8008b5e:	9b04      	ldr	r3, [sp, #16]
 8008b60:	3301      	adds	r3, #1
 8008b62:	9304      	str	r3, [sp, #16]
 8008b64:	9b05      	ldr	r3, [sp, #20]
 8008b66:	3301      	adds	r3, #1
 8008b68:	9305      	str	r3, [sp, #20]
 8008b6a:	f04f 0801 	mov.w	r8, #1
 8008b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f47f af6a 	bne.w	8008a4a <_dtoa_r+0x7ca>
 8008b76:	2001      	movs	r0, #1
 8008b78:	e76f      	b.n	8008a5a <_dtoa_r+0x7da>
 8008b7a:	f04f 0800 	mov.w	r8, #0
 8008b7e:	e7f6      	b.n	8008b6e <_dtoa_r+0x8ee>
 8008b80:	4698      	mov	r8, r3
 8008b82:	e7f4      	b.n	8008b6e <_dtoa_r+0x8ee>
 8008b84:	f43f af7d 	beq.w	8008a82 <_dtoa_r+0x802>
 8008b88:	4618      	mov	r0, r3
 8008b8a:	301c      	adds	r0, #28
 8008b8c:	e772      	b.n	8008a74 <_dtoa_r+0x7f4>
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	dc37      	bgt.n	8008c04 <_dtoa_r+0x984>
 8008b94:	9b06      	ldr	r3, [sp, #24]
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	dd34      	ble.n	8008c04 <_dtoa_r+0x984>
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	9302      	str	r3, [sp, #8]
 8008b9e:	9b02      	ldr	r3, [sp, #8]
 8008ba0:	b96b      	cbnz	r3, 8008bbe <_dtoa_r+0x93e>
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	2205      	movs	r2, #5
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 fd56 	bl	8009658 <__multadd>
 8008bac:	4601      	mov	r1, r0
 8008bae:	4606      	mov	r6, r0
 8008bb0:	ee18 0a10 	vmov	r0, s16
 8008bb4:	f000 ffba 	bl	8009b2c <__mcmp>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	f73f adbb 	bgt.w	8008734 <_dtoa_r+0x4b4>
 8008bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc0:	9d01      	ldr	r5, [sp, #4]
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	f04f 0800 	mov.w	r8, #0
 8008bca:	4631      	mov	r1, r6
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f000 fd21 	bl	8009614 <_Bfree>
 8008bd2:	2f00      	cmp	r7, #0
 8008bd4:	f43f aea4 	beq.w	8008920 <_dtoa_r+0x6a0>
 8008bd8:	f1b8 0f00 	cmp.w	r8, #0
 8008bdc:	d005      	beq.n	8008bea <_dtoa_r+0x96a>
 8008bde:	45b8      	cmp	r8, r7
 8008be0:	d003      	beq.n	8008bea <_dtoa_r+0x96a>
 8008be2:	4641      	mov	r1, r8
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 fd15 	bl	8009614 <_Bfree>
 8008bea:	4639      	mov	r1, r7
 8008bec:	4620      	mov	r0, r4
 8008bee:	f000 fd11 	bl	8009614 <_Bfree>
 8008bf2:	e695      	b.n	8008920 <_dtoa_r+0x6a0>
 8008bf4:	2600      	movs	r6, #0
 8008bf6:	4637      	mov	r7, r6
 8008bf8:	e7e1      	b.n	8008bbe <_dtoa_r+0x93e>
 8008bfa:	9700      	str	r7, [sp, #0]
 8008bfc:	4637      	mov	r7, r6
 8008bfe:	e599      	b.n	8008734 <_dtoa_r+0x4b4>
 8008c00:	40240000 	.word	0x40240000
 8008c04:	9b08      	ldr	r3, [sp, #32]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 80ca 	beq.w	8008da0 <_dtoa_r+0xb20>
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	9302      	str	r3, [sp, #8]
 8008c10:	2d00      	cmp	r5, #0
 8008c12:	dd05      	ble.n	8008c20 <_dtoa_r+0x9a0>
 8008c14:	4639      	mov	r1, r7
 8008c16:	462a      	mov	r2, r5
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f000 ff17 	bl	8009a4c <__lshift>
 8008c1e:	4607      	mov	r7, r0
 8008c20:	f1b8 0f00 	cmp.w	r8, #0
 8008c24:	d05b      	beq.n	8008cde <_dtoa_r+0xa5e>
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 fcb3 	bl	8009594 <_Balloc>
 8008c2e:	4605      	mov	r5, r0
 8008c30:	b928      	cbnz	r0, 8008c3e <_dtoa_r+0x9be>
 8008c32:	4b87      	ldr	r3, [pc, #540]	; (8008e50 <_dtoa_r+0xbd0>)
 8008c34:	4602      	mov	r2, r0
 8008c36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c3a:	f7ff bb3b 	b.w	80082b4 <_dtoa_r+0x34>
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	3202      	adds	r2, #2
 8008c42:	0092      	lsls	r2, r2, #2
 8008c44:	f107 010c 	add.w	r1, r7, #12
 8008c48:	300c      	adds	r0, #12
 8008c4a:	f000 fc95 	bl	8009578 <memcpy>
 8008c4e:	2201      	movs	r2, #1
 8008c50:	4629      	mov	r1, r5
 8008c52:	4620      	mov	r0, r4
 8008c54:	f000 fefa 	bl	8009a4c <__lshift>
 8008c58:	9b01      	ldr	r3, [sp, #4]
 8008c5a:	f103 0901 	add.w	r9, r3, #1
 8008c5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008c62:	4413      	add	r3, r2
 8008c64:	9305      	str	r3, [sp, #20]
 8008c66:	f00a 0301 	and.w	r3, sl, #1
 8008c6a:	46b8      	mov	r8, r7
 8008c6c:	9304      	str	r3, [sp, #16]
 8008c6e:	4607      	mov	r7, r0
 8008c70:	4631      	mov	r1, r6
 8008c72:	ee18 0a10 	vmov	r0, s16
 8008c76:	f7ff fa77 	bl	8008168 <quorem>
 8008c7a:	4641      	mov	r1, r8
 8008c7c:	9002      	str	r0, [sp, #8]
 8008c7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c82:	ee18 0a10 	vmov	r0, s16
 8008c86:	f000 ff51 	bl	8009b2c <__mcmp>
 8008c8a:	463a      	mov	r2, r7
 8008c8c:	9003      	str	r0, [sp, #12]
 8008c8e:	4631      	mov	r1, r6
 8008c90:	4620      	mov	r0, r4
 8008c92:	f000 ff67 	bl	8009b64 <__mdiff>
 8008c96:	68c2      	ldr	r2, [r0, #12]
 8008c98:	f109 3bff 	add.w	fp, r9, #4294967295
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	bb02      	cbnz	r2, 8008ce2 <_dtoa_r+0xa62>
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	ee18 0a10 	vmov	r0, s16
 8008ca6:	f000 ff41 	bl	8009b2c <__mcmp>
 8008caa:	4602      	mov	r2, r0
 8008cac:	4629      	mov	r1, r5
 8008cae:	4620      	mov	r0, r4
 8008cb0:	9207      	str	r2, [sp, #28]
 8008cb2:	f000 fcaf 	bl	8009614 <_Bfree>
 8008cb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008cba:	ea43 0102 	orr.w	r1, r3, r2
 8008cbe:	9b04      	ldr	r3, [sp, #16]
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	464d      	mov	r5, r9
 8008cc4:	d10f      	bne.n	8008ce6 <_dtoa_r+0xa66>
 8008cc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008cca:	d02a      	beq.n	8008d22 <_dtoa_r+0xaa2>
 8008ccc:	9b03      	ldr	r3, [sp, #12]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	dd02      	ble.n	8008cd8 <_dtoa_r+0xa58>
 8008cd2:	9b02      	ldr	r3, [sp, #8]
 8008cd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008cd8:	f88b a000 	strb.w	sl, [fp]
 8008cdc:	e775      	b.n	8008bca <_dtoa_r+0x94a>
 8008cde:	4638      	mov	r0, r7
 8008ce0:	e7ba      	b.n	8008c58 <_dtoa_r+0x9d8>
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	e7e2      	b.n	8008cac <_dtoa_r+0xa2c>
 8008ce6:	9b03      	ldr	r3, [sp, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	db04      	blt.n	8008cf6 <_dtoa_r+0xa76>
 8008cec:	9906      	ldr	r1, [sp, #24]
 8008cee:	430b      	orrs	r3, r1
 8008cf0:	9904      	ldr	r1, [sp, #16]
 8008cf2:	430b      	orrs	r3, r1
 8008cf4:	d122      	bne.n	8008d3c <_dtoa_r+0xabc>
 8008cf6:	2a00      	cmp	r2, #0
 8008cf8:	ddee      	ble.n	8008cd8 <_dtoa_r+0xa58>
 8008cfa:	ee18 1a10 	vmov	r1, s16
 8008cfe:	2201      	movs	r2, #1
 8008d00:	4620      	mov	r0, r4
 8008d02:	f000 fea3 	bl	8009a4c <__lshift>
 8008d06:	4631      	mov	r1, r6
 8008d08:	ee08 0a10 	vmov	s16, r0
 8008d0c:	f000 ff0e 	bl	8009b2c <__mcmp>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	dc03      	bgt.n	8008d1c <_dtoa_r+0xa9c>
 8008d14:	d1e0      	bne.n	8008cd8 <_dtoa_r+0xa58>
 8008d16:	f01a 0f01 	tst.w	sl, #1
 8008d1a:	d0dd      	beq.n	8008cd8 <_dtoa_r+0xa58>
 8008d1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d20:	d1d7      	bne.n	8008cd2 <_dtoa_r+0xa52>
 8008d22:	2339      	movs	r3, #57	; 0x39
 8008d24:	f88b 3000 	strb.w	r3, [fp]
 8008d28:	462b      	mov	r3, r5
 8008d2a:	461d      	mov	r5, r3
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d32:	2a39      	cmp	r2, #57	; 0x39
 8008d34:	d071      	beq.n	8008e1a <_dtoa_r+0xb9a>
 8008d36:	3201      	adds	r2, #1
 8008d38:	701a      	strb	r2, [r3, #0]
 8008d3a:	e746      	b.n	8008bca <_dtoa_r+0x94a>
 8008d3c:	2a00      	cmp	r2, #0
 8008d3e:	dd07      	ble.n	8008d50 <_dtoa_r+0xad0>
 8008d40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d44:	d0ed      	beq.n	8008d22 <_dtoa_r+0xaa2>
 8008d46:	f10a 0301 	add.w	r3, sl, #1
 8008d4a:	f88b 3000 	strb.w	r3, [fp]
 8008d4e:	e73c      	b.n	8008bca <_dtoa_r+0x94a>
 8008d50:	9b05      	ldr	r3, [sp, #20]
 8008d52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008d56:	4599      	cmp	r9, r3
 8008d58:	d047      	beq.n	8008dea <_dtoa_r+0xb6a>
 8008d5a:	ee18 1a10 	vmov	r1, s16
 8008d5e:	2300      	movs	r3, #0
 8008d60:	220a      	movs	r2, #10
 8008d62:	4620      	mov	r0, r4
 8008d64:	f000 fc78 	bl	8009658 <__multadd>
 8008d68:	45b8      	cmp	r8, r7
 8008d6a:	ee08 0a10 	vmov	s16, r0
 8008d6e:	f04f 0300 	mov.w	r3, #0
 8008d72:	f04f 020a 	mov.w	r2, #10
 8008d76:	4641      	mov	r1, r8
 8008d78:	4620      	mov	r0, r4
 8008d7a:	d106      	bne.n	8008d8a <_dtoa_r+0xb0a>
 8008d7c:	f000 fc6c 	bl	8009658 <__multadd>
 8008d80:	4680      	mov	r8, r0
 8008d82:	4607      	mov	r7, r0
 8008d84:	f109 0901 	add.w	r9, r9, #1
 8008d88:	e772      	b.n	8008c70 <_dtoa_r+0x9f0>
 8008d8a:	f000 fc65 	bl	8009658 <__multadd>
 8008d8e:	4639      	mov	r1, r7
 8008d90:	4680      	mov	r8, r0
 8008d92:	2300      	movs	r3, #0
 8008d94:	220a      	movs	r2, #10
 8008d96:	4620      	mov	r0, r4
 8008d98:	f000 fc5e 	bl	8009658 <__multadd>
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	e7f1      	b.n	8008d84 <_dtoa_r+0xb04>
 8008da0:	9b03      	ldr	r3, [sp, #12]
 8008da2:	9302      	str	r3, [sp, #8]
 8008da4:	9d01      	ldr	r5, [sp, #4]
 8008da6:	ee18 0a10 	vmov	r0, s16
 8008daa:	4631      	mov	r1, r6
 8008dac:	f7ff f9dc 	bl	8008168 <quorem>
 8008db0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008db4:	9b01      	ldr	r3, [sp, #4]
 8008db6:	f805 ab01 	strb.w	sl, [r5], #1
 8008dba:	1aea      	subs	r2, r5, r3
 8008dbc:	9b02      	ldr	r3, [sp, #8]
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	dd09      	ble.n	8008dd6 <_dtoa_r+0xb56>
 8008dc2:	ee18 1a10 	vmov	r1, s16
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	220a      	movs	r2, #10
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f000 fc44 	bl	8009658 <__multadd>
 8008dd0:	ee08 0a10 	vmov	s16, r0
 8008dd4:	e7e7      	b.n	8008da6 <_dtoa_r+0xb26>
 8008dd6:	9b02      	ldr	r3, [sp, #8]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	bfc8      	it	gt
 8008ddc:	461d      	movgt	r5, r3
 8008dde:	9b01      	ldr	r3, [sp, #4]
 8008de0:	bfd8      	it	le
 8008de2:	2501      	movle	r5, #1
 8008de4:	441d      	add	r5, r3
 8008de6:	f04f 0800 	mov.w	r8, #0
 8008dea:	ee18 1a10 	vmov	r1, s16
 8008dee:	2201      	movs	r2, #1
 8008df0:	4620      	mov	r0, r4
 8008df2:	f000 fe2b 	bl	8009a4c <__lshift>
 8008df6:	4631      	mov	r1, r6
 8008df8:	ee08 0a10 	vmov	s16, r0
 8008dfc:	f000 fe96 	bl	8009b2c <__mcmp>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	dc91      	bgt.n	8008d28 <_dtoa_r+0xaa8>
 8008e04:	d102      	bne.n	8008e0c <_dtoa_r+0xb8c>
 8008e06:	f01a 0f01 	tst.w	sl, #1
 8008e0a:	d18d      	bne.n	8008d28 <_dtoa_r+0xaa8>
 8008e0c:	462b      	mov	r3, r5
 8008e0e:	461d      	mov	r5, r3
 8008e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e14:	2a30      	cmp	r2, #48	; 0x30
 8008e16:	d0fa      	beq.n	8008e0e <_dtoa_r+0xb8e>
 8008e18:	e6d7      	b.n	8008bca <_dtoa_r+0x94a>
 8008e1a:	9a01      	ldr	r2, [sp, #4]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d184      	bne.n	8008d2a <_dtoa_r+0xaaa>
 8008e20:	9b00      	ldr	r3, [sp, #0]
 8008e22:	3301      	adds	r3, #1
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	2331      	movs	r3, #49	; 0x31
 8008e28:	7013      	strb	r3, [r2, #0]
 8008e2a:	e6ce      	b.n	8008bca <_dtoa_r+0x94a>
 8008e2c:	4b09      	ldr	r3, [pc, #36]	; (8008e54 <_dtoa_r+0xbd4>)
 8008e2e:	f7ff ba95 	b.w	800835c <_dtoa_r+0xdc>
 8008e32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f47f aa6e 	bne.w	8008316 <_dtoa_r+0x96>
 8008e3a:	4b07      	ldr	r3, [pc, #28]	; (8008e58 <_dtoa_r+0xbd8>)
 8008e3c:	f7ff ba8e 	b.w	800835c <_dtoa_r+0xdc>
 8008e40:	9b02      	ldr	r3, [sp, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	dcae      	bgt.n	8008da4 <_dtoa_r+0xb24>
 8008e46:	9b06      	ldr	r3, [sp, #24]
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	f73f aea8 	bgt.w	8008b9e <_dtoa_r+0x91e>
 8008e4e:	e7a9      	b.n	8008da4 <_dtoa_r+0xb24>
 8008e50:	0800b220 	.word	0x0800b220
 8008e54:	0800b024 	.word	0x0800b024
 8008e58:	0800b1a1 	.word	0x0800b1a1

08008e5c <rshift>:
 8008e5c:	6903      	ldr	r3, [r0, #16]
 8008e5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e66:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e6a:	f100 0414 	add.w	r4, r0, #20
 8008e6e:	dd45      	ble.n	8008efc <rshift+0xa0>
 8008e70:	f011 011f 	ands.w	r1, r1, #31
 8008e74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e7c:	d10c      	bne.n	8008e98 <rshift+0x3c>
 8008e7e:	f100 0710 	add.w	r7, r0, #16
 8008e82:	4629      	mov	r1, r5
 8008e84:	42b1      	cmp	r1, r6
 8008e86:	d334      	bcc.n	8008ef2 <rshift+0x96>
 8008e88:	1a9b      	subs	r3, r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	1eea      	subs	r2, r5, #3
 8008e8e:	4296      	cmp	r6, r2
 8008e90:	bf38      	it	cc
 8008e92:	2300      	movcc	r3, #0
 8008e94:	4423      	add	r3, r4
 8008e96:	e015      	b.n	8008ec4 <rshift+0x68>
 8008e98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e9c:	f1c1 0820 	rsb	r8, r1, #32
 8008ea0:	40cf      	lsrs	r7, r1
 8008ea2:	f105 0e04 	add.w	lr, r5, #4
 8008ea6:	46a1      	mov	r9, r4
 8008ea8:	4576      	cmp	r6, lr
 8008eaa:	46f4      	mov	ip, lr
 8008eac:	d815      	bhi.n	8008eda <rshift+0x7e>
 8008eae:	1a9a      	subs	r2, r3, r2
 8008eb0:	0092      	lsls	r2, r2, #2
 8008eb2:	3a04      	subs	r2, #4
 8008eb4:	3501      	adds	r5, #1
 8008eb6:	42ae      	cmp	r6, r5
 8008eb8:	bf38      	it	cc
 8008eba:	2200      	movcc	r2, #0
 8008ebc:	18a3      	adds	r3, r4, r2
 8008ebe:	50a7      	str	r7, [r4, r2]
 8008ec0:	b107      	cbz	r7, 8008ec4 <rshift+0x68>
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	1b1a      	subs	r2, r3, r4
 8008ec6:	42a3      	cmp	r3, r4
 8008ec8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ecc:	bf08      	it	eq
 8008ece:	2300      	moveq	r3, #0
 8008ed0:	6102      	str	r2, [r0, #16]
 8008ed2:	bf08      	it	eq
 8008ed4:	6143      	streq	r3, [r0, #20]
 8008ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eda:	f8dc c000 	ldr.w	ip, [ip]
 8008ede:	fa0c fc08 	lsl.w	ip, ip, r8
 8008ee2:	ea4c 0707 	orr.w	r7, ip, r7
 8008ee6:	f849 7b04 	str.w	r7, [r9], #4
 8008eea:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008eee:	40cf      	lsrs	r7, r1
 8008ef0:	e7da      	b.n	8008ea8 <rshift+0x4c>
 8008ef2:	f851 cb04 	ldr.w	ip, [r1], #4
 8008ef6:	f847 cf04 	str.w	ip, [r7, #4]!
 8008efa:	e7c3      	b.n	8008e84 <rshift+0x28>
 8008efc:	4623      	mov	r3, r4
 8008efe:	e7e1      	b.n	8008ec4 <rshift+0x68>

08008f00 <__hexdig_fun>:
 8008f00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f04:	2b09      	cmp	r3, #9
 8008f06:	d802      	bhi.n	8008f0e <__hexdig_fun+0xe>
 8008f08:	3820      	subs	r0, #32
 8008f0a:	b2c0      	uxtb	r0, r0
 8008f0c:	4770      	bx	lr
 8008f0e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008f12:	2b05      	cmp	r3, #5
 8008f14:	d801      	bhi.n	8008f1a <__hexdig_fun+0x1a>
 8008f16:	3847      	subs	r0, #71	; 0x47
 8008f18:	e7f7      	b.n	8008f0a <__hexdig_fun+0xa>
 8008f1a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	d801      	bhi.n	8008f26 <__hexdig_fun+0x26>
 8008f22:	3827      	subs	r0, #39	; 0x27
 8008f24:	e7f1      	b.n	8008f0a <__hexdig_fun+0xa>
 8008f26:	2000      	movs	r0, #0
 8008f28:	4770      	bx	lr
	...

08008f2c <__gethex>:
 8008f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f30:	ed2d 8b02 	vpush	{d8}
 8008f34:	b089      	sub	sp, #36	; 0x24
 8008f36:	ee08 0a10 	vmov	s16, r0
 8008f3a:	9304      	str	r3, [sp, #16]
 8008f3c:	4bb4      	ldr	r3, [pc, #720]	; (8009210 <__gethex+0x2e4>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	9301      	str	r3, [sp, #4]
 8008f42:	4618      	mov	r0, r3
 8008f44:	468b      	mov	fp, r1
 8008f46:	4690      	mov	r8, r2
 8008f48:	f7f7 f952 	bl	80001f0 <strlen>
 8008f4c:	9b01      	ldr	r3, [sp, #4]
 8008f4e:	f8db 2000 	ldr.w	r2, [fp]
 8008f52:	4403      	add	r3, r0
 8008f54:	4682      	mov	sl, r0
 8008f56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008f5a:	9305      	str	r3, [sp, #20]
 8008f5c:	1c93      	adds	r3, r2, #2
 8008f5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008f62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008f66:	32fe      	adds	r2, #254	; 0xfe
 8008f68:	18d1      	adds	r1, r2, r3
 8008f6a:	461f      	mov	r7, r3
 8008f6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f70:	9100      	str	r1, [sp, #0]
 8008f72:	2830      	cmp	r0, #48	; 0x30
 8008f74:	d0f8      	beq.n	8008f68 <__gethex+0x3c>
 8008f76:	f7ff ffc3 	bl	8008f00 <__hexdig_fun>
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d13a      	bne.n	8008ff6 <__gethex+0xca>
 8008f80:	9901      	ldr	r1, [sp, #4]
 8008f82:	4652      	mov	r2, sl
 8008f84:	4638      	mov	r0, r7
 8008f86:	f001 fa33 	bl	800a3f0 <strncmp>
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d168      	bne.n	8009062 <__gethex+0x136>
 8008f90:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008f94:	eb07 060a 	add.w	r6, r7, sl
 8008f98:	f7ff ffb2 	bl	8008f00 <__hexdig_fun>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	d062      	beq.n	8009066 <__gethex+0x13a>
 8008fa0:	4633      	mov	r3, r6
 8008fa2:	7818      	ldrb	r0, [r3, #0]
 8008fa4:	2830      	cmp	r0, #48	; 0x30
 8008fa6:	461f      	mov	r7, r3
 8008fa8:	f103 0301 	add.w	r3, r3, #1
 8008fac:	d0f9      	beq.n	8008fa2 <__gethex+0x76>
 8008fae:	f7ff ffa7 	bl	8008f00 <__hexdig_fun>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	fab0 f480 	clz	r4, r0
 8008fb8:	0964      	lsrs	r4, r4, #5
 8008fba:	4635      	mov	r5, r6
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	463a      	mov	r2, r7
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	3201      	adds	r2, #1
 8008fc4:	7830      	ldrb	r0, [r6, #0]
 8008fc6:	f7ff ff9b 	bl	8008f00 <__hexdig_fun>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d1f8      	bne.n	8008fc0 <__gethex+0x94>
 8008fce:	9901      	ldr	r1, [sp, #4]
 8008fd0:	4652      	mov	r2, sl
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f001 fa0c 	bl	800a3f0 <strncmp>
 8008fd8:	b980      	cbnz	r0, 8008ffc <__gethex+0xd0>
 8008fda:	b94d      	cbnz	r5, 8008ff0 <__gethex+0xc4>
 8008fdc:	eb06 050a 	add.w	r5, r6, sl
 8008fe0:	462a      	mov	r2, r5
 8008fe2:	4616      	mov	r6, r2
 8008fe4:	3201      	adds	r2, #1
 8008fe6:	7830      	ldrb	r0, [r6, #0]
 8008fe8:	f7ff ff8a 	bl	8008f00 <__hexdig_fun>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d1f8      	bne.n	8008fe2 <__gethex+0xb6>
 8008ff0:	1bad      	subs	r5, r5, r6
 8008ff2:	00ad      	lsls	r5, r5, #2
 8008ff4:	e004      	b.n	8009000 <__gethex+0xd4>
 8008ff6:	2400      	movs	r4, #0
 8008ff8:	4625      	mov	r5, r4
 8008ffa:	e7e0      	b.n	8008fbe <__gethex+0x92>
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	d1f7      	bne.n	8008ff0 <__gethex+0xc4>
 8009000:	7833      	ldrb	r3, [r6, #0]
 8009002:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009006:	2b50      	cmp	r3, #80	; 0x50
 8009008:	d13b      	bne.n	8009082 <__gethex+0x156>
 800900a:	7873      	ldrb	r3, [r6, #1]
 800900c:	2b2b      	cmp	r3, #43	; 0x2b
 800900e:	d02c      	beq.n	800906a <__gethex+0x13e>
 8009010:	2b2d      	cmp	r3, #45	; 0x2d
 8009012:	d02e      	beq.n	8009072 <__gethex+0x146>
 8009014:	1c71      	adds	r1, r6, #1
 8009016:	f04f 0900 	mov.w	r9, #0
 800901a:	7808      	ldrb	r0, [r1, #0]
 800901c:	f7ff ff70 	bl	8008f00 <__hexdig_fun>
 8009020:	1e43      	subs	r3, r0, #1
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b18      	cmp	r3, #24
 8009026:	d82c      	bhi.n	8009082 <__gethex+0x156>
 8009028:	f1a0 0210 	sub.w	r2, r0, #16
 800902c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009030:	f7ff ff66 	bl	8008f00 <__hexdig_fun>
 8009034:	1e43      	subs	r3, r0, #1
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b18      	cmp	r3, #24
 800903a:	d91d      	bls.n	8009078 <__gethex+0x14c>
 800903c:	f1b9 0f00 	cmp.w	r9, #0
 8009040:	d000      	beq.n	8009044 <__gethex+0x118>
 8009042:	4252      	negs	r2, r2
 8009044:	4415      	add	r5, r2
 8009046:	f8cb 1000 	str.w	r1, [fp]
 800904a:	b1e4      	cbz	r4, 8009086 <__gethex+0x15a>
 800904c:	9b00      	ldr	r3, [sp, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	bf14      	ite	ne
 8009052:	2700      	movne	r7, #0
 8009054:	2706      	moveq	r7, #6
 8009056:	4638      	mov	r0, r7
 8009058:	b009      	add	sp, #36	; 0x24
 800905a:	ecbd 8b02 	vpop	{d8}
 800905e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009062:	463e      	mov	r6, r7
 8009064:	4625      	mov	r5, r4
 8009066:	2401      	movs	r4, #1
 8009068:	e7ca      	b.n	8009000 <__gethex+0xd4>
 800906a:	f04f 0900 	mov.w	r9, #0
 800906e:	1cb1      	adds	r1, r6, #2
 8009070:	e7d3      	b.n	800901a <__gethex+0xee>
 8009072:	f04f 0901 	mov.w	r9, #1
 8009076:	e7fa      	b.n	800906e <__gethex+0x142>
 8009078:	230a      	movs	r3, #10
 800907a:	fb03 0202 	mla	r2, r3, r2, r0
 800907e:	3a10      	subs	r2, #16
 8009080:	e7d4      	b.n	800902c <__gethex+0x100>
 8009082:	4631      	mov	r1, r6
 8009084:	e7df      	b.n	8009046 <__gethex+0x11a>
 8009086:	1bf3      	subs	r3, r6, r7
 8009088:	3b01      	subs	r3, #1
 800908a:	4621      	mov	r1, r4
 800908c:	2b07      	cmp	r3, #7
 800908e:	dc0b      	bgt.n	80090a8 <__gethex+0x17c>
 8009090:	ee18 0a10 	vmov	r0, s16
 8009094:	f000 fa7e 	bl	8009594 <_Balloc>
 8009098:	4604      	mov	r4, r0
 800909a:	b940      	cbnz	r0, 80090ae <__gethex+0x182>
 800909c:	4b5d      	ldr	r3, [pc, #372]	; (8009214 <__gethex+0x2e8>)
 800909e:	4602      	mov	r2, r0
 80090a0:	21de      	movs	r1, #222	; 0xde
 80090a2:	485d      	ldr	r0, [pc, #372]	; (8009218 <__gethex+0x2ec>)
 80090a4:	f001 f9c6 	bl	800a434 <__assert_func>
 80090a8:	3101      	adds	r1, #1
 80090aa:	105b      	asrs	r3, r3, #1
 80090ac:	e7ee      	b.n	800908c <__gethex+0x160>
 80090ae:	f100 0914 	add.w	r9, r0, #20
 80090b2:	f04f 0b00 	mov.w	fp, #0
 80090b6:	f1ca 0301 	rsb	r3, sl, #1
 80090ba:	f8cd 9008 	str.w	r9, [sp, #8]
 80090be:	f8cd b000 	str.w	fp, [sp]
 80090c2:	9306      	str	r3, [sp, #24]
 80090c4:	42b7      	cmp	r7, r6
 80090c6:	d340      	bcc.n	800914a <__gethex+0x21e>
 80090c8:	9802      	ldr	r0, [sp, #8]
 80090ca:	9b00      	ldr	r3, [sp, #0]
 80090cc:	f840 3b04 	str.w	r3, [r0], #4
 80090d0:	eba0 0009 	sub.w	r0, r0, r9
 80090d4:	1080      	asrs	r0, r0, #2
 80090d6:	0146      	lsls	r6, r0, #5
 80090d8:	6120      	str	r0, [r4, #16]
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 fb4c 	bl	8009778 <__hi0bits>
 80090e0:	1a30      	subs	r0, r6, r0
 80090e2:	f8d8 6000 	ldr.w	r6, [r8]
 80090e6:	42b0      	cmp	r0, r6
 80090e8:	dd63      	ble.n	80091b2 <__gethex+0x286>
 80090ea:	1b87      	subs	r7, r0, r6
 80090ec:	4639      	mov	r1, r7
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 fef0 	bl	8009ed4 <__any_on>
 80090f4:	4682      	mov	sl, r0
 80090f6:	b1a8      	cbz	r0, 8009124 <__gethex+0x1f8>
 80090f8:	1e7b      	subs	r3, r7, #1
 80090fa:	1159      	asrs	r1, r3, #5
 80090fc:	f003 021f 	and.w	r2, r3, #31
 8009100:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009104:	f04f 0a01 	mov.w	sl, #1
 8009108:	fa0a f202 	lsl.w	r2, sl, r2
 800910c:	420a      	tst	r2, r1
 800910e:	d009      	beq.n	8009124 <__gethex+0x1f8>
 8009110:	4553      	cmp	r3, sl
 8009112:	dd05      	ble.n	8009120 <__gethex+0x1f4>
 8009114:	1eb9      	subs	r1, r7, #2
 8009116:	4620      	mov	r0, r4
 8009118:	f000 fedc 	bl	8009ed4 <__any_on>
 800911c:	2800      	cmp	r0, #0
 800911e:	d145      	bne.n	80091ac <__gethex+0x280>
 8009120:	f04f 0a02 	mov.w	sl, #2
 8009124:	4639      	mov	r1, r7
 8009126:	4620      	mov	r0, r4
 8009128:	f7ff fe98 	bl	8008e5c <rshift>
 800912c:	443d      	add	r5, r7
 800912e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009132:	42ab      	cmp	r3, r5
 8009134:	da4c      	bge.n	80091d0 <__gethex+0x2a4>
 8009136:	ee18 0a10 	vmov	r0, s16
 800913a:	4621      	mov	r1, r4
 800913c:	f000 fa6a 	bl	8009614 <_Bfree>
 8009140:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009142:	2300      	movs	r3, #0
 8009144:	6013      	str	r3, [r2, #0]
 8009146:	27a3      	movs	r7, #163	; 0xa3
 8009148:	e785      	b.n	8009056 <__gethex+0x12a>
 800914a:	1e73      	subs	r3, r6, #1
 800914c:	9a05      	ldr	r2, [sp, #20]
 800914e:	9303      	str	r3, [sp, #12]
 8009150:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009154:	4293      	cmp	r3, r2
 8009156:	d019      	beq.n	800918c <__gethex+0x260>
 8009158:	f1bb 0f20 	cmp.w	fp, #32
 800915c:	d107      	bne.n	800916e <__gethex+0x242>
 800915e:	9b02      	ldr	r3, [sp, #8]
 8009160:	9a00      	ldr	r2, [sp, #0]
 8009162:	f843 2b04 	str.w	r2, [r3], #4
 8009166:	9302      	str	r3, [sp, #8]
 8009168:	2300      	movs	r3, #0
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	469b      	mov	fp, r3
 800916e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009172:	f7ff fec5 	bl	8008f00 <__hexdig_fun>
 8009176:	9b00      	ldr	r3, [sp, #0]
 8009178:	f000 000f 	and.w	r0, r0, #15
 800917c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009180:	4303      	orrs	r3, r0
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	f10b 0b04 	add.w	fp, fp, #4
 8009188:	9b03      	ldr	r3, [sp, #12]
 800918a:	e00d      	b.n	80091a8 <__gethex+0x27c>
 800918c:	9b03      	ldr	r3, [sp, #12]
 800918e:	9a06      	ldr	r2, [sp, #24]
 8009190:	4413      	add	r3, r2
 8009192:	42bb      	cmp	r3, r7
 8009194:	d3e0      	bcc.n	8009158 <__gethex+0x22c>
 8009196:	4618      	mov	r0, r3
 8009198:	9901      	ldr	r1, [sp, #4]
 800919a:	9307      	str	r3, [sp, #28]
 800919c:	4652      	mov	r2, sl
 800919e:	f001 f927 	bl	800a3f0 <strncmp>
 80091a2:	9b07      	ldr	r3, [sp, #28]
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d1d7      	bne.n	8009158 <__gethex+0x22c>
 80091a8:	461e      	mov	r6, r3
 80091aa:	e78b      	b.n	80090c4 <__gethex+0x198>
 80091ac:	f04f 0a03 	mov.w	sl, #3
 80091b0:	e7b8      	b.n	8009124 <__gethex+0x1f8>
 80091b2:	da0a      	bge.n	80091ca <__gethex+0x29e>
 80091b4:	1a37      	subs	r7, r6, r0
 80091b6:	4621      	mov	r1, r4
 80091b8:	ee18 0a10 	vmov	r0, s16
 80091bc:	463a      	mov	r2, r7
 80091be:	f000 fc45 	bl	8009a4c <__lshift>
 80091c2:	1bed      	subs	r5, r5, r7
 80091c4:	4604      	mov	r4, r0
 80091c6:	f100 0914 	add.w	r9, r0, #20
 80091ca:	f04f 0a00 	mov.w	sl, #0
 80091ce:	e7ae      	b.n	800912e <__gethex+0x202>
 80091d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80091d4:	42a8      	cmp	r0, r5
 80091d6:	dd72      	ble.n	80092be <__gethex+0x392>
 80091d8:	1b45      	subs	r5, r0, r5
 80091da:	42ae      	cmp	r6, r5
 80091dc:	dc36      	bgt.n	800924c <__gethex+0x320>
 80091de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d02a      	beq.n	800923c <__gethex+0x310>
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d02c      	beq.n	8009244 <__gethex+0x318>
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d11c      	bne.n	8009228 <__gethex+0x2fc>
 80091ee:	42ae      	cmp	r6, r5
 80091f0:	d11a      	bne.n	8009228 <__gethex+0x2fc>
 80091f2:	2e01      	cmp	r6, #1
 80091f4:	d112      	bne.n	800921c <__gethex+0x2f0>
 80091f6:	9a04      	ldr	r2, [sp, #16]
 80091f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	2301      	movs	r3, #1
 8009200:	6123      	str	r3, [r4, #16]
 8009202:	f8c9 3000 	str.w	r3, [r9]
 8009206:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009208:	2762      	movs	r7, #98	; 0x62
 800920a:	601c      	str	r4, [r3, #0]
 800920c:	e723      	b.n	8009056 <__gethex+0x12a>
 800920e:	bf00      	nop
 8009210:	0800b298 	.word	0x0800b298
 8009214:	0800b220 	.word	0x0800b220
 8009218:	0800b231 	.word	0x0800b231
 800921c:	1e71      	subs	r1, r6, #1
 800921e:	4620      	mov	r0, r4
 8009220:	f000 fe58 	bl	8009ed4 <__any_on>
 8009224:	2800      	cmp	r0, #0
 8009226:	d1e6      	bne.n	80091f6 <__gethex+0x2ca>
 8009228:	ee18 0a10 	vmov	r0, s16
 800922c:	4621      	mov	r1, r4
 800922e:	f000 f9f1 	bl	8009614 <_Bfree>
 8009232:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009234:	2300      	movs	r3, #0
 8009236:	6013      	str	r3, [r2, #0]
 8009238:	2750      	movs	r7, #80	; 0x50
 800923a:	e70c      	b.n	8009056 <__gethex+0x12a>
 800923c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1f2      	bne.n	8009228 <__gethex+0x2fc>
 8009242:	e7d8      	b.n	80091f6 <__gethex+0x2ca>
 8009244:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1d5      	bne.n	80091f6 <__gethex+0x2ca>
 800924a:	e7ed      	b.n	8009228 <__gethex+0x2fc>
 800924c:	1e6f      	subs	r7, r5, #1
 800924e:	f1ba 0f00 	cmp.w	sl, #0
 8009252:	d131      	bne.n	80092b8 <__gethex+0x38c>
 8009254:	b127      	cbz	r7, 8009260 <__gethex+0x334>
 8009256:	4639      	mov	r1, r7
 8009258:	4620      	mov	r0, r4
 800925a:	f000 fe3b 	bl	8009ed4 <__any_on>
 800925e:	4682      	mov	sl, r0
 8009260:	117b      	asrs	r3, r7, #5
 8009262:	2101      	movs	r1, #1
 8009264:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009268:	f007 071f 	and.w	r7, r7, #31
 800926c:	fa01 f707 	lsl.w	r7, r1, r7
 8009270:	421f      	tst	r7, r3
 8009272:	4629      	mov	r1, r5
 8009274:	4620      	mov	r0, r4
 8009276:	bf18      	it	ne
 8009278:	f04a 0a02 	orrne.w	sl, sl, #2
 800927c:	1b76      	subs	r6, r6, r5
 800927e:	f7ff fded 	bl	8008e5c <rshift>
 8009282:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009286:	2702      	movs	r7, #2
 8009288:	f1ba 0f00 	cmp.w	sl, #0
 800928c:	d048      	beq.n	8009320 <__gethex+0x3f4>
 800928e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009292:	2b02      	cmp	r3, #2
 8009294:	d015      	beq.n	80092c2 <__gethex+0x396>
 8009296:	2b03      	cmp	r3, #3
 8009298:	d017      	beq.n	80092ca <__gethex+0x39e>
 800929a:	2b01      	cmp	r3, #1
 800929c:	d109      	bne.n	80092b2 <__gethex+0x386>
 800929e:	f01a 0f02 	tst.w	sl, #2
 80092a2:	d006      	beq.n	80092b2 <__gethex+0x386>
 80092a4:	f8d9 0000 	ldr.w	r0, [r9]
 80092a8:	ea4a 0a00 	orr.w	sl, sl, r0
 80092ac:	f01a 0f01 	tst.w	sl, #1
 80092b0:	d10e      	bne.n	80092d0 <__gethex+0x3a4>
 80092b2:	f047 0710 	orr.w	r7, r7, #16
 80092b6:	e033      	b.n	8009320 <__gethex+0x3f4>
 80092b8:	f04f 0a01 	mov.w	sl, #1
 80092bc:	e7d0      	b.n	8009260 <__gethex+0x334>
 80092be:	2701      	movs	r7, #1
 80092c0:	e7e2      	b.n	8009288 <__gethex+0x35c>
 80092c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092c4:	f1c3 0301 	rsb	r3, r3, #1
 80092c8:	9315      	str	r3, [sp, #84]	; 0x54
 80092ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d0f0      	beq.n	80092b2 <__gethex+0x386>
 80092d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80092d4:	f104 0314 	add.w	r3, r4, #20
 80092d8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80092dc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80092e0:	f04f 0c00 	mov.w	ip, #0
 80092e4:	4618      	mov	r0, r3
 80092e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 80092ee:	d01c      	beq.n	800932a <__gethex+0x3fe>
 80092f0:	3201      	adds	r2, #1
 80092f2:	6002      	str	r2, [r0, #0]
 80092f4:	2f02      	cmp	r7, #2
 80092f6:	f104 0314 	add.w	r3, r4, #20
 80092fa:	d13f      	bne.n	800937c <__gethex+0x450>
 80092fc:	f8d8 2000 	ldr.w	r2, [r8]
 8009300:	3a01      	subs	r2, #1
 8009302:	42b2      	cmp	r2, r6
 8009304:	d10a      	bne.n	800931c <__gethex+0x3f0>
 8009306:	1171      	asrs	r1, r6, #5
 8009308:	2201      	movs	r2, #1
 800930a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800930e:	f006 061f 	and.w	r6, r6, #31
 8009312:	fa02 f606 	lsl.w	r6, r2, r6
 8009316:	421e      	tst	r6, r3
 8009318:	bf18      	it	ne
 800931a:	4617      	movne	r7, r2
 800931c:	f047 0720 	orr.w	r7, r7, #32
 8009320:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009322:	601c      	str	r4, [r3, #0]
 8009324:	9b04      	ldr	r3, [sp, #16]
 8009326:	601d      	str	r5, [r3, #0]
 8009328:	e695      	b.n	8009056 <__gethex+0x12a>
 800932a:	4299      	cmp	r1, r3
 800932c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009330:	d8d8      	bhi.n	80092e4 <__gethex+0x3b8>
 8009332:	68a3      	ldr	r3, [r4, #8]
 8009334:	459b      	cmp	fp, r3
 8009336:	db19      	blt.n	800936c <__gethex+0x440>
 8009338:	6861      	ldr	r1, [r4, #4]
 800933a:	ee18 0a10 	vmov	r0, s16
 800933e:	3101      	adds	r1, #1
 8009340:	f000 f928 	bl	8009594 <_Balloc>
 8009344:	4681      	mov	r9, r0
 8009346:	b918      	cbnz	r0, 8009350 <__gethex+0x424>
 8009348:	4b1a      	ldr	r3, [pc, #104]	; (80093b4 <__gethex+0x488>)
 800934a:	4602      	mov	r2, r0
 800934c:	2184      	movs	r1, #132	; 0x84
 800934e:	e6a8      	b.n	80090a2 <__gethex+0x176>
 8009350:	6922      	ldr	r2, [r4, #16]
 8009352:	3202      	adds	r2, #2
 8009354:	f104 010c 	add.w	r1, r4, #12
 8009358:	0092      	lsls	r2, r2, #2
 800935a:	300c      	adds	r0, #12
 800935c:	f000 f90c 	bl	8009578 <memcpy>
 8009360:	4621      	mov	r1, r4
 8009362:	ee18 0a10 	vmov	r0, s16
 8009366:	f000 f955 	bl	8009614 <_Bfree>
 800936a:	464c      	mov	r4, r9
 800936c:	6923      	ldr	r3, [r4, #16]
 800936e:	1c5a      	adds	r2, r3, #1
 8009370:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009374:	6122      	str	r2, [r4, #16]
 8009376:	2201      	movs	r2, #1
 8009378:	615a      	str	r2, [r3, #20]
 800937a:	e7bb      	b.n	80092f4 <__gethex+0x3c8>
 800937c:	6922      	ldr	r2, [r4, #16]
 800937e:	455a      	cmp	r2, fp
 8009380:	dd0b      	ble.n	800939a <__gethex+0x46e>
 8009382:	2101      	movs	r1, #1
 8009384:	4620      	mov	r0, r4
 8009386:	f7ff fd69 	bl	8008e5c <rshift>
 800938a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800938e:	3501      	adds	r5, #1
 8009390:	42ab      	cmp	r3, r5
 8009392:	f6ff aed0 	blt.w	8009136 <__gethex+0x20a>
 8009396:	2701      	movs	r7, #1
 8009398:	e7c0      	b.n	800931c <__gethex+0x3f0>
 800939a:	f016 061f 	ands.w	r6, r6, #31
 800939e:	d0fa      	beq.n	8009396 <__gethex+0x46a>
 80093a0:	4453      	add	r3, sl
 80093a2:	f1c6 0620 	rsb	r6, r6, #32
 80093a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80093aa:	f000 f9e5 	bl	8009778 <__hi0bits>
 80093ae:	42b0      	cmp	r0, r6
 80093b0:	dbe7      	blt.n	8009382 <__gethex+0x456>
 80093b2:	e7f0      	b.n	8009396 <__gethex+0x46a>
 80093b4:	0800b220 	.word	0x0800b220

080093b8 <L_shift>:
 80093b8:	f1c2 0208 	rsb	r2, r2, #8
 80093bc:	0092      	lsls	r2, r2, #2
 80093be:	b570      	push	{r4, r5, r6, lr}
 80093c0:	f1c2 0620 	rsb	r6, r2, #32
 80093c4:	6843      	ldr	r3, [r0, #4]
 80093c6:	6804      	ldr	r4, [r0, #0]
 80093c8:	fa03 f506 	lsl.w	r5, r3, r6
 80093cc:	432c      	orrs	r4, r5
 80093ce:	40d3      	lsrs	r3, r2
 80093d0:	6004      	str	r4, [r0, #0]
 80093d2:	f840 3f04 	str.w	r3, [r0, #4]!
 80093d6:	4288      	cmp	r0, r1
 80093d8:	d3f4      	bcc.n	80093c4 <L_shift+0xc>
 80093da:	bd70      	pop	{r4, r5, r6, pc}

080093dc <__match>:
 80093dc:	b530      	push	{r4, r5, lr}
 80093de:	6803      	ldr	r3, [r0, #0]
 80093e0:	3301      	adds	r3, #1
 80093e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093e6:	b914      	cbnz	r4, 80093ee <__match+0x12>
 80093e8:	6003      	str	r3, [r0, #0]
 80093ea:	2001      	movs	r0, #1
 80093ec:	bd30      	pop	{r4, r5, pc}
 80093ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80093f6:	2d19      	cmp	r5, #25
 80093f8:	bf98      	it	ls
 80093fa:	3220      	addls	r2, #32
 80093fc:	42a2      	cmp	r2, r4
 80093fe:	d0f0      	beq.n	80093e2 <__match+0x6>
 8009400:	2000      	movs	r0, #0
 8009402:	e7f3      	b.n	80093ec <__match+0x10>

08009404 <__hexnan>:
 8009404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009408:	680b      	ldr	r3, [r1, #0]
 800940a:	115e      	asrs	r6, r3, #5
 800940c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009410:	f013 031f 	ands.w	r3, r3, #31
 8009414:	b087      	sub	sp, #28
 8009416:	bf18      	it	ne
 8009418:	3604      	addne	r6, #4
 800941a:	2500      	movs	r5, #0
 800941c:	1f37      	subs	r7, r6, #4
 800941e:	4690      	mov	r8, r2
 8009420:	6802      	ldr	r2, [r0, #0]
 8009422:	9301      	str	r3, [sp, #4]
 8009424:	4682      	mov	sl, r0
 8009426:	f846 5c04 	str.w	r5, [r6, #-4]
 800942a:	46b9      	mov	r9, r7
 800942c:	463c      	mov	r4, r7
 800942e:	9502      	str	r5, [sp, #8]
 8009430:	46ab      	mov	fp, r5
 8009432:	7851      	ldrb	r1, [r2, #1]
 8009434:	1c53      	adds	r3, r2, #1
 8009436:	9303      	str	r3, [sp, #12]
 8009438:	b341      	cbz	r1, 800948c <__hexnan+0x88>
 800943a:	4608      	mov	r0, r1
 800943c:	9205      	str	r2, [sp, #20]
 800943e:	9104      	str	r1, [sp, #16]
 8009440:	f7ff fd5e 	bl	8008f00 <__hexdig_fun>
 8009444:	2800      	cmp	r0, #0
 8009446:	d14f      	bne.n	80094e8 <__hexnan+0xe4>
 8009448:	9904      	ldr	r1, [sp, #16]
 800944a:	9a05      	ldr	r2, [sp, #20]
 800944c:	2920      	cmp	r1, #32
 800944e:	d818      	bhi.n	8009482 <__hexnan+0x7e>
 8009450:	9b02      	ldr	r3, [sp, #8]
 8009452:	459b      	cmp	fp, r3
 8009454:	dd13      	ble.n	800947e <__hexnan+0x7a>
 8009456:	454c      	cmp	r4, r9
 8009458:	d206      	bcs.n	8009468 <__hexnan+0x64>
 800945a:	2d07      	cmp	r5, #7
 800945c:	dc04      	bgt.n	8009468 <__hexnan+0x64>
 800945e:	462a      	mov	r2, r5
 8009460:	4649      	mov	r1, r9
 8009462:	4620      	mov	r0, r4
 8009464:	f7ff ffa8 	bl	80093b8 <L_shift>
 8009468:	4544      	cmp	r4, r8
 800946a:	d950      	bls.n	800950e <__hexnan+0x10a>
 800946c:	2300      	movs	r3, #0
 800946e:	f1a4 0904 	sub.w	r9, r4, #4
 8009472:	f844 3c04 	str.w	r3, [r4, #-4]
 8009476:	f8cd b008 	str.w	fp, [sp, #8]
 800947a:	464c      	mov	r4, r9
 800947c:	461d      	mov	r5, r3
 800947e:	9a03      	ldr	r2, [sp, #12]
 8009480:	e7d7      	b.n	8009432 <__hexnan+0x2e>
 8009482:	2929      	cmp	r1, #41	; 0x29
 8009484:	d156      	bne.n	8009534 <__hexnan+0x130>
 8009486:	3202      	adds	r2, #2
 8009488:	f8ca 2000 	str.w	r2, [sl]
 800948c:	f1bb 0f00 	cmp.w	fp, #0
 8009490:	d050      	beq.n	8009534 <__hexnan+0x130>
 8009492:	454c      	cmp	r4, r9
 8009494:	d206      	bcs.n	80094a4 <__hexnan+0xa0>
 8009496:	2d07      	cmp	r5, #7
 8009498:	dc04      	bgt.n	80094a4 <__hexnan+0xa0>
 800949a:	462a      	mov	r2, r5
 800949c:	4649      	mov	r1, r9
 800949e:	4620      	mov	r0, r4
 80094a0:	f7ff ff8a 	bl	80093b8 <L_shift>
 80094a4:	4544      	cmp	r4, r8
 80094a6:	d934      	bls.n	8009512 <__hexnan+0x10e>
 80094a8:	f1a8 0204 	sub.w	r2, r8, #4
 80094ac:	4623      	mov	r3, r4
 80094ae:	f853 1b04 	ldr.w	r1, [r3], #4
 80094b2:	f842 1f04 	str.w	r1, [r2, #4]!
 80094b6:	429f      	cmp	r7, r3
 80094b8:	d2f9      	bcs.n	80094ae <__hexnan+0xaa>
 80094ba:	1b3b      	subs	r3, r7, r4
 80094bc:	f023 0303 	bic.w	r3, r3, #3
 80094c0:	3304      	adds	r3, #4
 80094c2:	3401      	adds	r4, #1
 80094c4:	3e03      	subs	r6, #3
 80094c6:	42b4      	cmp	r4, r6
 80094c8:	bf88      	it	hi
 80094ca:	2304      	movhi	r3, #4
 80094cc:	4443      	add	r3, r8
 80094ce:	2200      	movs	r2, #0
 80094d0:	f843 2b04 	str.w	r2, [r3], #4
 80094d4:	429f      	cmp	r7, r3
 80094d6:	d2fb      	bcs.n	80094d0 <__hexnan+0xcc>
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	b91b      	cbnz	r3, 80094e4 <__hexnan+0xe0>
 80094dc:	4547      	cmp	r7, r8
 80094de:	d127      	bne.n	8009530 <__hexnan+0x12c>
 80094e0:	2301      	movs	r3, #1
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	2005      	movs	r0, #5
 80094e6:	e026      	b.n	8009536 <__hexnan+0x132>
 80094e8:	3501      	adds	r5, #1
 80094ea:	2d08      	cmp	r5, #8
 80094ec:	f10b 0b01 	add.w	fp, fp, #1
 80094f0:	dd06      	ble.n	8009500 <__hexnan+0xfc>
 80094f2:	4544      	cmp	r4, r8
 80094f4:	d9c3      	bls.n	800947e <__hexnan+0x7a>
 80094f6:	2300      	movs	r3, #0
 80094f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80094fc:	2501      	movs	r5, #1
 80094fe:	3c04      	subs	r4, #4
 8009500:	6822      	ldr	r2, [r4, #0]
 8009502:	f000 000f 	and.w	r0, r0, #15
 8009506:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800950a:	6022      	str	r2, [r4, #0]
 800950c:	e7b7      	b.n	800947e <__hexnan+0x7a>
 800950e:	2508      	movs	r5, #8
 8009510:	e7b5      	b.n	800947e <__hexnan+0x7a>
 8009512:	9b01      	ldr	r3, [sp, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d0df      	beq.n	80094d8 <__hexnan+0xd4>
 8009518:	f04f 32ff 	mov.w	r2, #4294967295
 800951c:	f1c3 0320 	rsb	r3, r3, #32
 8009520:	fa22 f303 	lsr.w	r3, r2, r3
 8009524:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009528:	401a      	ands	r2, r3
 800952a:	f846 2c04 	str.w	r2, [r6, #-4]
 800952e:	e7d3      	b.n	80094d8 <__hexnan+0xd4>
 8009530:	3f04      	subs	r7, #4
 8009532:	e7d1      	b.n	80094d8 <__hexnan+0xd4>
 8009534:	2004      	movs	r0, #4
 8009536:	b007      	add	sp, #28
 8009538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800953c <_localeconv_r>:
 800953c:	4800      	ldr	r0, [pc, #0]	; (8009540 <_localeconv_r+0x4>)
 800953e:	4770      	bx	lr
 8009540:	20000178 	.word	0x20000178

08009544 <malloc>:
 8009544:	4b02      	ldr	r3, [pc, #8]	; (8009550 <malloc+0xc>)
 8009546:	4601      	mov	r1, r0
 8009548:	6818      	ldr	r0, [r3, #0]
 800954a:	f000 bd67 	b.w	800a01c <_malloc_r>
 800954e:	bf00      	nop
 8009550:	20000020 	.word	0x20000020

08009554 <__ascii_mbtowc>:
 8009554:	b082      	sub	sp, #8
 8009556:	b901      	cbnz	r1, 800955a <__ascii_mbtowc+0x6>
 8009558:	a901      	add	r1, sp, #4
 800955a:	b142      	cbz	r2, 800956e <__ascii_mbtowc+0x1a>
 800955c:	b14b      	cbz	r3, 8009572 <__ascii_mbtowc+0x1e>
 800955e:	7813      	ldrb	r3, [r2, #0]
 8009560:	600b      	str	r3, [r1, #0]
 8009562:	7812      	ldrb	r2, [r2, #0]
 8009564:	1e10      	subs	r0, r2, #0
 8009566:	bf18      	it	ne
 8009568:	2001      	movne	r0, #1
 800956a:	b002      	add	sp, #8
 800956c:	4770      	bx	lr
 800956e:	4610      	mov	r0, r2
 8009570:	e7fb      	b.n	800956a <__ascii_mbtowc+0x16>
 8009572:	f06f 0001 	mvn.w	r0, #1
 8009576:	e7f8      	b.n	800956a <__ascii_mbtowc+0x16>

08009578 <memcpy>:
 8009578:	440a      	add	r2, r1
 800957a:	4291      	cmp	r1, r2
 800957c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009580:	d100      	bne.n	8009584 <memcpy+0xc>
 8009582:	4770      	bx	lr
 8009584:	b510      	push	{r4, lr}
 8009586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800958a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800958e:	4291      	cmp	r1, r2
 8009590:	d1f9      	bne.n	8009586 <memcpy+0xe>
 8009592:	bd10      	pop	{r4, pc}

08009594 <_Balloc>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009598:	4604      	mov	r4, r0
 800959a:	460d      	mov	r5, r1
 800959c:	b976      	cbnz	r6, 80095bc <_Balloc+0x28>
 800959e:	2010      	movs	r0, #16
 80095a0:	f7ff ffd0 	bl	8009544 <malloc>
 80095a4:	4602      	mov	r2, r0
 80095a6:	6260      	str	r0, [r4, #36]	; 0x24
 80095a8:	b920      	cbnz	r0, 80095b4 <_Balloc+0x20>
 80095aa:	4b18      	ldr	r3, [pc, #96]	; (800960c <_Balloc+0x78>)
 80095ac:	4818      	ldr	r0, [pc, #96]	; (8009610 <_Balloc+0x7c>)
 80095ae:	2166      	movs	r1, #102	; 0x66
 80095b0:	f000 ff40 	bl	800a434 <__assert_func>
 80095b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095b8:	6006      	str	r6, [r0, #0]
 80095ba:	60c6      	str	r6, [r0, #12]
 80095bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095be:	68f3      	ldr	r3, [r6, #12]
 80095c0:	b183      	cbz	r3, 80095e4 <_Balloc+0x50>
 80095c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095ca:	b9b8      	cbnz	r0, 80095fc <_Balloc+0x68>
 80095cc:	2101      	movs	r1, #1
 80095ce:	fa01 f605 	lsl.w	r6, r1, r5
 80095d2:	1d72      	adds	r2, r6, #5
 80095d4:	0092      	lsls	r2, r2, #2
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 fc9d 	bl	8009f16 <_calloc_r>
 80095dc:	b160      	cbz	r0, 80095f8 <_Balloc+0x64>
 80095de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095e2:	e00e      	b.n	8009602 <_Balloc+0x6e>
 80095e4:	2221      	movs	r2, #33	; 0x21
 80095e6:	2104      	movs	r1, #4
 80095e8:	4620      	mov	r0, r4
 80095ea:	f000 fc94 	bl	8009f16 <_calloc_r>
 80095ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095f0:	60f0      	str	r0, [r6, #12]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1e4      	bne.n	80095c2 <_Balloc+0x2e>
 80095f8:	2000      	movs	r0, #0
 80095fa:	bd70      	pop	{r4, r5, r6, pc}
 80095fc:	6802      	ldr	r2, [r0, #0]
 80095fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009602:	2300      	movs	r3, #0
 8009604:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009608:	e7f7      	b.n	80095fa <_Balloc+0x66>
 800960a:	bf00      	nop
 800960c:	0800b1ae 	.word	0x0800b1ae
 8009610:	0800b2ac 	.word	0x0800b2ac

08009614 <_Bfree>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009618:	4605      	mov	r5, r0
 800961a:	460c      	mov	r4, r1
 800961c:	b976      	cbnz	r6, 800963c <_Bfree+0x28>
 800961e:	2010      	movs	r0, #16
 8009620:	f7ff ff90 	bl	8009544 <malloc>
 8009624:	4602      	mov	r2, r0
 8009626:	6268      	str	r0, [r5, #36]	; 0x24
 8009628:	b920      	cbnz	r0, 8009634 <_Bfree+0x20>
 800962a:	4b09      	ldr	r3, [pc, #36]	; (8009650 <_Bfree+0x3c>)
 800962c:	4809      	ldr	r0, [pc, #36]	; (8009654 <_Bfree+0x40>)
 800962e:	218a      	movs	r1, #138	; 0x8a
 8009630:	f000 ff00 	bl	800a434 <__assert_func>
 8009634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009638:	6006      	str	r6, [r0, #0]
 800963a:	60c6      	str	r6, [r0, #12]
 800963c:	b13c      	cbz	r4, 800964e <_Bfree+0x3a>
 800963e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009640:	6862      	ldr	r2, [r4, #4]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009648:	6021      	str	r1, [r4, #0]
 800964a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800964e:	bd70      	pop	{r4, r5, r6, pc}
 8009650:	0800b1ae 	.word	0x0800b1ae
 8009654:	0800b2ac 	.word	0x0800b2ac

08009658 <__multadd>:
 8009658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800965c:	690d      	ldr	r5, [r1, #16]
 800965e:	4607      	mov	r7, r0
 8009660:	460c      	mov	r4, r1
 8009662:	461e      	mov	r6, r3
 8009664:	f101 0c14 	add.w	ip, r1, #20
 8009668:	2000      	movs	r0, #0
 800966a:	f8dc 3000 	ldr.w	r3, [ip]
 800966e:	b299      	uxth	r1, r3
 8009670:	fb02 6101 	mla	r1, r2, r1, r6
 8009674:	0c1e      	lsrs	r6, r3, #16
 8009676:	0c0b      	lsrs	r3, r1, #16
 8009678:	fb02 3306 	mla	r3, r2, r6, r3
 800967c:	b289      	uxth	r1, r1
 800967e:	3001      	adds	r0, #1
 8009680:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009684:	4285      	cmp	r5, r0
 8009686:	f84c 1b04 	str.w	r1, [ip], #4
 800968a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800968e:	dcec      	bgt.n	800966a <__multadd+0x12>
 8009690:	b30e      	cbz	r6, 80096d6 <__multadd+0x7e>
 8009692:	68a3      	ldr	r3, [r4, #8]
 8009694:	42ab      	cmp	r3, r5
 8009696:	dc19      	bgt.n	80096cc <__multadd+0x74>
 8009698:	6861      	ldr	r1, [r4, #4]
 800969a:	4638      	mov	r0, r7
 800969c:	3101      	adds	r1, #1
 800969e:	f7ff ff79 	bl	8009594 <_Balloc>
 80096a2:	4680      	mov	r8, r0
 80096a4:	b928      	cbnz	r0, 80096b2 <__multadd+0x5a>
 80096a6:	4602      	mov	r2, r0
 80096a8:	4b0c      	ldr	r3, [pc, #48]	; (80096dc <__multadd+0x84>)
 80096aa:	480d      	ldr	r0, [pc, #52]	; (80096e0 <__multadd+0x88>)
 80096ac:	21b5      	movs	r1, #181	; 0xb5
 80096ae:	f000 fec1 	bl	800a434 <__assert_func>
 80096b2:	6922      	ldr	r2, [r4, #16]
 80096b4:	3202      	adds	r2, #2
 80096b6:	f104 010c 	add.w	r1, r4, #12
 80096ba:	0092      	lsls	r2, r2, #2
 80096bc:	300c      	adds	r0, #12
 80096be:	f7ff ff5b 	bl	8009578 <memcpy>
 80096c2:	4621      	mov	r1, r4
 80096c4:	4638      	mov	r0, r7
 80096c6:	f7ff ffa5 	bl	8009614 <_Bfree>
 80096ca:	4644      	mov	r4, r8
 80096cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096d0:	3501      	adds	r5, #1
 80096d2:	615e      	str	r6, [r3, #20]
 80096d4:	6125      	str	r5, [r4, #16]
 80096d6:	4620      	mov	r0, r4
 80096d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096dc:	0800b220 	.word	0x0800b220
 80096e0:	0800b2ac 	.word	0x0800b2ac

080096e4 <__s2b>:
 80096e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e8:	460c      	mov	r4, r1
 80096ea:	4615      	mov	r5, r2
 80096ec:	461f      	mov	r7, r3
 80096ee:	2209      	movs	r2, #9
 80096f0:	3308      	adds	r3, #8
 80096f2:	4606      	mov	r6, r0
 80096f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80096f8:	2100      	movs	r1, #0
 80096fa:	2201      	movs	r2, #1
 80096fc:	429a      	cmp	r2, r3
 80096fe:	db09      	blt.n	8009714 <__s2b+0x30>
 8009700:	4630      	mov	r0, r6
 8009702:	f7ff ff47 	bl	8009594 <_Balloc>
 8009706:	b940      	cbnz	r0, 800971a <__s2b+0x36>
 8009708:	4602      	mov	r2, r0
 800970a:	4b19      	ldr	r3, [pc, #100]	; (8009770 <__s2b+0x8c>)
 800970c:	4819      	ldr	r0, [pc, #100]	; (8009774 <__s2b+0x90>)
 800970e:	21ce      	movs	r1, #206	; 0xce
 8009710:	f000 fe90 	bl	800a434 <__assert_func>
 8009714:	0052      	lsls	r2, r2, #1
 8009716:	3101      	adds	r1, #1
 8009718:	e7f0      	b.n	80096fc <__s2b+0x18>
 800971a:	9b08      	ldr	r3, [sp, #32]
 800971c:	6143      	str	r3, [r0, #20]
 800971e:	2d09      	cmp	r5, #9
 8009720:	f04f 0301 	mov.w	r3, #1
 8009724:	6103      	str	r3, [r0, #16]
 8009726:	dd16      	ble.n	8009756 <__s2b+0x72>
 8009728:	f104 0909 	add.w	r9, r4, #9
 800972c:	46c8      	mov	r8, r9
 800972e:	442c      	add	r4, r5
 8009730:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009734:	4601      	mov	r1, r0
 8009736:	3b30      	subs	r3, #48	; 0x30
 8009738:	220a      	movs	r2, #10
 800973a:	4630      	mov	r0, r6
 800973c:	f7ff ff8c 	bl	8009658 <__multadd>
 8009740:	45a0      	cmp	r8, r4
 8009742:	d1f5      	bne.n	8009730 <__s2b+0x4c>
 8009744:	f1a5 0408 	sub.w	r4, r5, #8
 8009748:	444c      	add	r4, r9
 800974a:	1b2d      	subs	r5, r5, r4
 800974c:	1963      	adds	r3, r4, r5
 800974e:	42bb      	cmp	r3, r7
 8009750:	db04      	blt.n	800975c <__s2b+0x78>
 8009752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009756:	340a      	adds	r4, #10
 8009758:	2509      	movs	r5, #9
 800975a:	e7f6      	b.n	800974a <__s2b+0x66>
 800975c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009760:	4601      	mov	r1, r0
 8009762:	3b30      	subs	r3, #48	; 0x30
 8009764:	220a      	movs	r2, #10
 8009766:	4630      	mov	r0, r6
 8009768:	f7ff ff76 	bl	8009658 <__multadd>
 800976c:	e7ee      	b.n	800974c <__s2b+0x68>
 800976e:	bf00      	nop
 8009770:	0800b220 	.word	0x0800b220
 8009774:	0800b2ac 	.word	0x0800b2ac

08009778 <__hi0bits>:
 8009778:	0c03      	lsrs	r3, r0, #16
 800977a:	041b      	lsls	r3, r3, #16
 800977c:	b9d3      	cbnz	r3, 80097b4 <__hi0bits+0x3c>
 800977e:	0400      	lsls	r0, r0, #16
 8009780:	2310      	movs	r3, #16
 8009782:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009786:	bf04      	itt	eq
 8009788:	0200      	lsleq	r0, r0, #8
 800978a:	3308      	addeq	r3, #8
 800978c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009790:	bf04      	itt	eq
 8009792:	0100      	lsleq	r0, r0, #4
 8009794:	3304      	addeq	r3, #4
 8009796:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800979a:	bf04      	itt	eq
 800979c:	0080      	lsleq	r0, r0, #2
 800979e:	3302      	addeq	r3, #2
 80097a0:	2800      	cmp	r0, #0
 80097a2:	db05      	blt.n	80097b0 <__hi0bits+0x38>
 80097a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097a8:	f103 0301 	add.w	r3, r3, #1
 80097ac:	bf08      	it	eq
 80097ae:	2320      	moveq	r3, #32
 80097b0:	4618      	mov	r0, r3
 80097b2:	4770      	bx	lr
 80097b4:	2300      	movs	r3, #0
 80097b6:	e7e4      	b.n	8009782 <__hi0bits+0xa>

080097b8 <__lo0bits>:
 80097b8:	6803      	ldr	r3, [r0, #0]
 80097ba:	f013 0207 	ands.w	r2, r3, #7
 80097be:	4601      	mov	r1, r0
 80097c0:	d00b      	beq.n	80097da <__lo0bits+0x22>
 80097c2:	07da      	lsls	r2, r3, #31
 80097c4:	d423      	bmi.n	800980e <__lo0bits+0x56>
 80097c6:	0798      	lsls	r0, r3, #30
 80097c8:	bf49      	itett	mi
 80097ca:	085b      	lsrmi	r3, r3, #1
 80097cc:	089b      	lsrpl	r3, r3, #2
 80097ce:	2001      	movmi	r0, #1
 80097d0:	600b      	strmi	r3, [r1, #0]
 80097d2:	bf5c      	itt	pl
 80097d4:	600b      	strpl	r3, [r1, #0]
 80097d6:	2002      	movpl	r0, #2
 80097d8:	4770      	bx	lr
 80097da:	b298      	uxth	r0, r3
 80097dc:	b9a8      	cbnz	r0, 800980a <__lo0bits+0x52>
 80097de:	0c1b      	lsrs	r3, r3, #16
 80097e0:	2010      	movs	r0, #16
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	b90a      	cbnz	r2, 80097ea <__lo0bits+0x32>
 80097e6:	3008      	adds	r0, #8
 80097e8:	0a1b      	lsrs	r3, r3, #8
 80097ea:	071a      	lsls	r2, r3, #28
 80097ec:	bf04      	itt	eq
 80097ee:	091b      	lsreq	r3, r3, #4
 80097f0:	3004      	addeq	r0, #4
 80097f2:	079a      	lsls	r2, r3, #30
 80097f4:	bf04      	itt	eq
 80097f6:	089b      	lsreq	r3, r3, #2
 80097f8:	3002      	addeq	r0, #2
 80097fa:	07da      	lsls	r2, r3, #31
 80097fc:	d403      	bmi.n	8009806 <__lo0bits+0x4e>
 80097fe:	085b      	lsrs	r3, r3, #1
 8009800:	f100 0001 	add.w	r0, r0, #1
 8009804:	d005      	beq.n	8009812 <__lo0bits+0x5a>
 8009806:	600b      	str	r3, [r1, #0]
 8009808:	4770      	bx	lr
 800980a:	4610      	mov	r0, r2
 800980c:	e7e9      	b.n	80097e2 <__lo0bits+0x2a>
 800980e:	2000      	movs	r0, #0
 8009810:	4770      	bx	lr
 8009812:	2020      	movs	r0, #32
 8009814:	4770      	bx	lr
	...

08009818 <__i2b>:
 8009818:	b510      	push	{r4, lr}
 800981a:	460c      	mov	r4, r1
 800981c:	2101      	movs	r1, #1
 800981e:	f7ff feb9 	bl	8009594 <_Balloc>
 8009822:	4602      	mov	r2, r0
 8009824:	b928      	cbnz	r0, 8009832 <__i2b+0x1a>
 8009826:	4b05      	ldr	r3, [pc, #20]	; (800983c <__i2b+0x24>)
 8009828:	4805      	ldr	r0, [pc, #20]	; (8009840 <__i2b+0x28>)
 800982a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800982e:	f000 fe01 	bl	800a434 <__assert_func>
 8009832:	2301      	movs	r3, #1
 8009834:	6144      	str	r4, [r0, #20]
 8009836:	6103      	str	r3, [r0, #16]
 8009838:	bd10      	pop	{r4, pc}
 800983a:	bf00      	nop
 800983c:	0800b220 	.word	0x0800b220
 8009840:	0800b2ac 	.word	0x0800b2ac

08009844 <__multiply>:
 8009844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009848:	4691      	mov	r9, r2
 800984a:	690a      	ldr	r2, [r1, #16]
 800984c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009850:	429a      	cmp	r2, r3
 8009852:	bfb8      	it	lt
 8009854:	460b      	movlt	r3, r1
 8009856:	460c      	mov	r4, r1
 8009858:	bfbc      	itt	lt
 800985a:	464c      	movlt	r4, r9
 800985c:	4699      	movlt	r9, r3
 800985e:	6927      	ldr	r7, [r4, #16]
 8009860:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009864:	68a3      	ldr	r3, [r4, #8]
 8009866:	6861      	ldr	r1, [r4, #4]
 8009868:	eb07 060a 	add.w	r6, r7, sl
 800986c:	42b3      	cmp	r3, r6
 800986e:	b085      	sub	sp, #20
 8009870:	bfb8      	it	lt
 8009872:	3101      	addlt	r1, #1
 8009874:	f7ff fe8e 	bl	8009594 <_Balloc>
 8009878:	b930      	cbnz	r0, 8009888 <__multiply+0x44>
 800987a:	4602      	mov	r2, r0
 800987c:	4b44      	ldr	r3, [pc, #272]	; (8009990 <__multiply+0x14c>)
 800987e:	4845      	ldr	r0, [pc, #276]	; (8009994 <__multiply+0x150>)
 8009880:	f240 115d 	movw	r1, #349	; 0x15d
 8009884:	f000 fdd6 	bl	800a434 <__assert_func>
 8009888:	f100 0514 	add.w	r5, r0, #20
 800988c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009890:	462b      	mov	r3, r5
 8009892:	2200      	movs	r2, #0
 8009894:	4543      	cmp	r3, r8
 8009896:	d321      	bcc.n	80098dc <__multiply+0x98>
 8009898:	f104 0314 	add.w	r3, r4, #20
 800989c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098a0:	f109 0314 	add.w	r3, r9, #20
 80098a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098a8:	9202      	str	r2, [sp, #8]
 80098aa:	1b3a      	subs	r2, r7, r4
 80098ac:	3a15      	subs	r2, #21
 80098ae:	f022 0203 	bic.w	r2, r2, #3
 80098b2:	3204      	adds	r2, #4
 80098b4:	f104 0115 	add.w	r1, r4, #21
 80098b8:	428f      	cmp	r7, r1
 80098ba:	bf38      	it	cc
 80098bc:	2204      	movcc	r2, #4
 80098be:	9201      	str	r2, [sp, #4]
 80098c0:	9a02      	ldr	r2, [sp, #8]
 80098c2:	9303      	str	r3, [sp, #12]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d80c      	bhi.n	80098e2 <__multiply+0x9e>
 80098c8:	2e00      	cmp	r6, #0
 80098ca:	dd03      	ble.n	80098d4 <__multiply+0x90>
 80098cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d05a      	beq.n	800998a <__multiply+0x146>
 80098d4:	6106      	str	r6, [r0, #16]
 80098d6:	b005      	add	sp, #20
 80098d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098dc:	f843 2b04 	str.w	r2, [r3], #4
 80098e0:	e7d8      	b.n	8009894 <__multiply+0x50>
 80098e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80098e6:	f1ba 0f00 	cmp.w	sl, #0
 80098ea:	d024      	beq.n	8009936 <__multiply+0xf2>
 80098ec:	f104 0e14 	add.w	lr, r4, #20
 80098f0:	46a9      	mov	r9, r5
 80098f2:	f04f 0c00 	mov.w	ip, #0
 80098f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80098fa:	f8d9 1000 	ldr.w	r1, [r9]
 80098fe:	fa1f fb82 	uxth.w	fp, r2
 8009902:	b289      	uxth	r1, r1
 8009904:	fb0a 110b 	mla	r1, sl, fp, r1
 8009908:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800990c:	f8d9 2000 	ldr.w	r2, [r9]
 8009910:	4461      	add	r1, ip
 8009912:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009916:	fb0a c20b 	mla	r2, sl, fp, ip
 800991a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800991e:	b289      	uxth	r1, r1
 8009920:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009924:	4577      	cmp	r7, lr
 8009926:	f849 1b04 	str.w	r1, [r9], #4
 800992a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800992e:	d8e2      	bhi.n	80098f6 <__multiply+0xb2>
 8009930:	9a01      	ldr	r2, [sp, #4]
 8009932:	f845 c002 	str.w	ip, [r5, r2]
 8009936:	9a03      	ldr	r2, [sp, #12]
 8009938:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800993c:	3304      	adds	r3, #4
 800993e:	f1b9 0f00 	cmp.w	r9, #0
 8009942:	d020      	beq.n	8009986 <__multiply+0x142>
 8009944:	6829      	ldr	r1, [r5, #0]
 8009946:	f104 0c14 	add.w	ip, r4, #20
 800994a:	46ae      	mov	lr, r5
 800994c:	f04f 0a00 	mov.w	sl, #0
 8009950:	f8bc b000 	ldrh.w	fp, [ip]
 8009954:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009958:	fb09 220b 	mla	r2, r9, fp, r2
 800995c:	4492      	add	sl, r2
 800995e:	b289      	uxth	r1, r1
 8009960:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009964:	f84e 1b04 	str.w	r1, [lr], #4
 8009968:	f85c 2b04 	ldr.w	r2, [ip], #4
 800996c:	f8be 1000 	ldrh.w	r1, [lr]
 8009970:	0c12      	lsrs	r2, r2, #16
 8009972:	fb09 1102 	mla	r1, r9, r2, r1
 8009976:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800997a:	4567      	cmp	r7, ip
 800997c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009980:	d8e6      	bhi.n	8009950 <__multiply+0x10c>
 8009982:	9a01      	ldr	r2, [sp, #4]
 8009984:	50a9      	str	r1, [r5, r2]
 8009986:	3504      	adds	r5, #4
 8009988:	e79a      	b.n	80098c0 <__multiply+0x7c>
 800998a:	3e01      	subs	r6, #1
 800998c:	e79c      	b.n	80098c8 <__multiply+0x84>
 800998e:	bf00      	nop
 8009990:	0800b220 	.word	0x0800b220
 8009994:	0800b2ac 	.word	0x0800b2ac

08009998 <__pow5mult>:
 8009998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800999c:	4615      	mov	r5, r2
 800999e:	f012 0203 	ands.w	r2, r2, #3
 80099a2:	4606      	mov	r6, r0
 80099a4:	460f      	mov	r7, r1
 80099a6:	d007      	beq.n	80099b8 <__pow5mult+0x20>
 80099a8:	4c25      	ldr	r4, [pc, #148]	; (8009a40 <__pow5mult+0xa8>)
 80099aa:	3a01      	subs	r2, #1
 80099ac:	2300      	movs	r3, #0
 80099ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099b2:	f7ff fe51 	bl	8009658 <__multadd>
 80099b6:	4607      	mov	r7, r0
 80099b8:	10ad      	asrs	r5, r5, #2
 80099ba:	d03d      	beq.n	8009a38 <__pow5mult+0xa0>
 80099bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099be:	b97c      	cbnz	r4, 80099e0 <__pow5mult+0x48>
 80099c0:	2010      	movs	r0, #16
 80099c2:	f7ff fdbf 	bl	8009544 <malloc>
 80099c6:	4602      	mov	r2, r0
 80099c8:	6270      	str	r0, [r6, #36]	; 0x24
 80099ca:	b928      	cbnz	r0, 80099d8 <__pow5mult+0x40>
 80099cc:	4b1d      	ldr	r3, [pc, #116]	; (8009a44 <__pow5mult+0xac>)
 80099ce:	481e      	ldr	r0, [pc, #120]	; (8009a48 <__pow5mult+0xb0>)
 80099d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099d4:	f000 fd2e 	bl	800a434 <__assert_func>
 80099d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099dc:	6004      	str	r4, [r0, #0]
 80099de:	60c4      	str	r4, [r0, #12]
 80099e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099e8:	b94c      	cbnz	r4, 80099fe <__pow5mult+0x66>
 80099ea:	f240 2171 	movw	r1, #625	; 0x271
 80099ee:	4630      	mov	r0, r6
 80099f0:	f7ff ff12 	bl	8009818 <__i2b>
 80099f4:	2300      	movs	r3, #0
 80099f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80099fa:	4604      	mov	r4, r0
 80099fc:	6003      	str	r3, [r0, #0]
 80099fe:	f04f 0900 	mov.w	r9, #0
 8009a02:	07eb      	lsls	r3, r5, #31
 8009a04:	d50a      	bpl.n	8009a1c <__pow5mult+0x84>
 8009a06:	4639      	mov	r1, r7
 8009a08:	4622      	mov	r2, r4
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f7ff ff1a 	bl	8009844 <__multiply>
 8009a10:	4639      	mov	r1, r7
 8009a12:	4680      	mov	r8, r0
 8009a14:	4630      	mov	r0, r6
 8009a16:	f7ff fdfd 	bl	8009614 <_Bfree>
 8009a1a:	4647      	mov	r7, r8
 8009a1c:	106d      	asrs	r5, r5, #1
 8009a1e:	d00b      	beq.n	8009a38 <__pow5mult+0xa0>
 8009a20:	6820      	ldr	r0, [r4, #0]
 8009a22:	b938      	cbnz	r0, 8009a34 <__pow5mult+0x9c>
 8009a24:	4622      	mov	r2, r4
 8009a26:	4621      	mov	r1, r4
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f7ff ff0b 	bl	8009844 <__multiply>
 8009a2e:	6020      	str	r0, [r4, #0]
 8009a30:	f8c0 9000 	str.w	r9, [r0]
 8009a34:	4604      	mov	r4, r0
 8009a36:	e7e4      	b.n	8009a02 <__pow5mult+0x6a>
 8009a38:	4638      	mov	r0, r7
 8009a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a3e:	bf00      	nop
 8009a40:	0800b3f8 	.word	0x0800b3f8
 8009a44:	0800b1ae 	.word	0x0800b1ae
 8009a48:	0800b2ac 	.word	0x0800b2ac

08009a4c <__lshift>:
 8009a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a50:	460c      	mov	r4, r1
 8009a52:	6849      	ldr	r1, [r1, #4]
 8009a54:	6923      	ldr	r3, [r4, #16]
 8009a56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a5a:	68a3      	ldr	r3, [r4, #8]
 8009a5c:	4607      	mov	r7, r0
 8009a5e:	4691      	mov	r9, r2
 8009a60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a64:	f108 0601 	add.w	r6, r8, #1
 8009a68:	42b3      	cmp	r3, r6
 8009a6a:	db0b      	blt.n	8009a84 <__lshift+0x38>
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	f7ff fd91 	bl	8009594 <_Balloc>
 8009a72:	4605      	mov	r5, r0
 8009a74:	b948      	cbnz	r0, 8009a8a <__lshift+0x3e>
 8009a76:	4602      	mov	r2, r0
 8009a78:	4b2a      	ldr	r3, [pc, #168]	; (8009b24 <__lshift+0xd8>)
 8009a7a:	482b      	ldr	r0, [pc, #172]	; (8009b28 <__lshift+0xdc>)
 8009a7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a80:	f000 fcd8 	bl	800a434 <__assert_func>
 8009a84:	3101      	adds	r1, #1
 8009a86:	005b      	lsls	r3, r3, #1
 8009a88:	e7ee      	b.n	8009a68 <__lshift+0x1c>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f100 0114 	add.w	r1, r0, #20
 8009a90:	f100 0210 	add.w	r2, r0, #16
 8009a94:	4618      	mov	r0, r3
 8009a96:	4553      	cmp	r3, sl
 8009a98:	db37      	blt.n	8009b0a <__lshift+0xbe>
 8009a9a:	6920      	ldr	r0, [r4, #16]
 8009a9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009aa0:	f104 0314 	add.w	r3, r4, #20
 8009aa4:	f019 091f 	ands.w	r9, r9, #31
 8009aa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009aac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ab0:	d02f      	beq.n	8009b12 <__lshift+0xc6>
 8009ab2:	f1c9 0e20 	rsb	lr, r9, #32
 8009ab6:	468a      	mov	sl, r1
 8009ab8:	f04f 0c00 	mov.w	ip, #0
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	fa02 f209 	lsl.w	r2, r2, r9
 8009ac2:	ea42 020c 	orr.w	r2, r2, ip
 8009ac6:	f84a 2b04 	str.w	r2, [sl], #4
 8009aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ace:	4298      	cmp	r0, r3
 8009ad0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ad4:	d8f2      	bhi.n	8009abc <__lshift+0x70>
 8009ad6:	1b03      	subs	r3, r0, r4
 8009ad8:	3b15      	subs	r3, #21
 8009ada:	f023 0303 	bic.w	r3, r3, #3
 8009ade:	3304      	adds	r3, #4
 8009ae0:	f104 0215 	add.w	r2, r4, #21
 8009ae4:	4290      	cmp	r0, r2
 8009ae6:	bf38      	it	cc
 8009ae8:	2304      	movcc	r3, #4
 8009aea:	f841 c003 	str.w	ip, [r1, r3]
 8009aee:	f1bc 0f00 	cmp.w	ip, #0
 8009af2:	d001      	beq.n	8009af8 <__lshift+0xac>
 8009af4:	f108 0602 	add.w	r6, r8, #2
 8009af8:	3e01      	subs	r6, #1
 8009afa:	4638      	mov	r0, r7
 8009afc:	612e      	str	r6, [r5, #16]
 8009afe:	4621      	mov	r1, r4
 8009b00:	f7ff fd88 	bl	8009614 <_Bfree>
 8009b04:	4628      	mov	r0, r5
 8009b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b0e:	3301      	adds	r3, #1
 8009b10:	e7c1      	b.n	8009a96 <__lshift+0x4a>
 8009b12:	3904      	subs	r1, #4
 8009b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b18:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b1c:	4298      	cmp	r0, r3
 8009b1e:	d8f9      	bhi.n	8009b14 <__lshift+0xc8>
 8009b20:	e7ea      	b.n	8009af8 <__lshift+0xac>
 8009b22:	bf00      	nop
 8009b24:	0800b220 	.word	0x0800b220
 8009b28:	0800b2ac 	.word	0x0800b2ac

08009b2c <__mcmp>:
 8009b2c:	b530      	push	{r4, r5, lr}
 8009b2e:	6902      	ldr	r2, [r0, #16]
 8009b30:	690c      	ldr	r4, [r1, #16]
 8009b32:	1b12      	subs	r2, r2, r4
 8009b34:	d10e      	bne.n	8009b54 <__mcmp+0x28>
 8009b36:	f100 0314 	add.w	r3, r0, #20
 8009b3a:	3114      	adds	r1, #20
 8009b3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b4c:	42a5      	cmp	r5, r4
 8009b4e:	d003      	beq.n	8009b58 <__mcmp+0x2c>
 8009b50:	d305      	bcc.n	8009b5e <__mcmp+0x32>
 8009b52:	2201      	movs	r2, #1
 8009b54:	4610      	mov	r0, r2
 8009b56:	bd30      	pop	{r4, r5, pc}
 8009b58:	4283      	cmp	r3, r0
 8009b5a:	d3f3      	bcc.n	8009b44 <__mcmp+0x18>
 8009b5c:	e7fa      	b.n	8009b54 <__mcmp+0x28>
 8009b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b62:	e7f7      	b.n	8009b54 <__mcmp+0x28>

08009b64 <__mdiff>:
 8009b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b68:	460c      	mov	r4, r1
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	4620      	mov	r0, r4
 8009b70:	4690      	mov	r8, r2
 8009b72:	f7ff ffdb 	bl	8009b2c <__mcmp>
 8009b76:	1e05      	subs	r5, r0, #0
 8009b78:	d110      	bne.n	8009b9c <__mdiff+0x38>
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	f7ff fd09 	bl	8009594 <_Balloc>
 8009b82:	b930      	cbnz	r0, 8009b92 <__mdiff+0x2e>
 8009b84:	4b3a      	ldr	r3, [pc, #232]	; (8009c70 <__mdiff+0x10c>)
 8009b86:	4602      	mov	r2, r0
 8009b88:	f240 2132 	movw	r1, #562	; 0x232
 8009b8c:	4839      	ldr	r0, [pc, #228]	; (8009c74 <__mdiff+0x110>)
 8009b8e:	f000 fc51 	bl	800a434 <__assert_func>
 8009b92:	2301      	movs	r3, #1
 8009b94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9c:	bfa4      	itt	ge
 8009b9e:	4643      	movge	r3, r8
 8009ba0:	46a0      	movge	r8, r4
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ba8:	bfa6      	itte	ge
 8009baa:	461c      	movge	r4, r3
 8009bac:	2500      	movge	r5, #0
 8009bae:	2501      	movlt	r5, #1
 8009bb0:	f7ff fcf0 	bl	8009594 <_Balloc>
 8009bb4:	b920      	cbnz	r0, 8009bc0 <__mdiff+0x5c>
 8009bb6:	4b2e      	ldr	r3, [pc, #184]	; (8009c70 <__mdiff+0x10c>)
 8009bb8:	4602      	mov	r2, r0
 8009bba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009bbe:	e7e5      	b.n	8009b8c <__mdiff+0x28>
 8009bc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bc4:	6926      	ldr	r6, [r4, #16]
 8009bc6:	60c5      	str	r5, [r0, #12]
 8009bc8:	f104 0914 	add.w	r9, r4, #20
 8009bcc:	f108 0514 	add.w	r5, r8, #20
 8009bd0:	f100 0e14 	add.w	lr, r0, #20
 8009bd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009bd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009bdc:	f108 0210 	add.w	r2, r8, #16
 8009be0:	46f2      	mov	sl, lr
 8009be2:	2100      	movs	r1, #0
 8009be4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009be8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009bec:	fa1f f883 	uxth.w	r8, r3
 8009bf0:	fa11 f18b 	uxtah	r1, r1, fp
 8009bf4:	0c1b      	lsrs	r3, r3, #16
 8009bf6:	eba1 0808 	sub.w	r8, r1, r8
 8009bfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009bfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c02:	fa1f f888 	uxth.w	r8, r8
 8009c06:	1419      	asrs	r1, r3, #16
 8009c08:	454e      	cmp	r6, r9
 8009c0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c0e:	f84a 3b04 	str.w	r3, [sl], #4
 8009c12:	d8e7      	bhi.n	8009be4 <__mdiff+0x80>
 8009c14:	1b33      	subs	r3, r6, r4
 8009c16:	3b15      	subs	r3, #21
 8009c18:	f023 0303 	bic.w	r3, r3, #3
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	3415      	adds	r4, #21
 8009c20:	42a6      	cmp	r6, r4
 8009c22:	bf38      	it	cc
 8009c24:	2304      	movcc	r3, #4
 8009c26:	441d      	add	r5, r3
 8009c28:	4473      	add	r3, lr
 8009c2a:	469e      	mov	lr, r3
 8009c2c:	462e      	mov	r6, r5
 8009c2e:	4566      	cmp	r6, ip
 8009c30:	d30e      	bcc.n	8009c50 <__mdiff+0xec>
 8009c32:	f10c 0203 	add.w	r2, ip, #3
 8009c36:	1b52      	subs	r2, r2, r5
 8009c38:	f022 0203 	bic.w	r2, r2, #3
 8009c3c:	3d03      	subs	r5, #3
 8009c3e:	45ac      	cmp	ip, r5
 8009c40:	bf38      	it	cc
 8009c42:	2200      	movcc	r2, #0
 8009c44:	441a      	add	r2, r3
 8009c46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c4a:	b17b      	cbz	r3, 8009c6c <__mdiff+0x108>
 8009c4c:	6107      	str	r7, [r0, #16]
 8009c4e:	e7a3      	b.n	8009b98 <__mdiff+0x34>
 8009c50:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c54:	fa11 f288 	uxtah	r2, r1, r8
 8009c58:	1414      	asrs	r4, r2, #16
 8009c5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c5e:	b292      	uxth	r2, r2
 8009c60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c64:	f84e 2b04 	str.w	r2, [lr], #4
 8009c68:	1421      	asrs	r1, r4, #16
 8009c6a:	e7e0      	b.n	8009c2e <__mdiff+0xca>
 8009c6c:	3f01      	subs	r7, #1
 8009c6e:	e7ea      	b.n	8009c46 <__mdiff+0xe2>
 8009c70:	0800b220 	.word	0x0800b220
 8009c74:	0800b2ac 	.word	0x0800b2ac

08009c78 <__ulp>:
 8009c78:	b082      	sub	sp, #8
 8009c7a:	ed8d 0b00 	vstr	d0, [sp]
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	4912      	ldr	r1, [pc, #72]	; (8009ccc <__ulp+0x54>)
 8009c82:	4019      	ands	r1, r3
 8009c84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009c88:	2900      	cmp	r1, #0
 8009c8a:	dd05      	ble.n	8009c98 <__ulp+0x20>
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	ec43 2b10 	vmov	d0, r2, r3
 8009c94:	b002      	add	sp, #8
 8009c96:	4770      	bx	lr
 8009c98:	4249      	negs	r1, r1
 8009c9a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009c9e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009ca2:	f04f 0200 	mov.w	r2, #0
 8009ca6:	f04f 0300 	mov.w	r3, #0
 8009caa:	da04      	bge.n	8009cb6 <__ulp+0x3e>
 8009cac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009cb0:	fa41 f300 	asr.w	r3, r1, r0
 8009cb4:	e7ec      	b.n	8009c90 <__ulp+0x18>
 8009cb6:	f1a0 0114 	sub.w	r1, r0, #20
 8009cba:	291e      	cmp	r1, #30
 8009cbc:	bfda      	itte	le
 8009cbe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009cc2:	fa20 f101 	lsrle.w	r1, r0, r1
 8009cc6:	2101      	movgt	r1, #1
 8009cc8:	460a      	mov	r2, r1
 8009cca:	e7e1      	b.n	8009c90 <__ulp+0x18>
 8009ccc:	7ff00000 	.word	0x7ff00000

08009cd0 <__b2d>:
 8009cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd2:	6905      	ldr	r5, [r0, #16]
 8009cd4:	f100 0714 	add.w	r7, r0, #20
 8009cd8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009cdc:	1f2e      	subs	r6, r5, #4
 8009cde:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f7ff fd48 	bl	8009778 <__hi0bits>
 8009ce8:	f1c0 0320 	rsb	r3, r0, #32
 8009cec:	280a      	cmp	r0, #10
 8009cee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009d6c <__b2d+0x9c>
 8009cf2:	600b      	str	r3, [r1, #0]
 8009cf4:	dc14      	bgt.n	8009d20 <__b2d+0x50>
 8009cf6:	f1c0 0e0b 	rsb	lr, r0, #11
 8009cfa:	fa24 f10e 	lsr.w	r1, r4, lr
 8009cfe:	42b7      	cmp	r7, r6
 8009d00:	ea41 030c 	orr.w	r3, r1, ip
 8009d04:	bf34      	ite	cc
 8009d06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d0a:	2100      	movcs	r1, #0
 8009d0c:	3015      	adds	r0, #21
 8009d0e:	fa04 f000 	lsl.w	r0, r4, r0
 8009d12:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d16:	ea40 0201 	orr.w	r2, r0, r1
 8009d1a:	ec43 2b10 	vmov	d0, r2, r3
 8009d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d20:	42b7      	cmp	r7, r6
 8009d22:	bf3a      	itte	cc
 8009d24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d28:	f1a5 0608 	subcc.w	r6, r5, #8
 8009d2c:	2100      	movcs	r1, #0
 8009d2e:	380b      	subs	r0, #11
 8009d30:	d017      	beq.n	8009d62 <__b2d+0x92>
 8009d32:	f1c0 0c20 	rsb	ip, r0, #32
 8009d36:	fa04 f500 	lsl.w	r5, r4, r0
 8009d3a:	42be      	cmp	r6, r7
 8009d3c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009d40:	ea45 0504 	orr.w	r5, r5, r4
 8009d44:	bf8c      	ite	hi
 8009d46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009d4a:	2400      	movls	r4, #0
 8009d4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009d50:	fa01 f000 	lsl.w	r0, r1, r0
 8009d54:	fa24 f40c 	lsr.w	r4, r4, ip
 8009d58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009d5c:	ea40 0204 	orr.w	r2, r0, r4
 8009d60:	e7db      	b.n	8009d1a <__b2d+0x4a>
 8009d62:	ea44 030c 	orr.w	r3, r4, ip
 8009d66:	460a      	mov	r2, r1
 8009d68:	e7d7      	b.n	8009d1a <__b2d+0x4a>
 8009d6a:	bf00      	nop
 8009d6c:	3ff00000 	.word	0x3ff00000

08009d70 <__d2b>:
 8009d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d74:	4689      	mov	r9, r1
 8009d76:	2101      	movs	r1, #1
 8009d78:	ec57 6b10 	vmov	r6, r7, d0
 8009d7c:	4690      	mov	r8, r2
 8009d7e:	f7ff fc09 	bl	8009594 <_Balloc>
 8009d82:	4604      	mov	r4, r0
 8009d84:	b930      	cbnz	r0, 8009d94 <__d2b+0x24>
 8009d86:	4602      	mov	r2, r0
 8009d88:	4b25      	ldr	r3, [pc, #148]	; (8009e20 <__d2b+0xb0>)
 8009d8a:	4826      	ldr	r0, [pc, #152]	; (8009e24 <__d2b+0xb4>)
 8009d8c:	f240 310a 	movw	r1, #778	; 0x30a
 8009d90:	f000 fb50 	bl	800a434 <__assert_func>
 8009d94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d9c:	bb35      	cbnz	r5, 8009dec <__d2b+0x7c>
 8009d9e:	2e00      	cmp	r6, #0
 8009da0:	9301      	str	r3, [sp, #4]
 8009da2:	d028      	beq.n	8009df6 <__d2b+0x86>
 8009da4:	4668      	mov	r0, sp
 8009da6:	9600      	str	r6, [sp, #0]
 8009da8:	f7ff fd06 	bl	80097b8 <__lo0bits>
 8009dac:	9900      	ldr	r1, [sp, #0]
 8009dae:	b300      	cbz	r0, 8009df2 <__d2b+0x82>
 8009db0:	9a01      	ldr	r2, [sp, #4]
 8009db2:	f1c0 0320 	rsb	r3, r0, #32
 8009db6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dba:	430b      	orrs	r3, r1
 8009dbc:	40c2      	lsrs	r2, r0
 8009dbe:	6163      	str	r3, [r4, #20]
 8009dc0:	9201      	str	r2, [sp, #4]
 8009dc2:	9b01      	ldr	r3, [sp, #4]
 8009dc4:	61a3      	str	r3, [r4, #24]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	bf14      	ite	ne
 8009dca:	2202      	movne	r2, #2
 8009dcc:	2201      	moveq	r2, #1
 8009dce:	6122      	str	r2, [r4, #16]
 8009dd0:	b1d5      	cbz	r5, 8009e08 <__d2b+0x98>
 8009dd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009dd6:	4405      	add	r5, r0
 8009dd8:	f8c9 5000 	str.w	r5, [r9]
 8009ddc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009de0:	f8c8 0000 	str.w	r0, [r8]
 8009de4:	4620      	mov	r0, r4
 8009de6:	b003      	add	sp, #12
 8009de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009df0:	e7d5      	b.n	8009d9e <__d2b+0x2e>
 8009df2:	6161      	str	r1, [r4, #20]
 8009df4:	e7e5      	b.n	8009dc2 <__d2b+0x52>
 8009df6:	a801      	add	r0, sp, #4
 8009df8:	f7ff fcde 	bl	80097b8 <__lo0bits>
 8009dfc:	9b01      	ldr	r3, [sp, #4]
 8009dfe:	6163      	str	r3, [r4, #20]
 8009e00:	2201      	movs	r2, #1
 8009e02:	6122      	str	r2, [r4, #16]
 8009e04:	3020      	adds	r0, #32
 8009e06:	e7e3      	b.n	8009dd0 <__d2b+0x60>
 8009e08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e10:	f8c9 0000 	str.w	r0, [r9]
 8009e14:	6918      	ldr	r0, [r3, #16]
 8009e16:	f7ff fcaf 	bl	8009778 <__hi0bits>
 8009e1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e1e:	e7df      	b.n	8009de0 <__d2b+0x70>
 8009e20:	0800b220 	.word	0x0800b220
 8009e24:	0800b2ac 	.word	0x0800b2ac

08009e28 <__ratio>:
 8009e28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	4688      	mov	r8, r1
 8009e2e:	4669      	mov	r1, sp
 8009e30:	4681      	mov	r9, r0
 8009e32:	f7ff ff4d 	bl	8009cd0 <__b2d>
 8009e36:	a901      	add	r1, sp, #4
 8009e38:	4640      	mov	r0, r8
 8009e3a:	ec55 4b10 	vmov	r4, r5, d0
 8009e3e:	f7ff ff47 	bl	8009cd0 <__b2d>
 8009e42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e46:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e4a:	eba3 0c02 	sub.w	ip, r3, r2
 8009e4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e52:	1a9b      	subs	r3, r3, r2
 8009e54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e58:	ec51 0b10 	vmov	r0, r1, d0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	bfd6      	itet	le
 8009e60:	460a      	movle	r2, r1
 8009e62:	462a      	movgt	r2, r5
 8009e64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e68:	468b      	mov	fp, r1
 8009e6a:	462f      	mov	r7, r5
 8009e6c:	bfd4      	ite	le
 8009e6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009e72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009e76:	4620      	mov	r0, r4
 8009e78:	ee10 2a10 	vmov	r2, s0
 8009e7c:	465b      	mov	r3, fp
 8009e7e:	4639      	mov	r1, r7
 8009e80:	f7f6 fcf4 	bl	800086c <__aeabi_ddiv>
 8009e84:	ec41 0b10 	vmov	d0, r0, r1
 8009e88:	b003      	add	sp, #12
 8009e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e8e <__copybits>:
 8009e8e:	3901      	subs	r1, #1
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	1149      	asrs	r1, r1, #5
 8009e94:	6914      	ldr	r4, [r2, #16]
 8009e96:	3101      	adds	r1, #1
 8009e98:	f102 0314 	add.w	r3, r2, #20
 8009e9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ea0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ea4:	1f05      	subs	r5, r0, #4
 8009ea6:	42a3      	cmp	r3, r4
 8009ea8:	d30c      	bcc.n	8009ec4 <__copybits+0x36>
 8009eaa:	1aa3      	subs	r3, r4, r2
 8009eac:	3b11      	subs	r3, #17
 8009eae:	f023 0303 	bic.w	r3, r3, #3
 8009eb2:	3211      	adds	r2, #17
 8009eb4:	42a2      	cmp	r2, r4
 8009eb6:	bf88      	it	hi
 8009eb8:	2300      	movhi	r3, #0
 8009eba:	4418      	add	r0, r3
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	4288      	cmp	r0, r1
 8009ec0:	d305      	bcc.n	8009ece <__copybits+0x40>
 8009ec2:	bd70      	pop	{r4, r5, r6, pc}
 8009ec4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ec8:	f845 6f04 	str.w	r6, [r5, #4]!
 8009ecc:	e7eb      	b.n	8009ea6 <__copybits+0x18>
 8009ece:	f840 3b04 	str.w	r3, [r0], #4
 8009ed2:	e7f4      	b.n	8009ebe <__copybits+0x30>

08009ed4 <__any_on>:
 8009ed4:	f100 0214 	add.w	r2, r0, #20
 8009ed8:	6900      	ldr	r0, [r0, #16]
 8009eda:	114b      	asrs	r3, r1, #5
 8009edc:	4298      	cmp	r0, r3
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	db11      	blt.n	8009f06 <__any_on+0x32>
 8009ee2:	dd0a      	ble.n	8009efa <__any_on+0x26>
 8009ee4:	f011 011f 	ands.w	r1, r1, #31
 8009ee8:	d007      	beq.n	8009efa <__any_on+0x26>
 8009eea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009eee:	fa24 f001 	lsr.w	r0, r4, r1
 8009ef2:	fa00 f101 	lsl.w	r1, r0, r1
 8009ef6:	428c      	cmp	r4, r1
 8009ef8:	d10b      	bne.n	8009f12 <__any_on+0x3e>
 8009efa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d803      	bhi.n	8009f0a <__any_on+0x36>
 8009f02:	2000      	movs	r0, #0
 8009f04:	bd10      	pop	{r4, pc}
 8009f06:	4603      	mov	r3, r0
 8009f08:	e7f7      	b.n	8009efa <__any_on+0x26>
 8009f0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f0e:	2900      	cmp	r1, #0
 8009f10:	d0f5      	beq.n	8009efe <__any_on+0x2a>
 8009f12:	2001      	movs	r0, #1
 8009f14:	e7f6      	b.n	8009f04 <__any_on+0x30>

08009f16 <_calloc_r>:
 8009f16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f18:	fba1 2402 	umull	r2, r4, r1, r2
 8009f1c:	b94c      	cbnz	r4, 8009f32 <_calloc_r+0x1c>
 8009f1e:	4611      	mov	r1, r2
 8009f20:	9201      	str	r2, [sp, #4]
 8009f22:	f000 f87b 	bl	800a01c <_malloc_r>
 8009f26:	9a01      	ldr	r2, [sp, #4]
 8009f28:	4605      	mov	r5, r0
 8009f2a:	b930      	cbnz	r0, 8009f3a <_calloc_r+0x24>
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	b003      	add	sp, #12
 8009f30:	bd30      	pop	{r4, r5, pc}
 8009f32:	220c      	movs	r2, #12
 8009f34:	6002      	str	r2, [r0, #0]
 8009f36:	2500      	movs	r5, #0
 8009f38:	e7f8      	b.n	8009f2c <_calloc_r+0x16>
 8009f3a:	4621      	mov	r1, r4
 8009f3c:	f7fc fbbe 	bl	80066bc <memset>
 8009f40:	e7f4      	b.n	8009f2c <_calloc_r+0x16>
	...

08009f44 <_free_r>:
 8009f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f46:	2900      	cmp	r1, #0
 8009f48:	d044      	beq.n	8009fd4 <_free_r+0x90>
 8009f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f4e:	9001      	str	r0, [sp, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f1a1 0404 	sub.w	r4, r1, #4
 8009f56:	bfb8      	it	lt
 8009f58:	18e4      	addlt	r4, r4, r3
 8009f5a:	f000 fab5 	bl	800a4c8 <__malloc_lock>
 8009f5e:	4a1e      	ldr	r2, [pc, #120]	; (8009fd8 <_free_r+0x94>)
 8009f60:	9801      	ldr	r0, [sp, #4]
 8009f62:	6813      	ldr	r3, [r2, #0]
 8009f64:	b933      	cbnz	r3, 8009f74 <_free_r+0x30>
 8009f66:	6063      	str	r3, [r4, #4]
 8009f68:	6014      	str	r4, [r2, #0]
 8009f6a:	b003      	add	sp, #12
 8009f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f70:	f000 bab0 	b.w	800a4d4 <__malloc_unlock>
 8009f74:	42a3      	cmp	r3, r4
 8009f76:	d908      	bls.n	8009f8a <_free_r+0x46>
 8009f78:	6825      	ldr	r5, [r4, #0]
 8009f7a:	1961      	adds	r1, r4, r5
 8009f7c:	428b      	cmp	r3, r1
 8009f7e:	bf01      	itttt	eq
 8009f80:	6819      	ldreq	r1, [r3, #0]
 8009f82:	685b      	ldreq	r3, [r3, #4]
 8009f84:	1949      	addeq	r1, r1, r5
 8009f86:	6021      	streq	r1, [r4, #0]
 8009f88:	e7ed      	b.n	8009f66 <_free_r+0x22>
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	b10b      	cbz	r3, 8009f94 <_free_r+0x50>
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	d9fa      	bls.n	8009f8a <_free_r+0x46>
 8009f94:	6811      	ldr	r1, [r2, #0]
 8009f96:	1855      	adds	r5, r2, r1
 8009f98:	42a5      	cmp	r5, r4
 8009f9a:	d10b      	bne.n	8009fb4 <_free_r+0x70>
 8009f9c:	6824      	ldr	r4, [r4, #0]
 8009f9e:	4421      	add	r1, r4
 8009fa0:	1854      	adds	r4, r2, r1
 8009fa2:	42a3      	cmp	r3, r4
 8009fa4:	6011      	str	r1, [r2, #0]
 8009fa6:	d1e0      	bne.n	8009f6a <_free_r+0x26>
 8009fa8:	681c      	ldr	r4, [r3, #0]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	6053      	str	r3, [r2, #4]
 8009fae:	4421      	add	r1, r4
 8009fb0:	6011      	str	r1, [r2, #0]
 8009fb2:	e7da      	b.n	8009f6a <_free_r+0x26>
 8009fb4:	d902      	bls.n	8009fbc <_free_r+0x78>
 8009fb6:	230c      	movs	r3, #12
 8009fb8:	6003      	str	r3, [r0, #0]
 8009fba:	e7d6      	b.n	8009f6a <_free_r+0x26>
 8009fbc:	6825      	ldr	r5, [r4, #0]
 8009fbe:	1961      	adds	r1, r4, r5
 8009fc0:	428b      	cmp	r3, r1
 8009fc2:	bf04      	itt	eq
 8009fc4:	6819      	ldreq	r1, [r3, #0]
 8009fc6:	685b      	ldreq	r3, [r3, #4]
 8009fc8:	6063      	str	r3, [r4, #4]
 8009fca:	bf04      	itt	eq
 8009fcc:	1949      	addeq	r1, r1, r5
 8009fce:	6021      	streq	r1, [r4, #0]
 8009fd0:	6054      	str	r4, [r2, #4]
 8009fd2:	e7ca      	b.n	8009f6a <_free_r+0x26>
 8009fd4:	b003      	add	sp, #12
 8009fd6:	bd30      	pop	{r4, r5, pc}
 8009fd8:	20000bf8 	.word	0x20000bf8

08009fdc <sbrk_aligned>:
 8009fdc:	b570      	push	{r4, r5, r6, lr}
 8009fde:	4e0e      	ldr	r6, [pc, #56]	; (800a018 <sbrk_aligned+0x3c>)
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	6831      	ldr	r1, [r6, #0]
 8009fe4:	4605      	mov	r5, r0
 8009fe6:	b911      	cbnz	r1, 8009fee <sbrk_aligned+0x12>
 8009fe8:	f000 f9f2 	bl	800a3d0 <_sbrk_r>
 8009fec:	6030      	str	r0, [r6, #0]
 8009fee:	4621      	mov	r1, r4
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f000 f9ed 	bl	800a3d0 <_sbrk_r>
 8009ff6:	1c43      	adds	r3, r0, #1
 8009ff8:	d00a      	beq.n	800a010 <sbrk_aligned+0x34>
 8009ffa:	1cc4      	adds	r4, r0, #3
 8009ffc:	f024 0403 	bic.w	r4, r4, #3
 800a000:	42a0      	cmp	r0, r4
 800a002:	d007      	beq.n	800a014 <sbrk_aligned+0x38>
 800a004:	1a21      	subs	r1, r4, r0
 800a006:	4628      	mov	r0, r5
 800a008:	f000 f9e2 	bl	800a3d0 <_sbrk_r>
 800a00c:	3001      	adds	r0, #1
 800a00e:	d101      	bne.n	800a014 <sbrk_aligned+0x38>
 800a010:	f04f 34ff 	mov.w	r4, #4294967295
 800a014:	4620      	mov	r0, r4
 800a016:	bd70      	pop	{r4, r5, r6, pc}
 800a018:	20000bfc 	.word	0x20000bfc

0800a01c <_malloc_r>:
 800a01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a020:	1ccd      	adds	r5, r1, #3
 800a022:	f025 0503 	bic.w	r5, r5, #3
 800a026:	3508      	adds	r5, #8
 800a028:	2d0c      	cmp	r5, #12
 800a02a:	bf38      	it	cc
 800a02c:	250c      	movcc	r5, #12
 800a02e:	2d00      	cmp	r5, #0
 800a030:	4607      	mov	r7, r0
 800a032:	db01      	blt.n	800a038 <_malloc_r+0x1c>
 800a034:	42a9      	cmp	r1, r5
 800a036:	d905      	bls.n	800a044 <_malloc_r+0x28>
 800a038:	230c      	movs	r3, #12
 800a03a:	603b      	str	r3, [r7, #0]
 800a03c:	2600      	movs	r6, #0
 800a03e:	4630      	mov	r0, r6
 800a040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a044:	4e2e      	ldr	r6, [pc, #184]	; (800a100 <_malloc_r+0xe4>)
 800a046:	f000 fa3f 	bl	800a4c8 <__malloc_lock>
 800a04a:	6833      	ldr	r3, [r6, #0]
 800a04c:	461c      	mov	r4, r3
 800a04e:	bb34      	cbnz	r4, 800a09e <_malloc_r+0x82>
 800a050:	4629      	mov	r1, r5
 800a052:	4638      	mov	r0, r7
 800a054:	f7ff ffc2 	bl	8009fdc <sbrk_aligned>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	4604      	mov	r4, r0
 800a05c:	d14d      	bne.n	800a0fa <_malloc_r+0xde>
 800a05e:	6834      	ldr	r4, [r6, #0]
 800a060:	4626      	mov	r6, r4
 800a062:	2e00      	cmp	r6, #0
 800a064:	d140      	bne.n	800a0e8 <_malloc_r+0xcc>
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	4631      	mov	r1, r6
 800a06a:	4638      	mov	r0, r7
 800a06c:	eb04 0803 	add.w	r8, r4, r3
 800a070:	f000 f9ae 	bl	800a3d0 <_sbrk_r>
 800a074:	4580      	cmp	r8, r0
 800a076:	d13a      	bne.n	800a0ee <_malloc_r+0xd2>
 800a078:	6821      	ldr	r1, [r4, #0]
 800a07a:	3503      	adds	r5, #3
 800a07c:	1a6d      	subs	r5, r5, r1
 800a07e:	f025 0503 	bic.w	r5, r5, #3
 800a082:	3508      	adds	r5, #8
 800a084:	2d0c      	cmp	r5, #12
 800a086:	bf38      	it	cc
 800a088:	250c      	movcc	r5, #12
 800a08a:	4629      	mov	r1, r5
 800a08c:	4638      	mov	r0, r7
 800a08e:	f7ff ffa5 	bl	8009fdc <sbrk_aligned>
 800a092:	3001      	adds	r0, #1
 800a094:	d02b      	beq.n	800a0ee <_malloc_r+0xd2>
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	442b      	add	r3, r5
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	e00e      	b.n	800a0bc <_malloc_r+0xa0>
 800a09e:	6822      	ldr	r2, [r4, #0]
 800a0a0:	1b52      	subs	r2, r2, r5
 800a0a2:	d41e      	bmi.n	800a0e2 <_malloc_r+0xc6>
 800a0a4:	2a0b      	cmp	r2, #11
 800a0a6:	d916      	bls.n	800a0d6 <_malloc_r+0xba>
 800a0a8:	1961      	adds	r1, r4, r5
 800a0aa:	42a3      	cmp	r3, r4
 800a0ac:	6025      	str	r5, [r4, #0]
 800a0ae:	bf18      	it	ne
 800a0b0:	6059      	strne	r1, [r3, #4]
 800a0b2:	6863      	ldr	r3, [r4, #4]
 800a0b4:	bf08      	it	eq
 800a0b6:	6031      	streq	r1, [r6, #0]
 800a0b8:	5162      	str	r2, [r4, r5]
 800a0ba:	604b      	str	r3, [r1, #4]
 800a0bc:	4638      	mov	r0, r7
 800a0be:	f104 060b 	add.w	r6, r4, #11
 800a0c2:	f000 fa07 	bl	800a4d4 <__malloc_unlock>
 800a0c6:	f026 0607 	bic.w	r6, r6, #7
 800a0ca:	1d23      	adds	r3, r4, #4
 800a0cc:	1af2      	subs	r2, r6, r3
 800a0ce:	d0b6      	beq.n	800a03e <_malloc_r+0x22>
 800a0d0:	1b9b      	subs	r3, r3, r6
 800a0d2:	50a3      	str	r3, [r4, r2]
 800a0d4:	e7b3      	b.n	800a03e <_malloc_r+0x22>
 800a0d6:	6862      	ldr	r2, [r4, #4]
 800a0d8:	42a3      	cmp	r3, r4
 800a0da:	bf0c      	ite	eq
 800a0dc:	6032      	streq	r2, [r6, #0]
 800a0de:	605a      	strne	r2, [r3, #4]
 800a0e0:	e7ec      	b.n	800a0bc <_malloc_r+0xa0>
 800a0e2:	4623      	mov	r3, r4
 800a0e4:	6864      	ldr	r4, [r4, #4]
 800a0e6:	e7b2      	b.n	800a04e <_malloc_r+0x32>
 800a0e8:	4634      	mov	r4, r6
 800a0ea:	6876      	ldr	r6, [r6, #4]
 800a0ec:	e7b9      	b.n	800a062 <_malloc_r+0x46>
 800a0ee:	230c      	movs	r3, #12
 800a0f0:	603b      	str	r3, [r7, #0]
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	f000 f9ee 	bl	800a4d4 <__malloc_unlock>
 800a0f8:	e7a1      	b.n	800a03e <_malloc_r+0x22>
 800a0fa:	6025      	str	r5, [r4, #0]
 800a0fc:	e7de      	b.n	800a0bc <_malloc_r+0xa0>
 800a0fe:	bf00      	nop
 800a100:	20000bf8 	.word	0x20000bf8

0800a104 <__ssputs_r>:
 800a104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a108:	688e      	ldr	r6, [r1, #8]
 800a10a:	429e      	cmp	r6, r3
 800a10c:	4682      	mov	sl, r0
 800a10e:	460c      	mov	r4, r1
 800a110:	4690      	mov	r8, r2
 800a112:	461f      	mov	r7, r3
 800a114:	d838      	bhi.n	800a188 <__ssputs_r+0x84>
 800a116:	898a      	ldrh	r2, [r1, #12]
 800a118:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a11c:	d032      	beq.n	800a184 <__ssputs_r+0x80>
 800a11e:	6825      	ldr	r5, [r4, #0]
 800a120:	6909      	ldr	r1, [r1, #16]
 800a122:	eba5 0901 	sub.w	r9, r5, r1
 800a126:	6965      	ldr	r5, [r4, #20]
 800a128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a12c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a130:	3301      	adds	r3, #1
 800a132:	444b      	add	r3, r9
 800a134:	106d      	asrs	r5, r5, #1
 800a136:	429d      	cmp	r5, r3
 800a138:	bf38      	it	cc
 800a13a:	461d      	movcc	r5, r3
 800a13c:	0553      	lsls	r3, r2, #21
 800a13e:	d531      	bpl.n	800a1a4 <__ssputs_r+0xa0>
 800a140:	4629      	mov	r1, r5
 800a142:	f7ff ff6b 	bl	800a01c <_malloc_r>
 800a146:	4606      	mov	r6, r0
 800a148:	b950      	cbnz	r0, 800a160 <__ssputs_r+0x5c>
 800a14a:	230c      	movs	r3, #12
 800a14c:	f8ca 3000 	str.w	r3, [sl]
 800a150:	89a3      	ldrh	r3, [r4, #12]
 800a152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a156:	81a3      	strh	r3, [r4, #12]
 800a158:	f04f 30ff 	mov.w	r0, #4294967295
 800a15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a160:	6921      	ldr	r1, [r4, #16]
 800a162:	464a      	mov	r2, r9
 800a164:	f7ff fa08 	bl	8009578 <memcpy>
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a16e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a172:	81a3      	strh	r3, [r4, #12]
 800a174:	6126      	str	r6, [r4, #16]
 800a176:	6165      	str	r5, [r4, #20]
 800a178:	444e      	add	r6, r9
 800a17a:	eba5 0509 	sub.w	r5, r5, r9
 800a17e:	6026      	str	r6, [r4, #0]
 800a180:	60a5      	str	r5, [r4, #8]
 800a182:	463e      	mov	r6, r7
 800a184:	42be      	cmp	r6, r7
 800a186:	d900      	bls.n	800a18a <__ssputs_r+0x86>
 800a188:	463e      	mov	r6, r7
 800a18a:	6820      	ldr	r0, [r4, #0]
 800a18c:	4632      	mov	r2, r6
 800a18e:	4641      	mov	r1, r8
 800a190:	f000 f980 	bl	800a494 <memmove>
 800a194:	68a3      	ldr	r3, [r4, #8]
 800a196:	1b9b      	subs	r3, r3, r6
 800a198:	60a3      	str	r3, [r4, #8]
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	4433      	add	r3, r6
 800a19e:	6023      	str	r3, [r4, #0]
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	e7db      	b.n	800a15c <__ssputs_r+0x58>
 800a1a4:	462a      	mov	r2, r5
 800a1a6:	f000 f99b 	bl	800a4e0 <_realloc_r>
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	d1e1      	bne.n	800a174 <__ssputs_r+0x70>
 800a1b0:	6921      	ldr	r1, [r4, #16]
 800a1b2:	4650      	mov	r0, sl
 800a1b4:	f7ff fec6 	bl	8009f44 <_free_r>
 800a1b8:	e7c7      	b.n	800a14a <__ssputs_r+0x46>
	...

0800a1bc <_svfiprintf_r>:
 800a1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c0:	4698      	mov	r8, r3
 800a1c2:	898b      	ldrh	r3, [r1, #12]
 800a1c4:	061b      	lsls	r3, r3, #24
 800a1c6:	b09d      	sub	sp, #116	; 0x74
 800a1c8:	4607      	mov	r7, r0
 800a1ca:	460d      	mov	r5, r1
 800a1cc:	4614      	mov	r4, r2
 800a1ce:	d50e      	bpl.n	800a1ee <_svfiprintf_r+0x32>
 800a1d0:	690b      	ldr	r3, [r1, #16]
 800a1d2:	b963      	cbnz	r3, 800a1ee <_svfiprintf_r+0x32>
 800a1d4:	2140      	movs	r1, #64	; 0x40
 800a1d6:	f7ff ff21 	bl	800a01c <_malloc_r>
 800a1da:	6028      	str	r0, [r5, #0]
 800a1dc:	6128      	str	r0, [r5, #16]
 800a1de:	b920      	cbnz	r0, 800a1ea <_svfiprintf_r+0x2e>
 800a1e0:	230c      	movs	r3, #12
 800a1e2:	603b      	str	r3, [r7, #0]
 800a1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e8:	e0d1      	b.n	800a38e <_svfiprintf_r+0x1d2>
 800a1ea:	2340      	movs	r3, #64	; 0x40
 800a1ec:	616b      	str	r3, [r5, #20]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f2:	2320      	movs	r3, #32
 800a1f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1fc:	2330      	movs	r3, #48	; 0x30
 800a1fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a3a8 <_svfiprintf_r+0x1ec>
 800a202:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a206:	f04f 0901 	mov.w	r9, #1
 800a20a:	4623      	mov	r3, r4
 800a20c:	469a      	mov	sl, r3
 800a20e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a212:	b10a      	cbz	r2, 800a218 <_svfiprintf_r+0x5c>
 800a214:	2a25      	cmp	r2, #37	; 0x25
 800a216:	d1f9      	bne.n	800a20c <_svfiprintf_r+0x50>
 800a218:	ebba 0b04 	subs.w	fp, sl, r4
 800a21c:	d00b      	beq.n	800a236 <_svfiprintf_r+0x7a>
 800a21e:	465b      	mov	r3, fp
 800a220:	4622      	mov	r2, r4
 800a222:	4629      	mov	r1, r5
 800a224:	4638      	mov	r0, r7
 800a226:	f7ff ff6d 	bl	800a104 <__ssputs_r>
 800a22a:	3001      	adds	r0, #1
 800a22c:	f000 80aa 	beq.w	800a384 <_svfiprintf_r+0x1c8>
 800a230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a232:	445a      	add	r2, fp
 800a234:	9209      	str	r2, [sp, #36]	; 0x24
 800a236:	f89a 3000 	ldrb.w	r3, [sl]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f000 80a2 	beq.w	800a384 <_svfiprintf_r+0x1c8>
 800a240:	2300      	movs	r3, #0
 800a242:	f04f 32ff 	mov.w	r2, #4294967295
 800a246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a24a:	f10a 0a01 	add.w	sl, sl, #1
 800a24e:	9304      	str	r3, [sp, #16]
 800a250:	9307      	str	r3, [sp, #28]
 800a252:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a256:	931a      	str	r3, [sp, #104]	; 0x68
 800a258:	4654      	mov	r4, sl
 800a25a:	2205      	movs	r2, #5
 800a25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a260:	4851      	ldr	r0, [pc, #324]	; (800a3a8 <_svfiprintf_r+0x1ec>)
 800a262:	f7f5 ffcd 	bl	8000200 <memchr>
 800a266:	9a04      	ldr	r2, [sp, #16]
 800a268:	b9d8      	cbnz	r0, 800a2a2 <_svfiprintf_r+0xe6>
 800a26a:	06d0      	lsls	r0, r2, #27
 800a26c:	bf44      	itt	mi
 800a26e:	2320      	movmi	r3, #32
 800a270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a274:	0711      	lsls	r1, r2, #28
 800a276:	bf44      	itt	mi
 800a278:	232b      	movmi	r3, #43	; 0x2b
 800a27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a27e:	f89a 3000 	ldrb.w	r3, [sl]
 800a282:	2b2a      	cmp	r3, #42	; 0x2a
 800a284:	d015      	beq.n	800a2b2 <_svfiprintf_r+0xf6>
 800a286:	9a07      	ldr	r2, [sp, #28]
 800a288:	4654      	mov	r4, sl
 800a28a:	2000      	movs	r0, #0
 800a28c:	f04f 0c0a 	mov.w	ip, #10
 800a290:	4621      	mov	r1, r4
 800a292:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a296:	3b30      	subs	r3, #48	; 0x30
 800a298:	2b09      	cmp	r3, #9
 800a29a:	d94e      	bls.n	800a33a <_svfiprintf_r+0x17e>
 800a29c:	b1b0      	cbz	r0, 800a2cc <_svfiprintf_r+0x110>
 800a29e:	9207      	str	r2, [sp, #28]
 800a2a0:	e014      	b.n	800a2cc <_svfiprintf_r+0x110>
 800a2a2:	eba0 0308 	sub.w	r3, r0, r8
 800a2a6:	fa09 f303 	lsl.w	r3, r9, r3
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	9304      	str	r3, [sp, #16]
 800a2ae:	46a2      	mov	sl, r4
 800a2b0:	e7d2      	b.n	800a258 <_svfiprintf_r+0x9c>
 800a2b2:	9b03      	ldr	r3, [sp, #12]
 800a2b4:	1d19      	adds	r1, r3, #4
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	9103      	str	r1, [sp, #12]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	bfbb      	ittet	lt
 800a2be:	425b      	neglt	r3, r3
 800a2c0:	f042 0202 	orrlt.w	r2, r2, #2
 800a2c4:	9307      	strge	r3, [sp, #28]
 800a2c6:	9307      	strlt	r3, [sp, #28]
 800a2c8:	bfb8      	it	lt
 800a2ca:	9204      	strlt	r2, [sp, #16]
 800a2cc:	7823      	ldrb	r3, [r4, #0]
 800a2ce:	2b2e      	cmp	r3, #46	; 0x2e
 800a2d0:	d10c      	bne.n	800a2ec <_svfiprintf_r+0x130>
 800a2d2:	7863      	ldrb	r3, [r4, #1]
 800a2d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a2d6:	d135      	bne.n	800a344 <_svfiprintf_r+0x188>
 800a2d8:	9b03      	ldr	r3, [sp, #12]
 800a2da:	1d1a      	adds	r2, r3, #4
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	9203      	str	r2, [sp, #12]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	bfb8      	it	lt
 800a2e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2e8:	3402      	adds	r4, #2
 800a2ea:	9305      	str	r3, [sp, #20]
 800a2ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3b8 <_svfiprintf_r+0x1fc>
 800a2f0:	7821      	ldrb	r1, [r4, #0]
 800a2f2:	2203      	movs	r2, #3
 800a2f4:	4650      	mov	r0, sl
 800a2f6:	f7f5 ff83 	bl	8000200 <memchr>
 800a2fa:	b140      	cbz	r0, 800a30e <_svfiprintf_r+0x152>
 800a2fc:	2340      	movs	r3, #64	; 0x40
 800a2fe:	eba0 000a 	sub.w	r0, r0, sl
 800a302:	fa03 f000 	lsl.w	r0, r3, r0
 800a306:	9b04      	ldr	r3, [sp, #16]
 800a308:	4303      	orrs	r3, r0
 800a30a:	3401      	adds	r4, #1
 800a30c:	9304      	str	r3, [sp, #16]
 800a30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a312:	4826      	ldr	r0, [pc, #152]	; (800a3ac <_svfiprintf_r+0x1f0>)
 800a314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a318:	2206      	movs	r2, #6
 800a31a:	f7f5 ff71 	bl	8000200 <memchr>
 800a31e:	2800      	cmp	r0, #0
 800a320:	d038      	beq.n	800a394 <_svfiprintf_r+0x1d8>
 800a322:	4b23      	ldr	r3, [pc, #140]	; (800a3b0 <_svfiprintf_r+0x1f4>)
 800a324:	bb1b      	cbnz	r3, 800a36e <_svfiprintf_r+0x1b2>
 800a326:	9b03      	ldr	r3, [sp, #12]
 800a328:	3307      	adds	r3, #7
 800a32a:	f023 0307 	bic.w	r3, r3, #7
 800a32e:	3308      	adds	r3, #8
 800a330:	9303      	str	r3, [sp, #12]
 800a332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a334:	4433      	add	r3, r6
 800a336:	9309      	str	r3, [sp, #36]	; 0x24
 800a338:	e767      	b.n	800a20a <_svfiprintf_r+0x4e>
 800a33a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a33e:	460c      	mov	r4, r1
 800a340:	2001      	movs	r0, #1
 800a342:	e7a5      	b.n	800a290 <_svfiprintf_r+0xd4>
 800a344:	2300      	movs	r3, #0
 800a346:	3401      	adds	r4, #1
 800a348:	9305      	str	r3, [sp, #20]
 800a34a:	4619      	mov	r1, r3
 800a34c:	f04f 0c0a 	mov.w	ip, #10
 800a350:	4620      	mov	r0, r4
 800a352:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a356:	3a30      	subs	r2, #48	; 0x30
 800a358:	2a09      	cmp	r2, #9
 800a35a:	d903      	bls.n	800a364 <_svfiprintf_r+0x1a8>
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d0c5      	beq.n	800a2ec <_svfiprintf_r+0x130>
 800a360:	9105      	str	r1, [sp, #20]
 800a362:	e7c3      	b.n	800a2ec <_svfiprintf_r+0x130>
 800a364:	fb0c 2101 	mla	r1, ip, r1, r2
 800a368:	4604      	mov	r4, r0
 800a36a:	2301      	movs	r3, #1
 800a36c:	e7f0      	b.n	800a350 <_svfiprintf_r+0x194>
 800a36e:	ab03      	add	r3, sp, #12
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	462a      	mov	r2, r5
 800a374:	4b0f      	ldr	r3, [pc, #60]	; (800a3b4 <_svfiprintf_r+0x1f8>)
 800a376:	a904      	add	r1, sp, #16
 800a378:	4638      	mov	r0, r7
 800a37a:	f7fc fa47 	bl	800680c <_printf_float>
 800a37e:	1c42      	adds	r2, r0, #1
 800a380:	4606      	mov	r6, r0
 800a382:	d1d6      	bne.n	800a332 <_svfiprintf_r+0x176>
 800a384:	89ab      	ldrh	r3, [r5, #12]
 800a386:	065b      	lsls	r3, r3, #25
 800a388:	f53f af2c 	bmi.w	800a1e4 <_svfiprintf_r+0x28>
 800a38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a38e:	b01d      	add	sp, #116	; 0x74
 800a390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a394:	ab03      	add	r3, sp, #12
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	462a      	mov	r2, r5
 800a39a:	4b06      	ldr	r3, [pc, #24]	; (800a3b4 <_svfiprintf_r+0x1f8>)
 800a39c:	a904      	add	r1, sp, #16
 800a39e:	4638      	mov	r0, r7
 800a3a0:	f7fc fcd8 	bl	8006d54 <_printf_i>
 800a3a4:	e7eb      	b.n	800a37e <_svfiprintf_r+0x1c2>
 800a3a6:	bf00      	nop
 800a3a8:	0800b404 	.word	0x0800b404
 800a3ac:	0800b40e 	.word	0x0800b40e
 800a3b0:	0800680d 	.word	0x0800680d
 800a3b4:	0800a105 	.word	0x0800a105
 800a3b8:	0800b40a 	.word	0x0800b40a
 800a3bc:	00000000 	.word	0x00000000

0800a3c0 <nan>:
 800a3c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a3c8 <nan+0x8>
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	00000000 	.word	0x00000000
 800a3cc:	7ff80000 	.word	0x7ff80000

0800a3d0 <_sbrk_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d06      	ldr	r5, [pc, #24]	; (800a3ec <_sbrk_r+0x1c>)
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	4608      	mov	r0, r1
 800a3da:	602b      	str	r3, [r5, #0]
 800a3dc:	f7f7 ffe2 	bl	80023a4 <_sbrk>
 800a3e0:	1c43      	adds	r3, r0, #1
 800a3e2:	d102      	bne.n	800a3ea <_sbrk_r+0x1a>
 800a3e4:	682b      	ldr	r3, [r5, #0]
 800a3e6:	b103      	cbz	r3, 800a3ea <_sbrk_r+0x1a>
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	bd38      	pop	{r3, r4, r5, pc}
 800a3ec:	20000c00 	.word	0x20000c00

0800a3f0 <strncmp>:
 800a3f0:	b510      	push	{r4, lr}
 800a3f2:	b17a      	cbz	r2, 800a414 <strncmp+0x24>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	3901      	subs	r1, #1
 800a3f8:	1884      	adds	r4, r0, r2
 800a3fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a3fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a402:	4290      	cmp	r0, r2
 800a404:	d101      	bne.n	800a40a <strncmp+0x1a>
 800a406:	42a3      	cmp	r3, r4
 800a408:	d101      	bne.n	800a40e <strncmp+0x1e>
 800a40a:	1a80      	subs	r0, r0, r2
 800a40c:	bd10      	pop	{r4, pc}
 800a40e:	2800      	cmp	r0, #0
 800a410:	d1f3      	bne.n	800a3fa <strncmp+0xa>
 800a412:	e7fa      	b.n	800a40a <strncmp+0x1a>
 800a414:	4610      	mov	r0, r2
 800a416:	e7f9      	b.n	800a40c <strncmp+0x1c>

0800a418 <__ascii_wctomb>:
 800a418:	b149      	cbz	r1, 800a42e <__ascii_wctomb+0x16>
 800a41a:	2aff      	cmp	r2, #255	; 0xff
 800a41c:	bf85      	ittet	hi
 800a41e:	238a      	movhi	r3, #138	; 0x8a
 800a420:	6003      	strhi	r3, [r0, #0]
 800a422:	700a      	strbls	r2, [r1, #0]
 800a424:	f04f 30ff 	movhi.w	r0, #4294967295
 800a428:	bf98      	it	ls
 800a42a:	2001      	movls	r0, #1
 800a42c:	4770      	bx	lr
 800a42e:	4608      	mov	r0, r1
 800a430:	4770      	bx	lr
	...

0800a434 <__assert_func>:
 800a434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a436:	4614      	mov	r4, r2
 800a438:	461a      	mov	r2, r3
 800a43a:	4b09      	ldr	r3, [pc, #36]	; (800a460 <__assert_func+0x2c>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4605      	mov	r5, r0
 800a440:	68d8      	ldr	r0, [r3, #12]
 800a442:	b14c      	cbz	r4, 800a458 <__assert_func+0x24>
 800a444:	4b07      	ldr	r3, [pc, #28]	; (800a464 <__assert_func+0x30>)
 800a446:	9100      	str	r1, [sp, #0]
 800a448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a44c:	4906      	ldr	r1, [pc, #24]	; (800a468 <__assert_func+0x34>)
 800a44e:	462b      	mov	r3, r5
 800a450:	f000 f80e 	bl	800a470 <fiprintf>
 800a454:	f000 fa8c 	bl	800a970 <abort>
 800a458:	4b04      	ldr	r3, [pc, #16]	; (800a46c <__assert_func+0x38>)
 800a45a:	461c      	mov	r4, r3
 800a45c:	e7f3      	b.n	800a446 <__assert_func+0x12>
 800a45e:	bf00      	nop
 800a460:	20000020 	.word	0x20000020
 800a464:	0800b415 	.word	0x0800b415
 800a468:	0800b422 	.word	0x0800b422
 800a46c:	0800b450 	.word	0x0800b450

0800a470 <fiprintf>:
 800a470:	b40e      	push	{r1, r2, r3}
 800a472:	b503      	push	{r0, r1, lr}
 800a474:	4601      	mov	r1, r0
 800a476:	ab03      	add	r3, sp, #12
 800a478:	4805      	ldr	r0, [pc, #20]	; (800a490 <fiprintf+0x20>)
 800a47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a47e:	6800      	ldr	r0, [r0, #0]
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	f000 f885 	bl	800a590 <_vfiprintf_r>
 800a486:	b002      	add	sp, #8
 800a488:	f85d eb04 	ldr.w	lr, [sp], #4
 800a48c:	b003      	add	sp, #12
 800a48e:	4770      	bx	lr
 800a490:	20000020 	.word	0x20000020

0800a494 <memmove>:
 800a494:	4288      	cmp	r0, r1
 800a496:	b510      	push	{r4, lr}
 800a498:	eb01 0402 	add.w	r4, r1, r2
 800a49c:	d902      	bls.n	800a4a4 <memmove+0x10>
 800a49e:	4284      	cmp	r4, r0
 800a4a0:	4623      	mov	r3, r4
 800a4a2:	d807      	bhi.n	800a4b4 <memmove+0x20>
 800a4a4:	1e43      	subs	r3, r0, #1
 800a4a6:	42a1      	cmp	r1, r4
 800a4a8:	d008      	beq.n	800a4bc <memmove+0x28>
 800a4aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4b2:	e7f8      	b.n	800a4a6 <memmove+0x12>
 800a4b4:	4402      	add	r2, r0
 800a4b6:	4601      	mov	r1, r0
 800a4b8:	428a      	cmp	r2, r1
 800a4ba:	d100      	bne.n	800a4be <memmove+0x2a>
 800a4bc:	bd10      	pop	{r4, pc}
 800a4be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4c6:	e7f7      	b.n	800a4b8 <memmove+0x24>

0800a4c8 <__malloc_lock>:
 800a4c8:	4801      	ldr	r0, [pc, #4]	; (800a4d0 <__malloc_lock+0x8>)
 800a4ca:	f000 bc11 	b.w	800acf0 <__retarget_lock_acquire_recursive>
 800a4ce:	bf00      	nop
 800a4d0:	20000c04 	.word	0x20000c04

0800a4d4 <__malloc_unlock>:
 800a4d4:	4801      	ldr	r0, [pc, #4]	; (800a4dc <__malloc_unlock+0x8>)
 800a4d6:	f000 bc0c 	b.w	800acf2 <__retarget_lock_release_recursive>
 800a4da:	bf00      	nop
 800a4dc:	20000c04 	.word	0x20000c04

0800a4e0 <_realloc_r>:
 800a4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e4:	4680      	mov	r8, r0
 800a4e6:	4614      	mov	r4, r2
 800a4e8:	460e      	mov	r6, r1
 800a4ea:	b921      	cbnz	r1, 800a4f6 <_realloc_r+0x16>
 800a4ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	f7ff bd93 	b.w	800a01c <_malloc_r>
 800a4f6:	b92a      	cbnz	r2, 800a504 <_realloc_r+0x24>
 800a4f8:	f7ff fd24 	bl	8009f44 <_free_r>
 800a4fc:	4625      	mov	r5, r4
 800a4fe:	4628      	mov	r0, r5
 800a500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a504:	f000 fc5c 	bl	800adc0 <_malloc_usable_size_r>
 800a508:	4284      	cmp	r4, r0
 800a50a:	4607      	mov	r7, r0
 800a50c:	d802      	bhi.n	800a514 <_realloc_r+0x34>
 800a50e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a512:	d812      	bhi.n	800a53a <_realloc_r+0x5a>
 800a514:	4621      	mov	r1, r4
 800a516:	4640      	mov	r0, r8
 800a518:	f7ff fd80 	bl	800a01c <_malloc_r>
 800a51c:	4605      	mov	r5, r0
 800a51e:	2800      	cmp	r0, #0
 800a520:	d0ed      	beq.n	800a4fe <_realloc_r+0x1e>
 800a522:	42bc      	cmp	r4, r7
 800a524:	4622      	mov	r2, r4
 800a526:	4631      	mov	r1, r6
 800a528:	bf28      	it	cs
 800a52a:	463a      	movcs	r2, r7
 800a52c:	f7ff f824 	bl	8009578 <memcpy>
 800a530:	4631      	mov	r1, r6
 800a532:	4640      	mov	r0, r8
 800a534:	f7ff fd06 	bl	8009f44 <_free_r>
 800a538:	e7e1      	b.n	800a4fe <_realloc_r+0x1e>
 800a53a:	4635      	mov	r5, r6
 800a53c:	e7df      	b.n	800a4fe <_realloc_r+0x1e>

0800a53e <__sfputc_r>:
 800a53e:	6893      	ldr	r3, [r2, #8]
 800a540:	3b01      	subs	r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	b410      	push	{r4}
 800a546:	6093      	str	r3, [r2, #8]
 800a548:	da08      	bge.n	800a55c <__sfputc_r+0x1e>
 800a54a:	6994      	ldr	r4, [r2, #24]
 800a54c:	42a3      	cmp	r3, r4
 800a54e:	db01      	blt.n	800a554 <__sfputc_r+0x16>
 800a550:	290a      	cmp	r1, #10
 800a552:	d103      	bne.n	800a55c <__sfputc_r+0x1e>
 800a554:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a558:	f000 b94a 	b.w	800a7f0 <__swbuf_r>
 800a55c:	6813      	ldr	r3, [r2, #0]
 800a55e:	1c58      	adds	r0, r3, #1
 800a560:	6010      	str	r0, [r2, #0]
 800a562:	7019      	strb	r1, [r3, #0]
 800a564:	4608      	mov	r0, r1
 800a566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <__sfputs_r>:
 800a56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56e:	4606      	mov	r6, r0
 800a570:	460f      	mov	r7, r1
 800a572:	4614      	mov	r4, r2
 800a574:	18d5      	adds	r5, r2, r3
 800a576:	42ac      	cmp	r4, r5
 800a578:	d101      	bne.n	800a57e <__sfputs_r+0x12>
 800a57a:	2000      	movs	r0, #0
 800a57c:	e007      	b.n	800a58e <__sfputs_r+0x22>
 800a57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a582:	463a      	mov	r2, r7
 800a584:	4630      	mov	r0, r6
 800a586:	f7ff ffda 	bl	800a53e <__sfputc_r>
 800a58a:	1c43      	adds	r3, r0, #1
 800a58c:	d1f3      	bne.n	800a576 <__sfputs_r+0xa>
 800a58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a590 <_vfiprintf_r>:
 800a590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a594:	460d      	mov	r5, r1
 800a596:	b09d      	sub	sp, #116	; 0x74
 800a598:	4614      	mov	r4, r2
 800a59a:	4698      	mov	r8, r3
 800a59c:	4606      	mov	r6, r0
 800a59e:	b118      	cbz	r0, 800a5a8 <_vfiprintf_r+0x18>
 800a5a0:	6983      	ldr	r3, [r0, #24]
 800a5a2:	b90b      	cbnz	r3, 800a5a8 <_vfiprintf_r+0x18>
 800a5a4:	f000 fb06 	bl	800abb4 <__sinit>
 800a5a8:	4b89      	ldr	r3, [pc, #548]	; (800a7d0 <_vfiprintf_r+0x240>)
 800a5aa:	429d      	cmp	r5, r3
 800a5ac:	d11b      	bne.n	800a5e6 <_vfiprintf_r+0x56>
 800a5ae:	6875      	ldr	r5, [r6, #4]
 800a5b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5b2:	07d9      	lsls	r1, r3, #31
 800a5b4:	d405      	bmi.n	800a5c2 <_vfiprintf_r+0x32>
 800a5b6:	89ab      	ldrh	r3, [r5, #12]
 800a5b8:	059a      	lsls	r2, r3, #22
 800a5ba:	d402      	bmi.n	800a5c2 <_vfiprintf_r+0x32>
 800a5bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5be:	f000 fb97 	bl	800acf0 <__retarget_lock_acquire_recursive>
 800a5c2:	89ab      	ldrh	r3, [r5, #12]
 800a5c4:	071b      	lsls	r3, r3, #28
 800a5c6:	d501      	bpl.n	800a5cc <_vfiprintf_r+0x3c>
 800a5c8:	692b      	ldr	r3, [r5, #16]
 800a5ca:	b9eb      	cbnz	r3, 800a608 <_vfiprintf_r+0x78>
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	f000 f960 	bl	800a894 <__swsetup_r>
 800a5d4:	b1c0      	cbz	r0, 800a608 <_vfiprintf_r+0x78>
 800a5d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5d8:	07dc      	lsls	r4, r3, #31
 800a5da:	d50e      	bpl.n	800a5fa <_vfiprintf_r+0x6a>
 800a5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e0:	b01d      	add	sp, #116	; 0x74
 800a5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e6:	4b7b      	ldr	r3, [pc, #492]	; (800a7d4 <_vfiprintf_r+0x244>)
 800a5e8:	429d      	cmp	r5, r3
 800a5ea:	d101      	bne.n	800a5f0 <_vfiprintf_r+0x60>
 800a5ec:	68b5      	ldr	r5, [r6, #8]
 800a5ee:	e7df      	b.n	800a5b0 <_vfiprintf_r+0x20>
 800a5f0:	4b79      	ldr	r3, [pc, #484]	; (800a7d8 <_vfiprintf_r+0x248>)
 800a5f2:	429d      	cmp	r5, r3
 800a5f4:	bf08      	it	eq
 800a5f6:	68f5      	ldreq	r5, [r6, #12]
 800a5f8:	e7da      	b.n	800a5b0 <_vfiprintf_r+0x20>
 800a5fa:	89ab      	ldrh	r3, [r5, #12]
 800a5fc:	0598      	lsls	r0, r3, #22
 800a5fe:	d4ed      	bmi.n	800a5dc <_vfiprintf_r+0x4c>
 800a600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a602:	f000 fb76 	bl	800acf2 <__retarget_lock_release_recursive>
 800a606:	e7e9      	b.n	800a5dc <_vfiprintf_r+0x4c>
 800a608:	2300      	movs	r3, #0
 800a60a:	9309      	str	r3, [sp, #36]	; 0x24
 800a60c:	2320      	movs	r3, #32
 800a60e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a612:	f8cd 800c 	str.w	r8, [sp, #12]
 800a616:	2330      	movs	r3, #48	; 0x30
 800a618:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a7dc <_vfiprintf_r+0x24c>
 800a61c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a620:	f04f 0901 	mov.w	r9, #1
 800a624:	4623      	mov	r3, r4
 800a626:	469a      	mov	sl, r3
 800a628:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a62c:	b10a      	cbz	r2, 800a632 <_vfiprintf_r+0xa2>
 800a62e:	2a25      	cmp	r2, #37	; 0x25
 800a630:	d1f9      	bne.n	800a626 <_vfiprintf_r+0x96>
 800a632:	ebba 0b04 	subs.w	fp, sl, r4
 800a636:	d00b      	beq.n	800a650 <_vfiprintf_r+0xc0>
 800a638:	465b      	mov	r3, fp
 800a63a:	4622      	mov	r2, r4
 800a63c:	4629      	mov	r1, r5
 800a63e:	4630      	mov	r0, r6
 800a640:	f7ff ff94 	bl	800a56c <__sfputs_r>
 800a644:	3001      	adds	r0, #1
 800a646:	f000 80aa 	beq.w	800a79e <_vfiprintf_r+0x20e>
 800a64a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a64c:	445a      	add	r2, fp
 800a64e:	9209      	str	r2, [sp, #36]	; 0x24
 800a650:	f89a 3000 	ldrb.w	r3, [sl]
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 80a2 	beq.w	800a79e <_vfiprintf_r+0x20e>
 800a65a:	2300      	movs	r3, #0
 800a65c:	f04f 32ff 	mov.w	r2, #4294967295
 800a660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a664:	f10a 0a01 	add.w	sl, sl, #1
 800a668:	9304      	str	r3, [sp, #16]
 800a66a:	9307      	str	r3, [sp, #28]
 800a66c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a670:	931a      	str	r3, [sp, #104]	; 0x68
 800a672:	4654      	mov	r4, sl
 800a674:	2205      	movs	r2, #5
 800a676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a67a:	4858      	ldr	r0, [pc, #352]	; (800a7dc <_vfiprintf_r+0x24c>)
 800a67c:	f7f5 fdc0 	bl	8000200 <memchr>
 800a680:	9a04      	ldr	r2, [sp, #16]
 800a682:	b9d8      	cbnz	r0, 800a6bc <_vfiprintf_r+0x12c>
 800a684:	06d1      	lsls	r1, r2, #27
 800a686:	bf44      	itt	mi
 800a688:	2320      	movmi	r3, #32
 800a68a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a68e:	0713      	lsls	r3, r2, #28
 800a690:	bf44      	itt	mi
 800a692:	232b      	movmi	r3, #43	; 0x2b
 800a694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a698:	f89a 3000 	ldrb.w	r3, [sl]
 800a69c:	2b2a      	cmp	r3, #42	; 0x2a
 800a69e:	d015      	beq.n	800a6cc <_vfiprintf_r+0x13c>
 800a6a0:	9a07      	ldr	r2, [sp, #28]
 800a6a2:	4654      	mov	r4, sl
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	f04f 0c0a 	mov.w	ip, #10
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6b0:	3b30      	subs	r3, #48	; 0x30
 800a6b2:	2b09      	cmp	r3, #9
 800a6b4:	d94e      	bls.n	800a754 <_vfiprintf_r+0x1c4>
 800a6b6:	b1b0      	cbz	r0, 800a6e6 <_vfiprintf_r+0x156>
 800a6b8:	9207      	str	r2, [sp, #28]
 800a6ba:	e014      	b.n	800a6e6 <_vfiprintf_r+0x156>
 800a6bc:	eba0 0308 	sub.w	r3, r0, r8
 800a6c0:	fa09 f303 	lsl.w	r3, r9, r3
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	9304      	str	r3, [sp, #16]
 800a6c8:	46a2      	mov	sl, r4
 800a6ca:	e7d2      	b.n	800a672 <_vfiprintf_r+0xe2>
 800a6cc:	9b03      	ldr	r3, [sp, #12]
 800a6ce:	1d19      	adds	r1, r3, #4
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	9103      	str	r1, [sp, #12]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	bfbb      	ittet	lt
 800a6d8:	425b      	neglt	r3, r3
 800a6da:	f042 0202 	orrlt.w	r2, r2, #2
 800a6de:	9307      	strge	r3, [sp, #28]
 800a6e0:	9307      	strlt	r3, [sp, #28]
 800a6e2:	bfb8      	it	lt
 800a6e4:	9204      	strlt	r2, [sp, #16]
 800a6e6:	7823      	ldrb	r3, [r4, #0]
 800a6e8:	2b2e      	cmp	r3, #46	; 0x2e
 800a6ea:	d10c      	bne.n	800a706 <_vfiprintf_r+0x176>
 800a6ec:	7863      	ldrb	r3, [r4, #1]
 800a6ee:	2b2a      	cmp	r3, #42	; 0x2a
 800a6f0:	d135      	bne.n	800a75e <_vfiprintf_r+0x1ce>
 800a6f2:	9b03      	ldr	r3, [sp, #12]
 800a6f4:	1d1a      	adds	r2, r3, #4
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	9203      	str	r2, [sp, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	bfb8      	it	lt
 800a6fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800a702:	3402      	adds	r4, #2
 800a704:	9305      	str	r3, [sp, #20]
 800a706:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a7ec <_vfiprintf_r+0x25c>
 800a70a:	7821      	ldrb	r1, [r4, #0]
 800a70c:	2203      	movs	r2, #3
 800a70e:	4650      	mov	r0, sl
 800a710:	f7f5 fd76 	bl	8000200 <memchr>
 800a714:	b140      	cbz	r0, 800a728 <_vfiprintf_r+0x198>
 800a716:	2340      	movs	r3, #64	; 0x40
 800a718:	eba0 000a 	sub.w	r0, r0, sl
 800a71c:	fa03 f000 	lsl.w	r0, r3, r0
 800a720:	9b04      	ldr	r3, [sp, #16]
 800a722:	4303      	orrs	r3, r0
 800a724:	3401      	adds	r4, #1
 800a726:	9304      	str	r3, [sp, #16]
 800a728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a72c:	482c      	ldr	r0, [pc, #176]	; (800a7e0 <_vfiprintf_r+0x250>)
 800a72e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a732:	2206      	movs	r2, #6
 800a734:	f7f5 fd64 	bl	8000200 <memchr>
 800a738:	2800      	cmp	r0, #0
 800a73a:	d03f      	beq.n	800a7bc <_vfiprintf_r+0x22c>
 800a73c:	4b29      	ldr	r3, [pc, #164]	; (800a7e4 <_vfiprintf_r+0x254>)
 800a73e:	bb1b      	cbnz	r3, 800a788 <_vfiprintf_r+0x1f8>
 800a740:	9b03      	ldr	r3, [sp, #12]
 800a742:	3307      	adds	r3, #7
 800a744:	f023 0307 	bic.w	r3, r3, #7
 800a748:	3308      	adds	r3, #8
 800a74a:	9303      	str	r3, [sp, #12]
 800a74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a74e:	443b      	add	r3, r7
 800a750:	9309      	str	r3, [sp, #36]	; 0x24
 800a752:	e767      	b.n	800a624 <_vfiprintf_r+0x94>
 800a754:	fb0c 3202 	mla	r2, ip, r2, r3
 800a758:	460c      	mov	r4, r1
 800a75a:	2001      	movs	r0, #1
 800a75c:	e7a5      	b.n	800a6aa <_vfiprintf_r+0x11a>
 800a75e:	2300      	movs	r3, #0
 800a760:	3401      	adds	r4, #1
 800a762:	9305      	str	r3, [sp, #20]
 800a764:	4619      	mov	r1, r3
 800a766:	f04f 0c0a 	mov.w	ip, #10
 800a76a:	4620      	mov	r0, r4
 800a76c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a770:	3a30      	subs	r2, #48	; 0x30
 800a772:	2a09      	cmp	r2, #9
 800a774:	d903      	bls.n	800a77e <_vfiprintf_r+0x1ee>
 800a776:	2b00      	cmp	r3, #0
 800a778:	d0c5      	beq.n	800a706 <_vfiprintf_r+0x176>
 800a77a:	9105      	str	r1, [sp, #20]
 800a77c:	e7c3      	b.n	800a706 <_vfiprintf_r+0x176>
 800a77e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a782:	4604      	mov	r4, r0
 800a784:	2301      	movs	r3, #1
 800a786:	e7f0      	b.n	800a76a <_vfiprintf_r+0x1da>
 800a788:	ab03      	add	r3, sp, #12
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	462a      	mov	r2, r5
 800a78e:	4b16      	ldr	r3, [pc, #88]	; (800a7e8 <_vfiprintf_r+0x258>)
 800a790:	a904      	add	r1, sp, #16
 800a792:	4630      	mov	r0, r6
 800a794:	f7fc f83a 	bl	800680c <_printf_float>
 800a798:	4607      	mov	r7, r0
 800a79a:	1c78      	adds	r0, r7, #1
 800a79c:	d1d6      	bne.n	800a74c <_vfiprintf_r+0x1bc>
 800a79e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7a0:	07d9      	lsls	r1, r3, #31
 800a7a2:	d405      	bmi.n	800a7b0 <_vfiprintf_r+0x220>
 800a7a4:	89ab      	ldrh	r3, [r5, #12]
 800a7a6:	059a      	lsls	r2, r3, #22
 800a7a8:	d402      	bmi.n	800a7b0 <_vfiprintf_r+0x220>
 800a7aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7ac:	f000 faa1 	bl	800acf2 <__retarget_lock_release_recursive>
 800a7b0:	89ab      	ldrh	r3, [r5, #12]
 800a7b2:	065b      	lsls	r3, r3, #25
 800a7b4:	f53f af12 	bmi.w	800a5dc <_vfiprintf_r+0x4c>
 800a7b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ba:	e711      	b.n	800a5e0 <_vfiprintf_r+0x50>
 800a7bc:	ab03      	add	r3, sp, #12
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	462a      	mov	r2, r5
 800a7c2:	4b09      	ldr	r3, [pc, #36]	; (800a7e8 <_vfiprintf_r+0x258>)
 800a7c4:	a904      	add	r1, sp, #16
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f7fc fac4 	bl	8006d54 <_printf_i>
 800a7cc:	e7e4      	b.n	800a798 <_vfiprintf_r+0x208>
 800a7ce:	bf00      	nop
 800a7d0:	0800b474 	.word	0x0800b474
 800a7d4:	0800b494 	.word	0x0800b494
 800a7d8:	0800b454 	.word	0x0800b454
 800a7dc:	0800b404 	.word	0x0800b404
 800a7e0:	0800b40e 	.word	0x0800b40e
 800a7e4:	0800680d 	.word	0x0800680d
 800a7e8:	0800a56d 	.word	0x0800a56d
 800a7ec:	0800b40a 	.word	0x0800b40a

0800a7f0 <__swbuf_r>:
 800a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f2:	460e      	mov	r6, r1
 800a7f4:	4614      	mov	r4, r2
 800a7f6:	4605      	mov	r5, r0
 800a7f8:	b118      	cbz	r0, 800a802 <__swbuf_r+0x12>
 800a7fa:	6983      	ldr	r3, [r0, #24]
 800a7fc:	b90b      	cbnz	r3, 800a802 <__swbuf_r+0x12>
 800a7fe:	f000 f9d9 	bl	800abb4 <__sinit>
 800a802:	4b21      	ldr	r3, [pc, #132]	; (800a888 <__swbuf_r+0x98>)
 800a804:	429c      	cmp	r4, r3
 800a806:	d12b      	bne.n	800a860 <__swbuf_r+0x70>
 800a808:	686c      	ldr	r4, [r5, #4]
 800a80a:	69a3      	ldr	r3, [r4, #24]
 800a80c:	60a3      	str	r3, [r4, #8]
 800a80e:	89a3      	ldrh	r3, [r4, #12]
 800a810:	071a      	lsls	r2, r3, #28
 800a812:	d52f      	bpl.n	800a874 <__swbuf_r+0x84>
 800a814:	6923      	ldr	r3, [r4, #16]
 800a816:	b36b      	cbz	r3, 800a874 <__swbuf_r+0x84>
 800a818:	6923      	ldr	r3, [r4, #16]
 800a81a:	6820      	ldr	r0, [r4, #0]
 800a81c:	1ac0      	subs	r0, r0, r3
 800a81e:	6963      	ldr	r3, [r4, #20]
 800a820:	b2f6      	uxtb	r6, r6
 800a822:	4283      	cmp	r3, r0
 800a824:	4637      	mov	r7, r6
 800a826:	dc04      	bgt.n	800a832 <__swbuf_r+0x42>
 800a828:	4621      	mov	r1, r4
 800a82a:	4628      	mov	r0, r5
 800a82c:	f000 f92e 	bl	800aa8c <_fflush_r>
 800a830:	bb30      	cbnz	r0, 800a880 <__swbuf_r+0x90>
 800a832:	68a3      	ldr	r3, [r4, #8]
 800a834:	3b01      	subs	r3, #1
 800a836:	60a3      	str	r3, [r4, #8]
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	1c5a      	adds	r2, r3, #1
 800a83c:	6022      	str	r2, [r4, #0]
 800a83e:	701e      	strb	r6, [r3, #0]
 800a840:	6963      	ldr	r3, [r4, #20]
 800a842:	3001      	adds	r0, #1
 800a844:	4283      	cmp	r3, r0
 800a846:	d004      	beq.n	800a852 <__swbuf_r+0x62>
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	07db      	lsls	r3, r3, #31
 800a84c:	d506      	bpl.n	800a85c <__swbuf_r+0x6c>
 800a84e:	2e0a      	cmp	r6, #10
 800a850:	d104      	bne.n	800a85c <__swbuf_r+0x6c>
 800a852:	4621      	mov	r1, r4
 800a854:	4628      	mov	r0, r5
 800a856:	f000 f919 	bl	800aa8c <_fflush_r>
 800a85a:	b988      	cbnz	r0, 800a880 <__swbuf_r+0x90>
 800a85c:	4638      	mov	r0, r7
 800a85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a860:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <__swbuf_r+0x9c>)
 800a862:	429c      	cmp	r4, r3
 800a864:	d101      	bne.n	800a86a <__swbuf_r+0x7a>
 800a866:	68ac      	ldr	r4, [r5, #8]
 800a868:	e7cf      	b.n	800a80a <__swbuf_r+0x1a>
 800a86a:	4b09      	ldr	r3, [pc, #36]	; (800a890 <__swbuf_r+0xa0>)
 800a86c:	429c      	cmp	r4, r3
 800a86e:	bf08      	it	eq
 800a870:	68ec      	ldreq	r4, [r5, #12]
 800a872:	e7ca      	b.n	800a80a <__swbuf_r+0x1a>
 800a874:	4621      	mov	r1, r4
 800a876:	4628      	mov	r0, r5
 800a878:	f000 f80c 	bl	800a894 <__swsetup_r>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d0cb      	beq.n	800a818 <__swbuf_r+0x28>
 800a880:	f04f 37ff 	mov.w	r7, #4294967295
 800a884:	e7ea      	b.n	800a85c <__swbuf_r+0x6c>
 800a886:	bf00      	nop
 800a888:	0800b474 	.word	0x0800b474
 800a88c:	0800b494 	.word	0x0800b494
 800a890:	0800b454 	.word	0x0800b454

0800a894 <__swsetup_r>:
 800a894:	4b32      	ldr	r3, [pc, #200]	; (800a960 <__swsetup_r+0xcc>)
 800a896:	b570      	push	{r4, r5, r6, lr}
 800a898:	681d      	ldr	r5, [r3, #0]
 800a89a:	4606      	mov	r6, r0
 800a89c:	460c      	mov	r4, r1
 800a89e:	b125      	cbz	r5, 800a8aa <__swsetup_r+0x16>
 800a8a0:	69ab      	ldr	r3, [r5, #24]
 800a8a2:	b913      	cbnz	r3, 800a8aa <__swsetup_r+0x16>
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	f000 f985 	bl	800abb4 <__sinit>
 800a8aa:	4b2e      	ldr	r3, [pc, #184]	; (800a964 <__swsetup_r+0xd0>)
 800a8ac:	429c      	cmp	r4, r3
 800a8ae:	d10f      	bne.n	800a8d0 <__swsetup_r+0x3c>
 800a8b0:	686c      	ldr	r4, [r5, #4]
 800a8b2:	89a3      	ldrh	r3, [r4, #12]
 800a8b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8b8:	0719      	lsls	r1, r3, #28
 800a8ba:	d42c      	bmi.n	800a916 <__swsetup_r+0x82>
 800a8bc:	06dd      	lsls	r5, r3, #27
 800a8be:	d411      	bmi.n	800a8e4 <__swsetup_r+0x50>
 800a8c0:	2309      	movs	r3, #9
 800a8c2:	6033      	str	r3, [r6, #0]
 800a8c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8c8:	81a3      	strh	r3, [r4, #12]
 800a8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ce:	e03e      	b.n	800a94e <__swsetup_r+0xba>
 800a8d0:	4b25      	ldr	r3, [pc, #148]	; (800a968 <__swsetup_r+0xd4>)
 800a8d2:	429c      	cmp	r4, r3
 800a8d4:	d101      	bne.n	800a8da <__swsetup_r+0x46>
 800a8d6:	68ac      	ldr	r4, [r5, #8]
 800a8d8:	e7eb      	b.n	800a8b2 <__swsetup_r+0x1e>
 800a8da:	4b24      	ldr	r3, [pc, #144]	; (800a96c <__swsetup_r+0xd8>)
 800a8dc:	429c      	cmp	r4, r3
 800a8de:	bf08      	it	eq
 800a8e0:	68ec      	ldreq	r4, [r5, #12]
 800a8e2:	e7e6      	b.n	800a8b2 <__swsetup_r+0x1e>
 800a8e4:	0758      	lsls	r0, r3, #29
 800a8e6:	d512      	bpl.n	800a90e <__swsetup_r+0x7a>
 800a8e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8ea:	b141      	cbz	r1, 800a8fe <__swsetup_r+0x6a>
 800a8ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8f0:	4299      	cmp	r1, r3
 800a8f2:	d002      	beq.n	800a8fa <__swsetup_r+0x66>
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f7ff fb25 	bl	8009f44 <_free_r>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	6363      	str	r3, [r4, #52]	; 0x34
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a904:	81a3      	strh	r3, [r4, #12]
 800a906:	2300      	movs	r3, #0
 800a908:	6063      	str	r3, [r4, #4]
 800a90a:	6923      	ldr	r3, [r4, #16]
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	f043 0308 	orr.w	r3, r3, #8
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	6923      	ldr	r3, [r4, #16]
 800a918:	b94b      	cbnz	r3, 800a92e <__swsetup_r+0x9a>
 800a91a:	89a3      	ldrh	r3, [r4, #12]
 800a91c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a924:	d003      	beq.n	800a92e <__swsetup_r+0x9a>
 800a926:	4621      	mov	r1, r4
 800a928:	4630      	mov	r0, r6
 800a92a:	f000 fa09 	bl	800ad40 <__smakebuf_r>
 800a92e:	89a0      	ldrh	r0, [r4, #12]
 800a930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a934:	f010 0301 	ands.w	r3, r0, #1
 800a938:	d00a      	beq.n	800a950 <__swsetup_r+0xbc>
 800a93a:	2300      	movs	r3, #0
 800a93c:	60a3      	str	r3, [r4, #8]
 800a93e:	6963      	ldr	r3, [r4, #20]
 800a940:	425b      	negs	r3, r3
 800a942:	61a3      	str	r3, [r4, #24]
 800a944:	6923      	ldr	r3, [r4, #16]
 800a946:	b943      	cbnz	r3, 800a95a <__swsetup_r+0xc6>
 800a948:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a94c:	d1ba      	bne.n	800a8c4 <__swsetup_r+0x30>
 800a94e:	bd70      	pop	{r4, r5, r6, pc}
 800a950:	0781      	lsls	r1, r0, #30
 800a952:	bf58      	it	pl
 800a954:	6963      	ldrpl	r3, [r4, #20]
 800a956:	60a3      	str	r3, [r4, #8]
 800a958:	e7f4      	b.n	800a944 <__swsetup_r+0xb0>
 800a95a:	2000      	movs	r0, #0
 800a95c:	e7f7      	b.n	800a94e <__swsetup_r+0xba>
 800a95e:	bf00      	nop
 800a960:	20000020 	.word	0x20000020
 800a964:	0800b474 	.word	0x0800b474
 800a968:	0800b494 	.word	0x0800b494
 800a96c:	0800b454 	.word	0x0800b454

0800a970 <abort>:
 800a970:	b508      	push	{r3, lr}
 800a972:	2006      	movs	r0, #6
 800a974:	f000 fa54 	bl	800ae20 <raise>
 800a978:	2001      	movs	r0, #1
 800a97a:	f7f7 fc9b 	bl	80022b4 <_exit>
	...

0800a980 <__sflush_r>:
 800a980:	898a      	ldrh	r2, [r1, #12]
 800a982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a986:	4605      	mov	r5, r0
 800a988:	0710      	lsls	r0, r2, #28
 800a98a:	460c      	mov	r4, r1
 800a98c:	d458      	bmi.n	800aa40 <__sflush_r+0xc0>
 800a98e:	684b      	ldr	r3, [r1, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	dc05      	bgt.n	800a9a0 <__sflush_r+0x20>
 800a994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a996:	2b00      	cmp	r3, #0
 800a998:	dc02      	bgt.n	800a9a0 <__sflush_r+0x20>
 800a99a:	2000      	movs	r0, #0
 800a99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9a2:	2e00      	cmp	r6, #0
 800a9a4:	d0f9      	beq.n	800a99a <__sflush_r+0x1a>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9ac:	682f      	ldr	r7, [r5, #0]
 800a9ae:	602b      	str	r3, [r5, #0]
 800a9b0:	d032      	beq.n	800aa18 <__sflush_r+0x98>
 800a9b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	075a      	lsls	r2, r3, #29
 800a9b8:	d505      	bpl.n	800a9c6 <__sflush_r+0x46>
 800a9ba:	6863      	ldr	r3, [r4, #4]
 800a9bc:	1ac0      	subs	r0, r0, r3
 800a9be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9c0:	b10b      	cbz	r3, 800a9c6 <__sflush_r+0x46>
 800a9c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9c4:	1ac0      	subs	r0, r0, r3
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9cc:	6a21      	ldr	r1, [r4, #32]
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	47b0      	blx	r6
 800a9d2:	1c43      	adds	r3, r0, #1
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	d106      	bne.n	800a9e6 <__sflush_r+0x66>
 800a9d8:	6829      	ldr	r1, [r5, #0]
 800a9da:	291d      	cmp	r1, #29
 800a9dc:	d82c      	bhi.n	800aa38 <__sflush_r+0xb8>
 800a9de:	4a2a      	ldr	r2, [pc, #168]	; (800aa88 <__sflush_r+0x108>)
 800a9e0:	40ca      	lsrs	r2, r1
 800a9e2:	07d6      	lsls	r6, r2, #31
 800a9e4:	d528      	bpl.n	800aa38 <__sflush_r+0xb8>
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	6062      	str	r2, [r4, #4]
 800a9ea:	04d9      	lsls	r1, r3, #19
 800a9ec:	6922      	ldr	r2, [r4, #16]
 800a9ee:	6022      	str	r2, [r4, #0]
 800a9f0:	d504      	bpl.n	800a9fc <__sflush_r+0x7c>
 800a9f2:	1c42      	adds	r2, r0, #1
 800a9f4:	d101      	bne.n	800a9fa <__sflush_r+0x7a>
 800a9f6:	682b      	ldr	r3, [r5, #0]
 800a9f8:	b903      	cbnz	r3, 800a9fc <__sflush_r+0x7c>
 800a9fa:	6560      	str	r0, [r4, #84]	; 0x54
 800a9fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9fe:	602f      	str	r7, [r5, #0]
 800aa00:	2900      	cmp	r1, #0
 800aa02:	d0ca      	beq.n	800a99a <__sflush_r+0x1a>
 800aa04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa08:	4299      	cmp	r1, r3
 800aa0a:	d002      	beq.n	800aa12 <__sflush_r+0x92>
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	f7ff fa99 	bl	8009f44 <_free_r>
 800aa12:	2000      	movs	r0, #0
 800aa14:	6360      	str	r0, [r4, #52]	; 0x34
 800aa16:	e7c1      	b.n	800a99c <__sflush_r+0x1c>
 800aa18:	6a21      	ldr	r1, [r4, #32]
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	47b0      	blx	r6
 800aa20:	1c41      	adds	r1, r0, #1
 800aa22:	d1c7      	bne.n	800a9b4 <__sflush_r+0x34>
 800aa24:	682b      	ldr	r3, [r5, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d0c4      	beq.n	800a9b4 <__sflush_r+0x34>
 800aa2a:	2b1d      	cmp	r3, #29
 800aa2c:	d001      	beq.n	800aa32 <__sflush_r+0xb2>
 800aa2e:	2b16      	cmp	r3, #22
 800aa30:	d101      	bne.n	800aa36 <__sflush_r+0xb6>
 800aa32:	602f      	str	r7, [r5, #0]
 800aa34:	e7b1      	b.n	800a99a <__sflush_r+0x1a>
 800aa36:	89a3      	ldrh	r3, [r4, #12]
 800aa38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa3c:	81a3      	strh	r3, [r4, #12]
 800aa3e:	e7ad      	b.n	800a99c <__sflush_r+0x1c>
 800aa40:	690f      	ldr	r7, [r1, #16]
 800aa42:	2f00      	cmp	r7, #0
 800aa44:	d0a9      	beq.n	800a99a <__sflush_r+0x1a>
 800aa46:	0793      	lsls	r3, r2, #30
 800aa48:	680e      	ldr	r6, [r1, #0]
 800aa4a:	bf08      	it	eq
 800aa4c:	694b      	ldreq	r3, [r1, #20]
 800aa4e:	600f      	str	r7, [r1, #0]
 800aa50:	bf18      	it	ne
 800aa52:	2300      	movne	r3, #0
 800aa54:	eba6 0807 	sub.w	r8, r6, r7
 800aa58:	608b      	str	r3, [r1, #8]
 800aa5a:	f1b8 0f00 	cmp.w	r8, #0
 800aa5e:	dd9c      	ble.n	800a99a <__sflush_r+0x1a>
 800aa60:	6a21      	ldr	r1, [r4, #32]
 800aa62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa64:	4643      	mov	r3, r8
 800aa66:	463a      	mov	r2, r7
 800aa68:	4628      	mov	r0, r5
 800aa6a:	47b0      	blx	r6
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	dc06      	bgt.n	800aa7e <__sflush_r+0xfe>
 800aa70:	89a3      	ldrh	r3, [r4, #12]
 800aa72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa76:	81a3      	strh	r3, [r4, #12]
 800aa78:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7c:	e78e      	b.n	800a99c <__sflush_r+0x1c>
 800aa7e:	4407      	add	r7, r0
 800aa80:	eba8 0800 	sub.w	r8, r8, r0
 800aa84:	e7e9      	b.n	800aa5a <__sflush_r+0xda>
 800aa86:	bf00      	nop
 800aa88:	20400001 	.word	0x20400001

0800aa8c <_fflush_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	690b      	ldr	r3, [r1, #16]
 800aa90:	4605      	mov	r5, r0
 800aa92:	460c      	mov	r4, r1
 800aa94:	b913      	cbnz	r3, 800aa9c <_fflush_r+0x10>
 800aa96:	2500      	movs	r5, #0
 800aa98:	4628      	mov	r0, r5
 800aa9a:	bd38      	pop	{r3, r4, r5, pc}
 800aa9c:	b118      	cbz	r0, 800aaa6 <_fflush_r+0x1a>
 800aa9e:	6983      	ldr	r3, [r0, #24]
 800aaa0:	b90b      	cbnz	r3, 800aaa6 <_fflush_r+0x1a>
 800aaa2:	f000 f887 	bl	800abb4 <__sinit>
 800aaa6:	4b14      	ldr	r3, [pc, #80]	; (800aaf8 <_fflush_r+0x6c>)
 800aaa8:	429c      	cmp	r4, r3
 800aaaa:	d11b      	bne.n	800aae4 <_fflush_r+0x58>
 800aaac:	686c      	ldr	r4, [r5, #4]
 800aaae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0ef      	beq.n	800aa96 <_fflush_r+0xa>
 800aab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aab8:	07d0      	lsls	r0, r2, #31
 800aaba:	d404      	bmi.n	800aac6 <_fflush_r+0x3a>
 800aabc:	0599      	lsls	r1, r3, #22
 800aabe:	d402      	bmi.n	800aac6 <_fflush_r+0x3a>
 800aac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aac2:	f000 f915 	bl	800acf0 <__retarget_lock_acquire_recursive>
 800aac6:	4628      	mov	r0, r5
 800aac8:	4621      	mov	r1, r4
 800aaca:	f7ff ff59 	bl	800a980 <__sflush_r>
 800aace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aad0:	07da      	lsls	r2, r3, #31
 800aad2:	4605      	mov	r5, r0
 800aad4:	d4e0      	bmi.n	800aa98 <_fflush_r+0xc>
 800aad6:	89a3      	ldrh	r3, [r4, #12]
 800aad8:	059b      	lsls	r3, r3, #22
 800aada:	d4dd      	bmi.n	800aa98 <_fflush_r+0xc>
 800aadc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aade:	f000 f908 	bl	800acf2 <__retarget_lock_release_recursive>
 800aae2:	e7d9      	b.n	800aa98 <_fflush_r+0xc>
 800aae4:	4b05      	ldr	r3, [pc, #20]	; (800aafc <_fflush_r+0x70>)
 800aae6:	429c      	cmp	r4, r3
 800aae8:	d101      	bne.n	800aaee <_fflush_r+0x62>
 800aaea:	68ac      	ldr	r4, [r5, #8]
 800aaec:	e7df      	b.n	800aaae <_fflush_r+0x22>
 800aaee:	4b04      	ldr	r3, [pc, #16]	; (800ab00 <_fflush_r+0x74>)
 800aaf0:	429c      	cmp	r4, r3
 800aaf2:	bf08      	it	eq
 800aaf4:	68ec      	ldreq	r4, [r5, #12]
 800aaf6:	e7da      	b.n	800aaae <_fflush_r+0x22>
 800aaf8:	0800b474 	.word	0x0800b474
 800aafc:	0800b494 	.word	0x0800b494
 800ab00:	0800b454 	.word	0x0800b454

0800ab04 <std>:
 800ab04:	2300      	movs	r3, #0
 800ab06:	b510      	push	{r4, lr}
 800ab08:	4604      	mov	r4, r0
 800ab0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab12:	6083      	str	r3, [r0, #8]
 800ab14:	8181      	strh	r1, [r0, #12]
 800ab16:	6643      	str	r3, [r0, #100]	; 0x64
 800ab18:	81c2      	strh	r2, [r0, #14]
 800ab1a:	6183      	str	r3, [r0, #24]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	2208      	movs	r2, #8
 800ab20:	305c      	adds	r0, #92	; 0x5c
 800ab22:	f7fb fdcb 	bl	80066bc <memset>
 800ab26:	4b05      	ldr	r3, [pc, #20]	; (800ab3c <std+0x38>)
 800ab28:	6263      	str	r3, [r4, #36]	; 0x24
 800ab2a:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <std+0x3c>)
 800ab2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab2e:	4b05      	ldr	r3, [pc, #20]	; (800ab44 <std+0x40>)
 800ab30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab32:	4b05      	ldr	r3, [pc, #20]	; (800ab48 <std+0x44>)
 800ab34:	6224      	str	r4, [r4, #32]
 800ab36:	6323      	str	r3, [r4, #48]	; 0x30
 800ab38:	bd10      	pop	{r4, pc}
 800ab3a:	bf00      	nop
 800ab3c:	0800ae59 	.word	0x0800ae59
 800ab40:	0800ae7b 	.word	0x0800ae7b
 800ab44:	0800aeb3 	.word	0x0800aeb3
 800ab48:	0800aed7 	.word	0x0800aed7

0800ab4c <_cleanup_r>:
 800ab4c:	4901      	ldr	r1, [pc, #4]	; (800ab54 <_cleanup_r+0x8>)
 800ab4e:	f000 b8af 	b.w	800acb0 <_fwalk_reent>
 800ab52:	bf00      	nop
 800ab54:	0800aa8d 	.word	0x0800aa8d

0800ab58 <__sfmoreglue>:
 800ab58:	b570      	push	{r4, r5, r6, lr}
 800ab5a:	2268      	movs	r2, #104	; 0x68
 800ab5c:	1e4d      	subs	r5, r1, #1
 800ab5e:	4355      	muls	r5, r2
 800ab60:	460e      	mov	r6, r1
 800ab62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab66:	f7ff fa59 	bl	800a01c <_malloc_r>
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	b140      	cbz	r0, 800ab80 <__sfmoreglue+0x28>
 800ab6e:	2100      	movs	r1, #0
 800ab70:	e9c0 1600 	strd	r1, r6, [r0]
 800ab74:	300c      	adds	r0, #12
 800ab76:	60a0      	str	r0, [r4, #8]
 800ab78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab7c:	f7fb fd9e 	bl	80066bc <memset>
 800ab80:	4620      	mov	r0, r4
 800ab82:	bd70      	pop	{r4, r5, r6, pc}

0800ab84 <__sfp_lock_acquire>:
 800ab84:	4801      	ldr	r0, [pc, #4]	; (800ab8c <__sfp_lock_acquire+0x8>)
 800ab86:	f000 b8b3 	b.w	800acf0 <__retarget_lock_acquire_recursive>
 800ab8a:	bf00      	nop
 800ab8c:	20000c05 	.word	0x20000c05

0800ab90 <__sfp_lock_release>:
 800ab90:	4801      	ldr	r0, [pc, #4]	; (800ab98 <__sfp_lock_release+0x8>)
 800ab92:	f000 b8ae 	b.w	800acf2 <__retarget_lock_release_recursive>
 800ab96:	bf00      	nop
 800ab98:	20000c05 	.word	0x20000c05

0800ab9c <__sinit_lock_acquire>:
 800ab9c:	4801      	ldr	r0, [pc, #4]	; (800aba4 <__sinit_lock_acquire+0x8>)
 800ab9e:	f000 b8a7 	b.w	800acf0 <__retarget_lock_acquire_recursive>
 800aba2:	bf00      	nop
 800aba4:	20000c06 	.word	0x20000c06

0800aba8 <__sinit_lock_release>:
 800aba8:	4801      	ldr	r0, [pc, #4]	; (800abb0 <__sinit_lock_release+0x8>)
 800abaa:	f000 b8a2 	b.w	800acf2 <__retarget_lock_release_recursive>
 800abae:	bf00      	nop
 800abb0:	20000c06 	.word	0x20000c06

0800abb4 <__sinit>:
 800abb4:	b510      	push	{r4, lr}
 800abb6:	4604      	mov	r4, r0
 800abb8:	f7ff fff0 	bl	800ab9c <__sinit_lock_acquire>
 800abbc:	69a3      	ldr	r3, [r4, #24]
 800abbe:	b11b      	cbz	r3, 800abc8 <__sinit+0x14>
 800abc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abc4:	f7ff bff0 	b.w	800aba8 <__sinit_lock_release>
 800abc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800abcc:	6523      	str	r3, [r4, #80]	; 0x50
 800abce:	4b13      	ldr	r3, [pc, #76]	; (800ac1c <__sinit+0x68>)
 800abd0:	4a13      	ldr	r2, [pc, #76]	; (800ac20 <__sinit+0x6c>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	62a2      	str	r2, [r4, #40]	; 0x28
 800abd6:	42a3      	cmp	r3, r4
 800abd8:	bf04      	itt	eq
 800abda:	2301      	moveq	r3, #1
 800abdc:	61a3      	streq	r3, [r4, #24]
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 f820 	bl	800ac24 <__sfp>
 800abe4:	6060      	str	r0, [r4, #4]
 800abe6:	4620      	mov	r0, r4
 800abe8:	f000 f81c 	bl	800ac24 <__sfp>
 800abec:	60a0      	str	r0, [r4, #8]
 800abee:	4620      	mov	r0, r4
 800abf0:	f000 f818 	bl	800ac24 <__sfp>
 800abf4:	2200      	movs	r2, #0
 800abf6:	60e0      	str	r0, [r4, #12]
 800abf8:	2104      	movs	r1, #4
 800abfa:	6860      	ldr	r0, [r4, #4]
 800abfc:	f7ff ff82 	bl	800ab04 <std>
 800ac00:	68a0      	ldr	r0, [r4, #8]
 800ac02:	2201      	movs	r2, #1
 800ac04:	2109      	movs	r1, #9
 800ac06:	f7ff ff7d 	bl	800ab04 <std>
 800ac0a:	68e0      	ldr	r0, [r4, #12]
 800ac0c:	2202      	movs	r2, #2
 800ac0e:	2112      	movs	r1, #18
 800ac10:	f7ff ff78 	bl	800ab04 <std>
 800ac14:	2301      	movs	r3, #1
 800ac16:	61a3      	str	r3, [r4, #24]
 800ac18:	e7d2      	b.n	800abc0 <__sinit+0xc>
 800ac1a:	bf00      	nop
 800ac1c:	0800b010 	.word	0x0800b010
 800ac20:	0800ab4d 	.word	0x0800ab4d

0800ac24 <__sfp>:
 800ac24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac26:	4607      	mov	r7, r0
 800ac28:	f7ff ffac 	bl	800ab84 <__sfp_lock_acquire>
 800ac2c:	4b1e      	ldr	r3, [pc, #120]	; (800aca8 <__sfp+0x84>)
 800ac2e:	681e      	ldr	r6, [r3, #0]
 800ac30:	69b3      	ldr	r3, [r6, #24]
 800ac32:	b913      	cbnz	r3, 800ac3a <__sfp+0x16>
 800ac34:	4630      	mov	r0, r6
 800ac36:	f7ff ffbd 	bl	800abb4 <__sinit>
 800ac3a:	3648      	adds	r6, #72	; 0x48
 800ac3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac40:	3b01      	subs	r3, #1
 800ac42:	d503      	bpl.n	800ac4c <__sfp+0x28>
 800ac44:	6833      	ldr	r3, [r6, #0]
 800ac46:	b30b      	cbz	r3, 800ac8c <__sfp+0x68>
 800ac48:	6836      	ldr	r6, [r6, #0]
 800ac4a:	e7f7      	b.n	800ac3c <__sfp+0x18>
 800ac4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac50:	b9d5      	cbnz	r5, 800ac88 <__sfp+0x64>
 800ac52:	4b16      	ldr	r3, [pc, #88]	; (800acac <__sfp+0x88>)
 800ac54:	60e3      	str	r3, [r4, #12]
 800ac56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac5a:	6665      	str	r5, [r4, #100]	; 0x64
 800ac5c:	f000 f847 	bl	800acee <__retarget_lock_init_recursive>
 800ac60:	f7ff ff96 	bl	800ab90 <__sfp_lock_release>
 800ac64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac6c:	6025      	str	r5, [r4, #0]
 800ac6e:	61a5      	str	r5, [r4, #24]
 800ac70:	2208      	movs	r2, #8
 800ac72:	4629      	mov	r1, r5
 800ac74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac78:	f7fb fd20 	bl	80066bc <memset>
 800ac7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac84:	4620      	mov	r0, r4
 800ac86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac88:	3468      	adds	r4, #104	; 0x68
 800ac8a:	e7d9      	b.n	800ac40 <__sfp+0x1c>
 800ac8c:	2104      	movs	r1, #4
 800ac8e:	4638      	mov	r0, r7
 800ac90:	f7ff ff62 	bl	800ab58 <__sfmoreglue>
 800ac94:	4604      	mov	r4, r0
 800ac96:	6030      	str	r0, [r6, #0]
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d1d5      	bne.n	800ac48 <__sfp+0x24>
 800ac9c:	f7ff ff78 	bl	800ab90 <__sfp_lock_release>
 800aca0:	230c      	movs	r3, #12
 800aca2:	603b      	str	r3, [r7, #0]
 800aca4:	e7ee      	b.n	800ac84 <__sfp+0x60>
 800aca6:	bf00      	nop
 800aca8:	0800b010 	.word	0x0800b010
 800acac:	ffff0001 	.word	0xffff0001

0800acb0 <_fwalk_reent>:
 800acb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb4:	4606      	mov	r6, r0
 800acb6:	4688      	mov	r8, r1
 800acb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800acbc:	2700      	movs	r7, #0
 800acbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acc2:	f1b9 0901 	subs.w	r9, r9, #1
 800acc6:	d505      	bpl.n	800acd4 <_fwalk_reent+0x24>
 800acc8:	6824      	ldr	r4, [r4, #0]
 800acca:	2c00      	cmp	r4, #0
 800accc:	d1f7      	bne.n	800acbe <_fwalk_reent+0xe>
 800acce:	4638      	mov	r0, r7
 800acd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd4:	89ab      	ldrh	r3, [r5, #12]
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d907      	bls.n	800acea <_fwalk_reent+0x3a>
 800acda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acde:	3301      	adds	r3, #1
 800ace0:	d003      	beq.n	800acea <_fwalk_reent+0x3a>
 800ace2:	4629      	mov	r1, r5
 800ace4:	4630      	mov	r0, r6
 800ace6:	47c0      	blx	r8
 800ace8:	4307      	orrs	r7, r0
 800acea:	3568      	adds	r5, #104	; 0x68
 800acec:	e7e9      	b.n	800acc2 <_fwalk_reent+0x12>

0800acee <__retarget_lock_init_recursive>:
 800acee:	4770      	bx	lr

0800acf0 <__retarget_lock_acquire_recursive>:
 800acf0:	4770      	bx	lr

0800acf2 <__retarget_lock_release_recursive>:
 800acf2:	4770      	bx	lr

0800acf4 <__swhatbuf_r>:
 800acf4:	b570      	push	{r4, r5, r6, lr}
 800acf6:	460e      	mov	r6, r1
 800acf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acfc:	2900      	cmp	r1, #0
 800acfe:	b096      	sub	sp, #88	; 0x58
 800ad00:	4614      	mov	r4, r2
 800ad02:	461d      	mov	r5, r3
 800ad04:	da08      	bge.n	800ad18 <__swhatbuf_r+0x24>
 800ad06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	602a      	str	r2, [r5, #0]
 800ad0e:	061a      	lsls	r2, r3, #24
 800ad10:	d410      	bmi.n	800ad34 <__swhatbuf_r+0x40>
 800ad12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad16:	e00e      	b.n	800ad36 <__swhatbuf_r+0x42>
 800ad18:	466a      	mov	r2, sp
 800ad1a:	f000 f903 	bl	800af24 <_fstat_r>
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	dbf1      	blt.n	800ad06 <__swhatbuf_r+0x12>
 800ad22:	9a01      	ldr	r2, [sp, #4]
 800ad24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad2c:	425a      	negs	r2, r3
 800ad2e:	415a      	adcs	r2, r3
 800ad30:	602a      	str	r2, [r5, #0]
 800ad32:	e7ee      	b.n	800ad12 <__swhatbuf_r+0x1e>
 800ad34:	2340      	movs	r3, #64	; 0x40
 800ad36:	2000      	movs	r0, #0
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	b016      	add	sp, #88	; 0x58
 800ad3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad40 <__smakebuf_r>:
 800ad40:	898b      	ldrh	r3, [r1, #12]
 800ad42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad44:	079d      	lsls	r5, r3, #30
 800ad46:	4606      	mov	r6, r0
 800ad48:	460c      	mov	r4, r1
 800ad4a:	d507      	bpl.n	800ad5c <__smakebuf_r+0x1c>
 800ad4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	6123      	str	r3, [r4, #16]
 800ad54:	2301      	movs	r3, #1
 800ad56:	6163      	str	r3, [r4, #20]
 800ad58:	b002      	add	sp, #8
 800ad5a:	bd70      	pop	{r4, r5, r6, pc}
 800ad5c:	ab01      	add	r3, sp, #4
 800ad5e:	466a      	mov	r2, sp
 800ad60:	f7ff ffc8 	bl	800acf4 <__swhatbuf_r>
 800ad64:	9900      	ldr	r1, [sp, #0]
 800ad66:	4605      	mov	r5, r0
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f7ff f957 	bl	800a01c <_malloc_r>
 800ad6e:	b948      	cbnz	r0, 800ad84 <__smakebuf_r+0x44>
 800ad70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad74:	059a      	lsls	r2, r3, #22
 800ad76:	d4ef      	bmi.n	800ad58 <__smakebuf_r+0x18>
 800ad78:	f023 0303 	bic.w	r3, r3, #3
 800ad7c:	f043 0302 	orr.w	r3, r3, #2
 800ad80:	81a3      	strh	r3, [r4, #12]
 800ad82:	e7e3      	b.n	800ad4c <__smakebuf_r+0xc>
 800ad84:	4b0d      	ldr	r3, [pc, #52]	; (800adbc <__smakebuf_r+0x7c>)
 800ad86:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad88:	89a3      	ldrh	r3, [r4, #12]
 800ad8a:	6020      	str	r0, [r4, #0]
 800ad8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad90:	81a3      	strh	r3, [r4, #12]
 800ad92:	9b00      	ldr	r3, [sp, #0]
 800ad94:	6163      	str	r3, [r4, #20]
 800ad96:	9b01      	ldr	r3, [sp, #4]
 800ad98:	6120      	str	r0, [r4, #16]
 800ad9a:	b15b      	cbz	r3, 800adb4 <__smakebuf_r+0x74>
 800ad9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ada0:	4630      	mov	r0, r6
 800ada2:	f000 f8d1 	bl	800af48 <_isatty_r>
 800ada6:	b128      	cbz	r0, 800adb4 <__smakebuf_r+0x74>
 800ada8:	89a3      	ldrh	r3, [r4, #12]
 800adaa:	f023 0303 	bic.w	r3, r3, #3
 800adae:	f043 0301 	orr.w	r3, r3, #1
 800adb2:	81a3      	strh	r3, [r4, #12]
 800adb4:	89a0      	ldrh	r0, [r4, #12]
 800adb6:	4305      	orrs	r5, r0
 800adb8:	81a5      	strh	r5, [r4, #12]
 800adba:	e7cd      	b.n	800ad58 <__smakebuf_r+0x18>
 800adbc:	0800ab4d 	.word	0x0800ab4d

0800adc0 <_malloc_usable_size_r>:
 800adc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adc4:	1f18      	subs	r0, r3, #4
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	bfbc      	itt	lt
 800adca:	580b      	ldrlt	r3, [r1, r0]
 800adcc:	18c0      	addlt	r0, r0, r3
 800adce:	4770      	bx	lr

0800add0 <_raise_r>:
 800add0:	291f      	cmp	r1, #31
 800add2:	b538      	push	{r3, r4, r5, lr}
 800add4:	4604      	mov	r4, r0
 800add6:	460d      	mov	r5, r1
 800add8:	d904      	bls.n	800ade4 <_raise_r+0x14>
 800adda:	2316      	movs	r3, #22
 800addc:	6003      	str	r3, [r0, #0]
 800adde:	f04f 30ff 	mov.w	r0, #4294967295
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ade6:	b112      	cbz	r2, 800adee <_raise_r+0x1e>
 800ade8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adec:	b94b      	cbnz	r3, 800ae02 <_raise_r+0x32>
 800adee:	4620      	mov	r0, r4
 800adf0:	f000 f830 	bl	800ae54 <_getpid_r>
 800adf4:	462a      	mov	r2, r5
 800adf6:	4601      	mov	r1, r0
 800adf8:	4620      	mov	r0, r4
 800adfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adfe:	f000 b817 	b.w	800ae30 <_kill_r>
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d00a      	beq.n	800ae1c <_raise_r+0x4c>
 800ae06:	1c59      	adds	r1, r3, #1
 800ae08:	d103      	bne.n	800ae12 <_raise_r+0x42>
 800ae0a:	2316      	movs	r3, #22
 800ae0c:	6003      	str	r3, [r0, #0]
 800ae0e:	2001      	movs	r0, #1
 800ae10:	e7e7      	b.n	800ade2 <_raise_r+0x12>
 800ae12:	2400      	movs	r4, #0
 800ae14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae18:	4628      	mov	r0, r5
 800ae1a:	4798      	blx	r3
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	e7e0      	b.n	800ade2 <_raise_r+0x12>

0800ae20 <raise>:
 800ae20:	4b02      	ldr	r3, [pc, #8]	; (800ae2c <raise+0xc>)
 800ae22:	4601      	mov	r1, r0
 800ae24:	6818      	ldr	r0, [r3, #0]
 800ae26:	f7ff bfd3 	b.w	800add0 <_raise_r>
 800ae2a:	bf00      	nop
 800ae2c:	20000020 	.word	0x20000020

0800ae30 <_kill_r>:
 800ae30:	b538      	push	{r3, r4, r5, lr}
 800ae32:	4d07      	ldr	r5, [pc, #28]	; (800ae50 <_kill_r+0x20>)
 800ae34:	2300      	movs	r3, #0
 800ae36:	4604      	mov	r4, r0
 800ae38:	4608      	mov	r0, r1
 800ae3a:	4611      	mov	r1, r2
 800ae3c:	602b      	str	r3, [r5, #0]
 800ae3e:	f7f7 fa29 	bl	8002294 <_kill>
 800ae42:	1c43      	adds	r3, r0, #1
 800ae44:	d102      	bne.n	800ae4c <_kill_r+0x1c>
 800ae46:	682b      	ldr	r3, [r5, #0]
 800ae48:	b103      	cbz	r3, 800ae4c <_kill_r+0x1c>
 800ae4a:	6023      	str	r3, [r4, #0]
 800ae4c:	bd38      	pop	{r3, r4, r5, pc}
 800ae4e:	bf00      	nop
 800ae50:	20000c00 	.word	0x20000c00

0800ae54 <_getpid_r>:
 800ae54:	f7f7 ba16 	b.w	8002284 <_getpid>

0800ae58 <__sread>:
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae60:	f000 f894 	bl	800af8c <_read_r>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	bfab      	itete	ge
 800ae68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae6a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae6c:	181b      	addge	r3, r3, r0
 800ae6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae72:	bfac      	ite	ge
 800ae74:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae76:	81a3      	strhlt	r3, [r4, #12]
 800ae78:	bd10      	pop	{r4, pc}

0800ae7a <__swrite>:
 800ae7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7e:	461f      	mov	r7, r3
 800ae80:	898b      	ldrh	r3, [r1, #12]
 800ae82:	05db      	lsls	r3, r3, #23
 800ae84:	4605      	mov	r5, r0
 800ae86:	460c      	mov	r4, r1
 800ae88:	4616      	mov	r6, r2
 800ae8a:	d505      	bpl.n	800ae98 <__swrite+0x1e>
 800ae8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae90:	2302      	movs	r3, #2
 800ae92:	2200      	movs	r2, #0
 800ae94:	f000 f868 	bl	800af68 <_lseek_r>
 800ae98:	89a3      	ldrh	r3, [r4, #12]
 800ae9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aea2:	81a3      	strh	r3, [r4, #12]
 800aea4:	4632      	mov	r2, r6
 800aea6:	463b      	mov	r3, r7
 800aea8:	4628      	mov	r0, r5
 800aeaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeae:	f000 b817 	b.w	800aee0 <_write_r>

0800aeb2 <__sseek>:
 800aeb2:	b510      	push	{r4, lr}
 800aeb4:	460c      	mov	r4, r1
 800aeb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeba:	f000 f855 	bl	800af68 <_lseek_r>
 800aebe:	1c43      	adds	r3, r0, #1
 800aec0:	89a3      	ldrh	r3, [r4, #12]
 800aec2:	bf15      	itete	ne
 800aec4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aeca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aece:	81a3      	strheq	r3, [r4, #12]
 800aed0:	bf18      	it	ne
 800aed2:	81a3      	strhne	r3, [r4, #12]
 800aed4:	bd10      	pop	{r4, pc}

0800aed6 <__sclose>:
 800aed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeda:	f000 b813 	b.w	800af04 <_close_r>
	...

0800aee0 <_write_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	4d07      	ldr	r5, [pc, #28]	; (800af00 <_write_r+0x20>)
 800aee4:	4604      	mov	r4, r0
 800aee6:	4608      	mov	r0, r1
 800aee8:	4611      	mov	r1, r2
 800aeea:	2200      	movs	r2, #0
 800aeec:	602a      	str	r2, [r5, #0]
 800aeee:	461a      	mov	r2, r3
 800aef0:	f7f7 fa07 	bl	8002302 <_write>
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	d102      	bne.n	800aefe <_write_r+0x1e>
 800aef8:	682b      	ldr	r3, [r5, #0]
 800aefa:	b103      	cbz	r3, 800aefe <_write_r+0x1e>
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	bd38      	pop	{r3, r4, r5, pc}
 800af00:	20000c00 	.word	0x20000c00

0800af04 <_close_r>:
 800af04:	b538      	push	{r3, r4, r5, lr}
 800af06:	4d06      	ldr	r5, [pc, #24]	; (800af20 <_close_r+0x1c>)
 800af08:	2300      	movs	r3, #0
 800af0a:	4604      	mov	r4, r0
 800af0c:	4608      	mov	r0, r1
 800af0e:	602b      	str	r3, [r5, #0]
 800af10:	f7f7 fa13 	bl	800233a <_close>
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	d102      	bne.n	800af1e <_close_r+0x1a>
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	b103      	cbz	r3, 800af1e <_close_r+0x1a>
 800af1c:	6023      	str	r3, [r4, #0]
 800af1e:	bd38      	pop	{r3, r4, r5, pc}
 800af20:	20000c00 	.word	0x20000c00

0800af24 <_fstat_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4d07      	ldr	r5, [pc, #28]	; (800af44 <_fstat_r+0x20>)
 800af28:	2300      	movs	r3, #0
 800af2a:	4604      	mov	r4, r0
 800af2c:	4608      	mov	r0, r1
 800af2e:	4611      	mov	r1, r2
 800af30:	602b      	str	r3, [r5, #0]
 800af32:	f7f7 fa0e 	bl	8002352 <_fstat>
 800af36:	1c43      	adds	r3, r0, #1
 800af38:	d102      	bne.n	800af40 <_fstat_r+0x1c>
 800af3a:	682b      	ldr	r3, [r5, #0]
 800af3c:	b103      	cbz	r3, 800af40 <_fstat_r+0x1c>
 800af3e:	6023      	str	r3, [r4, #0]
 800af40:	bd38      	pop	{r3, r4, r5, pc}
 800af42:	bf00      	nop
 800af44:	20000c00 	.word	0x20000c00

0800af48 <_isatty_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4d06      	ldr	r5, [pc, #24]	; (800af64 <_isatty_r+0x1c>)
 800af4c:	2300      	movs	r3, #0
 800af4e:	4604      	mov	r4, r0
 800af50:	4608      	mov	r0, r1
 800af52:	602b      	str	r3, [r5, #0]
 800af54:	f7f7 fa0d 	bl	8002372 <_isatty>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d102      	bne.n	800af62 <_isatty_r+0x1a>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	b103      	cbz	r3, 800af62 <_isatty_r+0x1a>
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	bd38      	pop	{r3, r4, r5, pc}
 800af64:	20000c00 	.word	0x20000c00

0800af68 <_lseek_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4d07      	ldr	r5, [pc, #28]	; (800af88 <_lseek_r+0x20>)
 800af6c:	4604      	mov	r4, r0
 800af6e:	4608      	mov	r0, r1
 800af70:	4611      	mov	r1, r2
 800af72:	2200      	movs	r2, #0
 800af74:	602a      	str	r2, [r5, #0]
 800af76:	461a      	mov	r2, r3
 800af78:	f7f7 fa06 	bl	8002388 <_lseek>
 800af7c:	1c43      	adds	r3, r0, #1
 800af7e:	d102      	bne.n	800af86 <_lseek_r+0x1e>
 800af80:	682b      	ldr	r3, [r5, #0]
 800af82:	b103      	cbz	r3, 800af86 <_lseek_r+0x1e>
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	bd38      	pop	{r3, r4, r5, pc}
 800af88:	20000c00 	.word	0x20000c00

0800af8c <_read_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4d07      	ldr	r5, [pc, #28]	; (800afac <_read_r+0x20>)
 800af90:	4604      	mov	r4, r0
 800af92:	4608      	mov	r0, r1
 800af94:	4611      	mov	r1, r2
 800af96:	2200      	movs	r2, #0
 800af98:	602a      	str	r2, [r5, #0]
 800af9a:	461a      	mov	r2, r3
 800af9c:	f7f7 f994 	bl	80022c8 <_read>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d102      	bne.n	800afaa <_read_r+0x1e>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	b103      	cbz	r3, 800afaa <_read_r+0x1e>
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	20000c00 	.word	0x20000c00

0800afb0 <_init>:
 800afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb2:	bf00      	nop
 800afb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afb6:	bc08      	pop	{r3}
 800afb8:	469e      	mov	lr, r3
 800afba:	4770      	bx	lr

0800afbc <_fini>:
 800afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afbe:	bf00      	nop
 800afc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afc2:	bc08      	pop	{r3}
 800afc4:	469e      	mov	lr, r3
 800afc6:	4770      	bx	lr
