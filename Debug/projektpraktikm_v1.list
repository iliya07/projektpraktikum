
projektpraktikm_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac20  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800add0  0800add0  0001add0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2bc  0800b2bc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2bc  0800b2bc  0001b2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2c4  0800b2c4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2c4  0800b2c4  0001b2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2c8  0800b2c8  0001b2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b2cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00000a24  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c18  20000c18  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a21c  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cfb  00000000  00000000  0003a440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  0003d140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001558  00000000  00000000  0003e7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000285f7  00000000  00000000  0003fd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a3e9  00000000  00000000  000682f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f528a  00000000  00000000  000826e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017796a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000772c  00000000  00000000  001779bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800adb8 	.word	0x0800adb8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	0800adb8 	.word	0x0800adb8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <_LCD_SendInternal>:
#define LCD_I2C_TIMEOUT 200

#define COLUMNS 16
#define ROWS 2

HAL_StatusTypeDef _LCD_SendInternal(LCD_HandleTypeDef *dev, uint8_t data, uint8_t flags) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af02      	add	r7, sp, #8
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef res;
    for(int i=0;i<5;i++) {
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	e010      	b.n	8001050 <_LCD_SendInternal+0x38>
        res = HAL_I2C_IsDeviceReady(dev->i2c, dev->i2c_addr, 1, LCD_I2C_TIMEOUT);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6858      	ldr	r0, [r3, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b299      	uxth	r1, r3
 8001038:	23c8      	movs	r3, #200	; 0xc8
 800103a:	2201      	movs	r2, #1
 800103c:	f002 ffb6 	bl	8003fac <HAL_I2C_IsDeviceReady>
 8001040:	4603      	mov	r3, r0
 8001042:	75fb      	strb	r3, [r7, #23]
        if(res == HAL_OK)
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <_LCD_SendInternal+0x40>
    for(int i=0;i<5;i++) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3301      	adds	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	2b04      	cmp	r3, #4
 8001054:	ddeb      	ble.n	800102e <_LCD_SendInternal+0x16>
 8001056:	e000      	b.n	800105a <_LCD_SendInternal+0x42>
            break;
 8001058:	bf00      	nop
    }
    if(res!=HAL_OK) {
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <_LCD_SendInternal+0x4c>
    	return res;
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	e044      	b.n	80010ee <_LCD_SendInternal+0xd6>
    }


    uint8_t up = data & 0xF0;
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	f023 030f 	bic.w	r3, r3, #15
 800106a:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	011b      	lsls	r3, r3, #4
 8001070:	73bb      	strb	r3, [r7, #14]
    uint8_t backlight = dev->backlight_enable?BACKLIGHT:0;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7a1b      	ldrb	r3, [r3, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <_LCD_SendInternal+0x66>
 800107a:	2308      	movs	r3, #8
 800107c:	e000      	b.n	8001080 <_LCD_SendInternal+0x68>
 800107e:	2300      	movs	r3, #0
 8001080:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|backlight|PIN_EN;
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	78bb      	ldrb	r3, [r7, #2]
 8001086:	4313      	orrs	r3, r2
 8001088:	b2da      	uxtb	r2, r3
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	4313      	orrs	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	b2db      	uxtb	r3, r3
 8001096:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|backlight;
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	78bb      	ldrb	r3, [r7, #2]
 800109c:	4313      	orrs	r3, r2
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	7b7b      	ldrb	r3, [r7, #13]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|backlight|PIN_EN;
 80010a8:	7bba      	ldrb	r2, [r7, #14]
 80010aa:	78bb      	ldrb	r3, [r7, #2]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	7b7b      	ldrb	r3, [r7, #13]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|backlight;
 80010be:	7bba      	ldrb	r2, [r7, #14]
 80010c0:	78bb      	ldrb	r3, [r7, #2]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	7b7b      	ldrb	r3, [r7, #13]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	72fb      	strb	r3, [r7, #11]

     HAL_I2C_Master_Transmit(dev->i2c,dev->i2c_addr,data_arr,4,LCD_I2C_TIMEOUT);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6858      	ldr	r0, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b299      	uxth	r1, r3
 80010d8:	f107 0208 	add.w	r2, r7, #8
 80010dc:	23c8      	movs	r3, #200	; 0xc8
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2304      	movs	r3, #4
 80010e2:	f002 fe65 	bl	8003db0 <HAL_I2C_Master_Transmit>
        HAL_Delay(LCD_DELAY_MS); //delay afterwards to not overwhelm display
 80010e6:	2005      	movs	r0, #5
 80010e8:	f001 fa44 	bl	8002574 <HAL_Delay>
        return res;
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
    //TODO send data_arr to the device

    HAL_Delay(LCD_DELAY_MS); //delay afterwards to not overwhelm display
    return res;
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_LCD_SendCommand>:

HAL_StatusTypeDef _LCD_SendCommand(LCD_HandleTypeDef *dev, uint8_t cmd) {
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, cmd, 0);
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff85 	bl	8001018 <_LCD_SendInternal>
 800110e:	4603      	mov	r3, r0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_LCD_SendData>:

HAL_StatusTypeDef _LCD_SendData(LCD_HandleTypeDef *dev, uint8_t data) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, data, PIN_RS);
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	2201      	movs	r2, #1
 8001128:	4619      	mov	r1, r3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff74 	bl	8001018 <_LCD_SendInternal>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <LCD_Print>:

#define RETURN_IF_NOT_OK if(status!=HAL_OK)return status;

HAL_StatusTypeDef LCD_Print(LCD_HandleTypeDef *dev, const char *str) {
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
    while(*str) {
 8001144:	e00f      	b.n	8001166 <LCD_Print+0x2c>
    	status = _LCD_SendData(dev, (uint8_t)(*str));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ffe3 	bl	8001118 <_LCD_SendData>
 8001152:	4603      	mov	r3, r0
 8001154:	73fb      	strb	r3, [r7, #15]
        RETURN_IF_NOT_OK;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <LCD_Print+0x26>
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	e007      	b.n	8001170 <LCD_Print+0x36>
        str++;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1eb      	bne.n	8001146 <LCD_Print+0xc>
    }
    return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <LCD_Begin>:
    RETURN_IF_NOT_OK;
    status = LCD_Print(dev, " !!! ");
    return status;
}

HAL_StatusTypeDef LCD_Begin(LCD_HandleTypeDef *dev) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	dev->backlight_enable=true;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	721a      	strb	r2, [r3, #8]
	HAL_StatusTypeDef status;

    // 4-bit mode, 2 lines, 5x7 format
    status = _LCD_SendCommand(dev, 0b00110000);
 8001186:	2130      	movs	r1, #48	; 0x30
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ffb4 	bl	80010f6 <_LCD_SendCommand>
 800118e:	4603      	mov	r3, r0
 8001190:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <LCD_Begin+0x24>
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	e01c      	b.n	80011d6 <LCD_Begin+0x5e>

    // display & cursor home (keep this!)
    status = _LCD_SendCommand(dev, 0b00000010);
 800119c:	2102      	movs	r1, #2
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffa9 	bl	80010f6 <_LCD_SendCommand>
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <LCD_Begin+0x3a>
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	e011      	b.n	80011d6 <LCD_Begin+0x5e>

    // display on, right shift, underline off, blink off
    status = _LCD_SendCommand(dev, 0b00001100);
 80011b2:	210c      	movs	r1, #12
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff9e 	bl	80010f6 <_LCD_SendCommand>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <LCD_Begin+0x50>
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	e006      	b.n	80011d6 <LCD_Begin+0x5e>

    // clear display (optional here)
    status = _LCD_SendCommand(dev, 0b00000001);
 80011c8:	2101      	movs	r1, #1
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff93 	bl	80010f6 <_LCD_SendCommand>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
    return status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <LCD_SetCursor>:


HAL_StatusTypeDef LCD_SetCursor(LCD_HandleTypeDef *dev, uint8_t row, uint8_t col) {
 80011de:	b580      	push	{r7, lr}
 80011e0:	b084      	sub	sp, #16
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	460b      	mov	r3, r1
 80011e8:	70fb      	strb	r3, [r7, #3]
 80011ea:	4613      	mov	r3, r2
 80011ec:	70bb      	strb	r3, [r7, #2]
	if(row<0 || row>=ROWS || col<0 || col>=COLUMNS) {
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d802      	bhi.n	80011fa <LCD_SetCursor+0x1c>
 80011f4:	78bb      	ldrb	r3, [r7, #2]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	d901      	bls.n	80011fe <LCD_SetCursor+0x20>
		return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e010      	b.n	8001220 <LCD_SetCursor+0x42>
	}
	uint8_t cmd = row==0?0b10000000:0b11000000;
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <LCD_SetCursor+0x2a>
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	e000      	b.n	800120a <LCD_SetCursor+0x2c>
 8001208:	23c0      	movs	r3, #192	; 0xc0
 800120a:	73fb      	strb	r3, [r7, #15]
	cmd+=col;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	78bb      	ldrb	r3, [r7, #2]
 8001210:	4413      	add	r3, r2
 8001212:	73fb      	strb	r3, [r7, #15]
	return _LCD_SendCommand(dev, cmd);
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	4619      	mov	r1, r3
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff6c 	bl	80010f6 <_LCD_SendCommand>
 800121e:	4603      	mov	r3, r0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <LCD_Clear>:
	vsnprintf(lcd_buffer, COLUMNS + 1, format, args);
	va_end(args);
	return LCD_Print(dev, lcd_buffer);
}

HAL_StatusTypeDef LCD_Clear(LCD_HandleTypeDef *dev) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	return _LCD_SendCommand(dev, 0b00000001);
 8001230:	2101      	movs	r1, #1
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff5f 	bl	80010f6 <_LCD_SendCommand>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	0000      	movs	r0, r0
 8001244:	0000      	movs	r0, r0
	...

08001248 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800124e:	f001 f91f 	bl	8002490 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001252:	f000 f983 	bl	800155c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001256:	f000 fc15 	bl	8001a84 <MX_GPIO_Init>
	MX_ETH_Init();
 800125a:	f000 fab7 	bl	80017cc <MX_ETH_Init>
	MX_USART3_UART_Init();
 800125e:	f000 fbb9 	bl	80019d4 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001262:	f000 fbe1 	bl	8001a28 <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 8001266:	f000 f9e3 	bl	8001630 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 800126a:	f000 fb89 	bl	8001980 <MX_USART1_UART_Init>
	MX_I2C2_Init();
 800126e:	f000 fafb 	bl	8001868 <MX_I2C2_Init>
	MX_ADC2_Init();
 8001272:	f000 fa2f 	bl	80016d4 <MX_ADC2_Init>
	MX_TIM2_Init();
 8001276:	f000 fb37 	bl	80018e8 <MX_TIM2_Init>
	MX_DAC_Init();
 800127a:	f000 fa7d 	bl	8001778 <MX_DAC_Init>
	/* USER CODE BEGIN 2 */
	//initilizieren von Display
	LCD_HandleTypeDef dev;
	dev.i2c = &hi2c2;
 800127e:	4b9c      	ldr	r3, [pc, #624]	; (80014f0 <main+0x2a8>)
 8001280:	607b      	str	r3, [r7, #4]
	dev.i2c_addr = LCD_DEFAULT_ADDR;
 8001282:	234e      	movs	r3, #78	; 0x4e
 8001284:	703b      	strb	r3, [r7, #0]
	dev.backlight_enable = 1;
 8001286:	2301      	movs	r3, #1
 8001288:	723b      	strb	r3, [r7, #8]
	LCD_Begin(&dev);
 800128a:	463b      	mov	r3, r7
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff73 	bl	8001178 <LCD_Begin>
	HAL_DAC_Start(&hdac, CH1_DC);
 8001292:	4b98      	ldr	r3, [pc, #608]	; (80014f4 <main+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4619      	mov	r1, r3
 8001298:	4897      	ldr	r0, [pc, #604]	; (80014f8 <main+0x2b0>)
 800129a:	f001 fe9e 	bl	8002fda <HAL_DAC_Start>
	HAL_TIM_Base_Start(&htim2);
 800129e:	4897      	ldr	r0, [pc, #604]	; (80014fc <main+0x2b4>)
 80012a0:	f004 f83c 	bl	800531c <HAL_TIM_Base_Start>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		LCD_Clear(&dev);
 80012a4:	463b      	mov	r3, r7
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ffbe 	bl	8001228 <LCD_Clear>
		if (state == 0) {
 80012ac:	4b94      	ldr	r3, [pc, #592]	; (8001500 <main+0x2b8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d113      	bne.n	80012dc <main+0x94>
			DAC->DHR12R1 = DAC_OUT[0];
 80012b4:	4a93      	ldr	r2, [pc, #588]	; (8001504 <main+0x2bc>)
 80012b6:	4b94      	ldr	r3, [pc, #592]	; (8001508 <main+0x2c0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6093      	str	r3, [r2, #8]
			sprintf(msg1, "IDLE");
 80012bc:	4993      	ldr	r1, [pc, #588]	; (800150c <main+0x2c4>)
 80012be:	4894      	ldr	r0, [pc, #592]	; (8001510 <main+0x2c8>)
 80012c0:	f005 ff88 	bl	80071d4 <siprintf>
			//HAL_UART_Transmit(&huart3, (uint8_t*) msg1, strlen(msg1), 300);
			LCD_Print(&dev, msg1);
 80012c4:	463b      	mov	r3, r7
 80012c6:	4992      	ldr	r1, [pc, #584]	; (8001510 <main+0x2c8>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff36 	bl	800113a <LCD_Print>
			LCD_SetCursor(&dev, 0, 0);
 80012ce:	463b      	mov	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff82 	bl	80011de <LCD_SetCursor>
 80012da:	e7e3      	b.n	80012a4 <main+0x5c>
		}

		else if (state == 1) {
 80012dc:	4b88      	ldr	r3, [pc, #544]	; (8001500 <main+0x2b8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d16d      	bne.n	80013c0 <main+0x178>
			DAC->DHR12R1 = DAC_OUT[2];
 80012e4:	4a87      	ldr	r2, [pc, #540]	; (8001504 <main+0x2bc>)
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <main+0x2c0>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	6093      	str	r3, [r2, #8]
			HAL_ADC_Start(&hadc1);
 80012ec:	4889      	ldr	r0, [pc, #548]	; (8001514 <main+0x2cc>)
 80012ee:	f001 f9a9 	bl	8002644 <HAL_ADC_Start>
			HAL_ADC_Start(&hadc2);
 80012f2:	4889      	ldr	r0, [pc, #548]	; (8001518 <main+0x2d0>)
 80012f4:	f001 f9a6 	bl	8002644 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 80012f8:	2164      	movs	r1, #100	; 0x64
 80012fa:	4886      	ldr	r0, [pc, #536]	; (8001514 <main+0x2cc>)
 80012fc:	f001 fa74 	bl	80027e8 <HAL_ADC_PollForConversion>
			HAL_ADC_PollForConversion(&hadc2, 100);
 8001300:	2164      	movs	r1, #100	; 0x64
 8001302:	4885      	ldr	r0, [pc, #532]	; (8001518 <main+0x2d0>)
 8001304:	f001 fa70 	bl	80027e8 <HAL_ADC_PollForConversion>

			raw_vol = HAL_ADC_GetValue(&hadc1);
 8001308:	4882      	ldr	r0, [pc, #520]	; (8001514 <main+0x2cc>)
 800130a:	f001 faf8 	bl	80028fe <HAL_ADC_GetValue>
 800130e:	4603      	mov	r3, r0
 8001310:	b29a      	uxth	r2, r3
 8001312:	4b82      	ldr	r3, [pc, #520]	; (800151c <main+0x2d4>)
 8001314:	801a      	strh	r2, [r3, #0]
			raw_input = HAL_ADC_GetValue(&hadc2);
 8001316:	4880      	ldr	r0, [pc, #512]	; (8001518 <main+0x2d0>)
 8001318:	f001 faf1 	bl	80028fe <HAL_ADC_GetValue>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
 8001320:	4b7f      	ldr	r3, [pc, #508]	; (8001520 <main+0x2d8>)
 8001322:	801a      	strh	r2, [r3, #0]

			input = raw_input * (3.3 / 4096);
 8001324:	4b7e      	ldr	r3, [pc, #504]	; (8001520 <main+0x2d8>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f90b 	bl	8000544 <__aeabi_i2d>
 800132e:	a36e      	add	r3, pc, #440	; (adr r3, 80014e8 <main+0x2a0>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff f970 	bl	8000618 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fc62 	bl	8000c08 <__aeabi_d2f>
 8001344:	4603      	mov	r3, r0
 8001346:	4a77      	ldr	r2, [pc, #476]	; (8001524 <main+0x2dc>)
 8001348:	6013      	str	r3, [r2, #0]
			vol = raw_vol * (3.3 / 4096);
 800134a:	4b74      	ldr	r3, [pc, #464]	; (800151c <main+0x2d4>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f8f8 	bl	8000544 <__aeabi_i2d>
 8001354:	a364      	add	r3, pc, #400	; (adr r3, 80014e8 <main+0x2a0>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff f95d 	bl	8000618 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fc4f 	bl	8000c08 <__aeabi_d2f>
 800136a:	4603      	mov	r3, r0
 800136c:	4a6e      	ldr	r2, [pc, #440]	; (8001528 <main+0x2e0>)
 800136e:	6013      	str	r3, [r2, #0]

			m_arr[j]=vol;
 8001370:	4b6e      	ldr	r3, [pc, #440]	; (800152c <main+0x2e4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a6c      	ldr	r2, [pc, #432]	; (8001528 <main+0x2e0>)
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	496d      	ldr	r1, [pc, #436]	; (8001530 <main+0x2e8>)
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	601a      	str	r2, [r3, #0]
			j++;
 8001380:	4b6a      	ldr	r3, [pc, #424]	; (800152c <main+0x2e4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	4a69      	ldr	r2, [pc, #420]	; (800152c <main+0x2e4>)
 8001388:	6013      	str	r3, [r2, #0]
			sprintf(msg2, "MEASURING");
 800138a:	496a      	ldr	r1, [pc, #424]	; (8001534 <main+0x2ec>)
 800138c:	486a      	ldr	r0, [pc, #424]	; (8001538 <main+0x2f0>)
 800138e:	f005 ff21 	bl	80071d4 <siprintf>
			LCD_SetCursor(&dev, 0, 0);
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff20 	bl	80011de <LCD_SetCursor>
			LCD_Print(&dev, msg2);
 800139e:	463b      	mov	r3, r7
 80013a0:	4965      	ldr	r1, [pc, #404]	; (8001538 <main+0x2f0>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fec9 	bl	800113a <LCD_Print>
			HAL_Delay(100);
 80013a8:	2064      	movs	r0, #100	; 0x64
 80013aa:	f001 f8e3 	bl	8002574 <HAL_Delay>
			if (j >= 30){
 80013ae:	4b5f      	ldr	r3, [pc, #380]	; (800152c <main+0x2e4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b1d      	cmp	r3, #29
 80013b4:	f77f af76 	ble.w	80012a4 <main+0x5c>
				state = 3;
 80013b8:	4b51      	ldr	r3, [pc, #324]	; (8001500 <main+0x2b8>)
 80013ba:	2203      	movs	r2, #3
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e771      	b.n	80012a4 <main+0x5c>
			}

		} else if (state == 2) {
 80013c0:	4b4f      	ldr	r3, [pc, #316]	; (8001500 <main+0x2b8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d116      	bne.n	80013f6 <main+0x1ae>
			sprintf(msg3, "MESSURE CANCEL");
 80013c8:	495c      	ldr	r1, [pc, #368]	; (800153c <main+0x2f4>)
 80013ca:	485d      	ldr	r0, [pc, #372]	; (8001540 <main+0x2f8>)
 80013cc:	f005 ff02 	bl	80071d4 <siprintf>
			LCD_SetCursor(&dev, 0, 0);
 80013d0:	463b      	mov	r3, r7
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff01 	bl	80011de <LCD_SetCursor>
			LCD_Print(&dev, msg3);
 80013dc:	463b      	mov	r3, r7
 80013de:	4958      	ldr	r1, [pc, #352]	; (8001540 <main+0x2f8>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff feaa 	bl	800113a <LCD_Print>
			HAL_Delay(3000);
 80013e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013ea:	f001 f8c3 	bl	8002574 <HAL_Delay>
			state = 0;
 80013ee:	4b44      	ldr	r3, [pc, #272]	; (8001500 <main+0x2b8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e756      	b.n	80012a4 <main+0x5c>
		} else if (state == 3) {
 80013f6:	4b42      	ldr	r3, [pc, #264]	; (8001500 <main+0x2b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	f47f af52 	bne.w	80012a4 <main+0x5c>
			for(int i = 0; i <= mes-2; i++){
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	e033      	b.n	800146e <main+0x226>
				tau_i =((m_arr[i+2]-m_arr[i])/0.5);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3302      	adds	r3, #2
 800140a:	4a49      	ldr	r2, [pc, #292]	; (8001530 <main+0x2e8>)
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	ed93 7a00 	vldr	s14, [r3]
 8001414:	4a46      	ldr	r2, [pc, #280]	; (8001530 <main+0x2e8>)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001424:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142c:	4b45      	ldr	r3, [pc, #276]	; (8001544 <main+0x2fc>)
 800142e:	edc3 7a00 	vstr	s15, [r3]
				if(tau_i < 0){
 8001432:	4b44      	ldr	r3, [pc, #272]	; (8001544 <main+0x2fc>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001440:	d507      	bpl.n	8001452 <main+0x20a>
					tau_i = tau_i*(-1);
 8001442:	4b40      	ldr	r3, [pc, #256]	; (8001544 <main+0x2fc>)
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	eef1 7a67 	vneg.f32	s15, s15
 800144c:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <main+0x2fc>)
 800144e:	edc3 7a00 	vstr	s15, [r3]
				}
				sum = sum+tau_i;
 8001452:	4b3d      	ldr	r3, [pc, #244]	; (8001548 <main+0x300>)
 8001454:	ed93 7a00 	vldr	s14, [r3]
 8001458:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <main+0x2fc>)
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001462:	4b39      	ldr	r3, [pc, #228]	; (8001548 <main+0x300>)
 8001464:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i <= mes-2; i++){
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001478:	4b34      	ldr	r3, [pc, #208]	; (800154c <main+0x304>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001482:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d9ba      	bls.n	8001406 <main+0x1be>
			}
			tau_avr = (sum/28);
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <main+0x300>)
 8001492:	ed93 7a00 	vldr	s14, [r3]
 8001496:	eef3 6a0c 	vmov.f32	s13, #60	; 0x41e00000  28.0
 800149a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149e:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <main+0x308>)
 80014a0:	edc3 7a00 	vstr	s15, [r3]
			sprintf(msg4, "tau=%.2f", tau_avr);
 80014a4:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <main+0x308>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f85d 	bl	8000568 <__aeabi_f2d>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4928      	ldr	r1, [pc, #160]	; (8001554 <main+0x30c>)
 80014b4:	4828      	ldr	r0, [pc, #160]	; (8001558 <main+0x310>)
 80014b6:	f005 fe8d 	bl	80071d4 <siprintf>
			LCD_SetCursor(&dev, 0, 0);
 80014ba:	463b      	mov	r3, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe8c 	bl	80011de <LCD_SetCursor>
			LCD_Print(&dev, msg4);
 80014c6:	463b      	mov	r3, r7
 80014c8:	4923      	ldr	r1, [pc, #140]	; (8001558 <main+0x310>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fe35 	bl	800113a <LCD_Print>
			HAL_Delay(5000);
 80014d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80014d4:	f001 f84e 	bl	8002574 <HAL_Delay>
			sum = 0;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <main+0x300>)
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
			state = 0;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <main+0x2b8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
		LCD_Clear(&dev);
 80014e6:	e6dd      	b.n	80012a4 <main+0x5c>
 80014e8:	66666666 	.word	0x66666666
 80014ec:	3f4a6666 	.word	0x3f4a6666
 80014f0:	200005c4 	.word	0x200005c4
 80014f4:	2000021c 	.word	0x2000021c
 80014f8:	20000500 	.word	0x20000500
 80014fc:	20000618 	.word	0x20000618
 8001500:	20000bf4 	.word	0x20000bf4
 8001504:	40007400 	.word	0x40007400
 8001508:	20000000 	.word	0x20000000
 800150c:	0800add0 	.word	0x0800add0
 8001510:	20000220 	.word	0x20000220
 8001514:	20000470 	.word	0x20000470
 8001518:	200004b8 	.word	0x200004b8
 800151c:	20000218 	.word	0x20000218
 8001520:	2000021a 	.word	0x2000021a
 8001524:	20000214 	.word	0x20000214
 8001528:	20000210 	.word	0x20000210
 800152c:	200002f0 	.word	0x200002f0
 8001530:	20000270 	.word	0x20000270
 8001534:	0800add8 	.word	0x0800add8
 8001538:	20000234 	.word	0x20000234
 800153c:	0800ade4 	.word	0x0800ade4
 8001540:	20000248 	.word	0x20000248
 8001544:	200002f4 	.word	0x200002f4
 8001548:	200002ec 	.word	0x200002ec
 800154c:	20000010 	.word	0x20000010
 8001550:	200002e8 	.word	0x200002e8
 8001554:	0800adf4 	.word	0x0800adf4
 8001558:	2000025c 	.word	0x2000025c

0800155c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b094      	sub	sp, #80	; 0x50
 8001560:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2230      	movs	r2, #48	; 0x30
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f004 ffaa 	bl	80064c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	4b28      	ldr	r3, [pc, #160]	; (8001628 <SystemClock_Config+0xcc>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	4a27      	ldr	r2, [pc, #156]	; (8001628 <SystemClock_Config+0xcc>)
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158e:	6413      	str	r3, [r2, #64]	; 0x40
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <SystemClock_Config+0xcc>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <SystemClock_Config+0xd0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a21      	ldr	r2, [pc, #132]	; (800162c <SystemClock_Config+0xd0>)
 80015a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <SystemClock_Config+0xd0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c2:	2302      	movs	r3, #2
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80015cc:	2308      	movs	r3, #8
 80015ce:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80015d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015d4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d6:	2302      	movs	r3, #2
 80015d8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80015da:	2307      	movs	r3, #7
 80015dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 f9b2 	bl	800494c <HAL_RCC_OscConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x96>
		Error_Handler();
 80015ee:	f000 fb2d 	bl	8001c4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80015f2:	230f      	movs	r3, #15
 80015f4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f6:	2302      	movs	r3, #2
 80015f8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001602:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001608:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	2105      	movs	r1, #5
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fc13 	bl	8004e3c <HAL_RCC_ClockConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <SystemClock_Config+0xc4>
		Error_Handler();
 800161c:	f000 fb16 	bl	8001c4c <Error_Handler>
	}
}
 8001620:	bf00      	nop
 8001622:	3750      	adds	r7, #80	; 0x50
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000

08001630 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001636:	463b      	mov	r3, r7
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001644:	4a21      	ldr	r2, [pc, #132]	; (80016cc <MX_ADC1_Init+0x9c>)
 8001646:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001648:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <MX_ADC1_Init+0x98>)
 800164a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800164e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_ADC1_Init+0x98>)
 800165e:	2200      	movs	r2, #0
 8001660:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_ADC1_Init+0x98>)
 800166c:	2200      	movs	r2, #0
 800166e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001672:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <MX_ADC1_Init+0xa0>)
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_ADC1_Init+0x98>)
 800167e:	2201      	movs	r2, #1
 8001680:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_ADC1_Init+0x98>)
 800168c:	2201      	movs	r2, #1
 800168e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001692:	f000 ff93 	bl	80025bc <HAL_ADC_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_ADC1_Init+0x70>
		Error_Handler();
 800169c:	f000 fad6 	bl	8001c4c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80016a0:	2303      	movs	r3, #3
 80016a2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80016ac:	463b      	mov	r3, r7
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_ADC1_Init+0x98>)
 80016b2:	f001 f931 	bl	8002918 <HAL_ADC_ConfigChannel>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_ADC1_Init+0x90>
		Error_Handler();
 80016bc:	f000 fac6 	bl	8001c4c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000470 	.word	0x20000470
 80016cc:	40012000 	.word	0x40012000
 80016d0:	0f000001 	.word	0x0f000001

080016d4 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80016da:	463b      	mov	r3, r7
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <MX_ADC2_Init+0x98>)
 80016e8:	4a21      	ldr	r2, [pc, #132]	; (8001770 <MX_ADC2_Init+0x9c>)
 80016ea:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <MX_ADC2_Init+0x98>)
 80016ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016f2:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <MX_ADC2_Init+0x98>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_ADC2_Init+0x98>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <MX_ADC2_Init+0x98>)
 8001702:	2200      	movs	r2, #0
 8001704:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <MX_ADC2_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <MX_ADC2_Init+0x98>)
 8001710:	2200      	movs	r2, #0
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_ADC2_Init+0x98>)
 8001716:	4a17      	ldr	r2, [pc, #92]	; (8001774 <MX_ADC2_Init+0xa0>)
 8001718:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_ADC2_Init+0x98>)
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_ADC2_Init+0x98>)
 8001722:	2201      	movs	r2, #1
 8001724:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_ADC2_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_ADC2_Init+0x98>)
 8001730:	2201      	movs	r2, #1
 8001732:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001734:	480d      	ldr	r0, [pc, #52]	; (800176c <MX_ADC2_Init+0x98>)
 8001736:	f000 ff41 	bl	80025bc <HAL_ADC_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_ADC2_Init+0x70>
		Error_Handler();
 8001740:	f000 fa84 	bl	8001c4c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8001744:	230d      	movs	r3, #13
 8001746:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001748:	2301      	movs	r3, #1
 800174a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001750:	463b      	mov	r3, r7
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_ADC2_Init+0x98>)
 8001756:	f001 f8df 	bl	8002918 <HAL_ADC_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_ADC2_Init+0x90>
		Error_Handler();
 8001760:	f000 fa74 	bl	8001c4c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200004b8 	.word	0x200004b8
 8001770:	40012100 	.word	0x40012100
 8001774:	0f000001 	.word	0x0f000001

08001778 <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 800177e:	463b      	mov	r3, r7
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]

	/* USER CODE END DAC_Init 1 */

	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_DAC_Init+0x4c>)
 8001788:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <MX_DAC_Init+0x50>)
 800178a:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <MX_DAC_Init+0x4c>)
 800178e:	f001 fc02 	bl	8002f96 <HAL_DAC_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_DAC_Init+0x24>
		Error_Handler();
 8001798:	f000 fa58 	bl	8001c4c <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800179c:	2300      	movs	r3, #0
 800179e:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80017a4:	463b      	mov	r3, r7
 80017a6:	2200      	movs	r2, #0
 80017a8:	4619      	mov	r1, r3
 80017aa:	4806      	ldr	r0, [pc, #24]	; (80017c4 <MX_DAC_Init+0x4c>)
 80017ac:	f001 fc67 	bl	800307e <HAL_DAC_ConfigChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_DAC_Init+0x42>
		Error_Handler();
 80017b6:	f000 fa49 	bl	8001c4c <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000500 	.word	0x20000500
 80017c8:	40007400 	.word	0x40007400

080017cc <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <MX_ETH_Init+0x84>)
 80017d2:	4a20      	ldr	r2, [pc, #128]	; (8001854 <MX_ETH_Init+0x88>)
 80017d4:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <MX_ETH_Init+0x8c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <MX_ETH_Init+0x8c>)
 80017de:	2280      	movs	r2, #128	; 0x80
 80017e0:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <MX_ETH_Init+0x8c>)
 80017e4:	22e1      	movs	r2, #225	; 0xe1
 80017e6:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <MX_ETH_Init+0x8c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <MX_ETH_Init+0x8c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <MX_ETH_Init+0x8c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_ETH_Init+0x84>)
 80017fc:	4a16      	ldr	r2, [pc, #88]	; (8001858 <MX_ETH_Init+0x8c>)
 80017fe:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <MX_ETH_Init+0x84>)
 8001802:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001806:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_ETH_Init+0x84>)
 800180a:	4a14      	ldr	r2, [pc, #80]	; (800185c <MX_ETH_Init+0x90>)
 800180c:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <MX_ETH_Init+0x84>)
 8001810:	4a13      	ldr	r2, [pc, #76]	; (8001860 <MX_ETH_Init+0x94>)
 8001812:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_ETH_Init+0x84>)
 8001816:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800181a:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <MX_ETH_Init+0x84>)
 800181e:	f001 fc7d 	bl	800311c <HAL_ETH_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_ETH_Init+0x60>
		Error_Handler();
 8001828:	f000 fa10 	bl	8001c4c <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 800182c:	2238      	movs	r2, #56	; 0x38
 800182e:	2100      	movs	r1, #0
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <MX_ETH_Init+0x98>)
 8001832:	f004 fe47 	bl	80064c4 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <MX_ETH_Init+0x98>)
 8001838:	2221      	movs	r2, #33	; 0x21
 800183a:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_ETH_Init+0x98>)
 800183e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001842:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <MX_ETH_Init+0x98>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000514 	.word	0x20000514
 8001854:	40028000 	.word	0x40028000
 8001858:	20000bf8 	.word	0x20000bf8
 800185c:	200003d0 	.word	0x200003d0
 8001860:	20000330 	.word	0x20000330
 8001864:	200002f8 	.word	0x200002f8

08001868 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MX_I2C2_Init+0x74>)
 800186e:	4a1c      	ldr	r2, [pc, #112]	; (80018e0 <MX_I2C2_Init+0x78>)
 8001870:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <MX_I2C2_Init+0x74>)
 8001874:	4a1b      	ldr	r2, [pc, #108]	; (80018e4 <MX_I2C2_Init+0x7c>)
 8001876:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <MX_I2C2_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <MX_I2C2_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <MX_I2C2_Init+0x74>)
 8001886:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800188a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <MX_I2C2_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <MX_I2C2_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001898:	4b10      	ldr	r3, [pc, #64]	; (80018dc <MX_I2C2_Init+0x74>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_I2C2_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <MX_I2C2_Init+0x74>)
 80018a6:	f002 f93f 	bl	8003b28 <HAL_I2C_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_I2C2_Init+0x4c>
		Error_Handler();
 80018b0:	f000 f9cc 	bl	8001c4c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 80018b4:	2100      	movs	r1, #0
 80018b6:	4809      	ldr	r0, [pc, #36]	; (80018dc <MX_I2C2_Init+0x74>)
 80018b8:	f002 feaf 	bl	800461a <HAL_I2CEx_ConfigAnalogFilter>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_I2C2_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 80018c2:	f000 f9c3 	bl	8001c4c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80018c6:	2100      	movs	r1, #0
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <MX_I2C2_Init+0x74>)
 80018ca:	f002 fee2 	bl	8004692 <HAL_I2CEx_ConfigDigitalFilter>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_I2C2_Init+0x70>
		Error_Handler();
 80018d4:	f000 f9ba 	bl	8001c4c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200005c4 	.word	0x200005c4
 80018e0:	40005800 	.word	0x40005800
 80018e4:	000186a0 	.word	0x000186a0

080018e8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018fc:	463b      	mov	r3, r7
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <MX_TIM2_Init+0x94>)
 8001906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 10;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MX_TIM2_Init+0x94>)
 800190e:	220a      	movs	r2, #10
 8001910:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <MX_TIM2_Init+0x94>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <MX_TIM2_Init+0x94>)
 800191a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <MX_TIM2_Init+0x94>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <MX_TIM2_Init+0x94>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800192c:	4813      	ldr	r0, [pc, #76]	; (800197c <MX_TIM2_Init+0x94>)
 800192e:	f003 fca5 	bl	800527c <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x54>
		Error_Handler();
 8001938:	f000 f988 	bl	8001c4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001940:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	4619      	mov	r1, r3
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <MX_TIM2_Init+0x94>)
 800194a:	f003 fd4f 	bl	80053ec <HAL_TIM_ConfigClockSource>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM2_Init+0x70>
		Error_Handler();
 8001954:	f000 f97a 	bl	8001c4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001960:	463b      	mov	r3, r7
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_TIM2_Init+0x94>)
 8001966:	f003 ff43 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001970:	f000 f96c 	bl	8001c4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000618 	.word	0x20000618

08001980 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <MX_USART1_UART_Init+0x50>)
 8001988:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 11500;
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 800198c:	f642 42ec 	movw	r2, #11500	; 0x2cec
 8001990:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_USART1_UART_Init+0x4c>)
 80019b8:	f003 ff96 	bl	80058e8 <HAL_UART_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80019c2:	f000 f943 	bl	8001c4c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000660 	.word	0x20000660
 80019d0:	40011000 	.word	0x40011000

080019d4 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <MX_USART3_UART_Init+0x50>)
 80019dc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 80019e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019e4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_USART3_UART_Init+0x4c>)
 8001a0c:	f003 ff6c 	bl	80058e8 <HAL_UART_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001a16:	f000 f919 	bl	8001c4c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200006a4 	.word	0x200006a4
 8001a24:	40004800 	.word	0x40004800

08001a28 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a32:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a36:	2204      	movs	r2, #4
 8001a38:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a48:	2202      	movs	r2, #2
 8001a4a:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a6c:	f002 fe50 	bl	8004710 <HAL_PCD_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8001a76:	f000 f8e9 	bl	8001c4c <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200006e8 	.word	0x200006e8

08001a84 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a56      	ldr	r2, [pc, #344]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b54      	ldr	r3, [pc, #336]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a4f      	ldr	r2, [pc, #316]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001ac0:	f043 0320 	orr.w	r3, r3, #32
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b4d      	ldr	r3, [pc, #308]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b49      	ldr	r3, [pc, #292]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a48      	ldr	r2, [pc, #288]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b46      	ldr	r3, [pc, #280]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b42      	ldr	r3, [pc, #264]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a41      	ldr	r2, [pc, #260]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a3a      	ldr	r2, [pc, #232]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a33      	ldr	r2, [pc, #204]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a2c      	ldr	r2, [pc, #176]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <MX_GPIO_Init+0x178>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001b64:	4826      	ldr	r0, [pc, #152]	; (8001c00 <MX_GPIO_Init+0x17c>)
 8001b66:	f001 ffad 	bl	8003ac4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2140      	movs	r1, #64	; 0x40
 8001b6e:	4825      	ldr	r0, [pc, #148]	; (8001c04 <MX_GPIO_Init+0x180>)
 8001b70:	f001 ffa8 	bl	8003ac4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b78:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b7e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	481f      	ldr	r0, [pc, #124]	; (8001c08 <MX_GPIO_Init+0x184>)
 8001b8c:	f001 fdee 	bl	800376c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 8001b90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b94:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4815      	ldr	r0, [pc, #84]	; (8001c00 <MX_GPIO_Init+0x17c>)
 8001baa:	f001 fddf 	bl	800376c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001bae:	2340      	movs	r3, #64	; 0x40
 8001bb0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480f      	ldr	r0, [pc, #60]	; (8001c04 <MX_GPIO_Init+0x180>)
 8001bc6:	f001 fdd1 	bl	800376c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4809      	ldr	r0, [pc, #36]	; (8001c04 <MX_GPIO_Init+0x180>)
 8001bde:	f001 fdc5 	bl	800376c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2101      	movs	r1, #1
 8001be6:	2028      	movs	r0, #40	; 0x28
 8001be8:	f001 f99f 	bl	8002f2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bec:	2028      	movs	r0, #40	; 0x28
 8001bee:	f001 f9b8 	bl	8002f62 <HAL_NVIC_EnableIRQ>

}
 8001bf2:	bf00      	nop
 8001bf4:	3730      	adds	r7, #48	; 0x30
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020400 	.word	0x40020400
 8001c04:	40021800 	.word	0x40021800
 8001c08:	40020800 	.word	0x40020800

08001c0c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c1c:	d10e      	bne.n	8001c3c <HAL_GPIO_EXTI_Callback+0x30>
		if (state == 0)
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d103      	bne.n	8001c2e <HAL_GPIO_EXTI_Callback+0x22>
			state = 1;
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
		else {
			//wird in main gemacht
		}
	}

}
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_EXTI_Callback+0x30>
		else if (state == 1)
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d102      	bne.n	8001c3c <HAL_GPIO_EXTI_Callback+0x30>
			state = 2;
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001c38:	2202      	movs	r2, #2
 8001c3a:	601a      	str	r2, [r3, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	20000bf4 	.word	0x20000bf4

08001c4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
}
 8001c52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c54:	e7fe      	b.n	8001c54 <Error_Handler+0x8>
	...

08001c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a2e      	ldr	r2, [pc, #184]	; (8001d80 <HAL_ADC_MspInit+0xd8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d128      	bne.n	8001d1c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_ADC_MspInit+0xdc>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a2c      	ldr	r2, [pc, #176]	; (8001d84 <HAL_ADC_MspInit+0xdc>)
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <HAL_ADC_MspInit+0xdc>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <HAL_ADC_MspInit+0xdc>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a25      	ldr	r2, [pc, #148]	; (8001d84 <HAL_ADC_MspInit+0xdc>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <HAL_ADC_MspInit+0xdc>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d02:	2308      	movs	r3, #8
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d06:	2303      	movs	r3, #3
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	481c      	ldr	r0, [pc, #112]	; (8001d88 <HAL_ADC_MspInit+0xe0>)
 8001d16:	f001 fd29 	bl	800376c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d1a:	e02c      	b.n	8001d76 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <HAL_ADC_MspInit+0xe4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d127      	bne.n	8001d76 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <HAL_ADC_MspInit+0xdc>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a15      	ldr	r2, [pc, #84]	; (8001d84 <HAL_ADC_MspInit+0xdc>)
 8001d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_ADC_MspInit+0xdc>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_ADC_MspInit+0xdc>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <HAL_ADC_MspInit+0xdc>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_ADC_MspInit+0xdc>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d5e:	2308      	movs	r3, #8
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d62:	2303      	movs	r3, #3
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4807      	ldr	r0, [pc, #28]	; (8001d90 <HAL_ADC_MspInit+0xe8>)
 8001d72:	f001 fcfb 	bl	800376c <HAL_GPIO_Init>
}
 8001d76:	bf00      	nop
 8001d78:	3730      	adds	r7, #48	; 0x30
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40012000 	.word	0x40012000
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	40012100 	.word	0x40012100
 8001d90:	40020800 	.word	0x40020800

08001d94 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_DAC_MspInit+0x7c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d127      	bne.n	8001e06 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <HAL_DAC_MspInit+0x80>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a15      	ldr	r2, [pc, #84]	; (8001e14 <HAL_DAC_MspInit+0x80>)
 8001dc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_DAC_MspInit+0x80>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_DAC_MspInit+0x80>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_DAC_MspInit+0x80>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <HAL_DAC_MspInit+0x80>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dee:	2310      	movs	r3, #16
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df2:	2303      	movs	r3, #3
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <HAL_DAC_MspInit+0x84>)
 8001e02:	f001 fcb3 	bl	800376c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40007400 	.word	0x40007400
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000

08001e1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08e      	sub	sp, #56	; 0x38
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a55      	ldr	r2, [pc, #340]	; (8001f90 <HAL_ETH_MspInit+0x174>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	f040 80a4 	bne.w	8001f88 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
 8001e44:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e50:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	623b      	str	r3, [r7, #32]
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	4a4b      	ldr	r2, [pc, #300]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6c:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	4b45      	ldr	r3, [pc, #276]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	4a44      	ldr	r2, [pc, #272]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e86:	6313      	str	r3, [r2, #48]	; 0x30
 8001e88:	4b42      	ldr	r3, [pc, #264]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	4a3d      	ldr	r2, [pc, #244]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	4a36      	ldr	r2, [pc, #216]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec0:	4b34      	ldr	r3, [pc, #208]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	4a2f      	ldr	r2, [pc, #188]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001ed6:	f043 0302 	orr.w	r3, r3, #2
 8001eda:	6313      	str	r3, [r2, #48]	; 0x30
 8001edc:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef8:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <HAL_ETH_MspInit+0x178>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f04:	2332      	movs	r3, #50	; 0x32
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f14:	230b      	movs	r3, #11
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	481e      	ldr	r0, [pc, #120]	; (8001f98 <HAL_ETH_MspInit+0x17c>)
 8001f20:	f001 fc24 	bl	800376c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001f24:	2386      	movs	r3, #134	; 0x86
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f34:	230b      	movs	r3, #11
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4817      	ldr	r0, [pc, #92]	; (8001f9c <HAL_ETH_MspInit+0x180>)
 8001f40:	f001 fc14 	bl	800376c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f56:	230b      	movs	r3, #11
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5e:	4619      	mov	r1, r3
 8001f60:	480f      	ldr	r0, [pc, #60]	; (8001fa0 <HAL_ETH_MspInit+0x184>)
 8001f62:	f001 fc03 	bl	800376c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f78:	230b      	movs	r3, #11
 8001f7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f80:	4619      	mov	r1, r3
 8001f82:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <HAL_ETH_MspInit+0x188>)
 8001f84:	f001 fbf2 	bl	800376c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001f88:	bf00      	nop
 8001f8a:	3738      	adds	r7, #56	; 0x38
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40028000 	.word	0x40028000
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40021800 	.word	0x40021800

08001fa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a19      	ldr	r2, [pc, #100]	; (800202c <HAL_I2C_MspInit+0x84>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d12b      	bne.n	8002022 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_I2C_MspInit+0x88>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a17      	ldr	r2, [pc, #92]	; (8002030 <HAL_I2C_MspInit+0x88>)
 8001fd4:	f043 0320 	orr.w	r3, r3, #32
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_I2C_MspInit+0x88>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fea:	2312      	movs	r3, #18
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	480c      	ldr	r0, [pc, #48]	; (8002034 <HAL_I2C_MspInit+0x8c>)
 8002002:	f001 fbb3 	bl	800376c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_I2C_MspInit+0x88>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a08      	ldr	r2, [pc, #32]	; (8002030 <HAL_I2C_MspInit+0x88>)
 8002010:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_I2C_MspInit+0x88>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002022:	bf00      	nop
 8002024:	3728      	adds	r7, #40	; 0x28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40005800 	.word	0x40005800
 8002030:	40023800 	.word	0x40023800
 8002034:	40021400 	.word	0x40021400

08002038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002048:	d10d      	bne.n	8002066 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_TIM_Base_MspInit+0x3c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a08      	ldr	r2, [pc, #32]	; (8002074 <HAL_TIM_Base_MspInit+0x3c>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_TIM_Base_MspInit+0x3c>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800

08002078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08c      	sub	sp, #48	; 0x30
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 031c 	add.w	r3, r7, #28
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a32      	ldr	r2, [pc, #200]	; (8002160 <HAL_UART_MspInit+0xe8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d12c      	bne.n	80020f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	4b31      	ldr	r3, [pc, #196]	; (8002164 <HAL_UART_MspInit+0xec>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	4a30      	ldr	r2, [pc, #192]	; (8002164 <HAL_UART_MspInit+0xec>)
 80020a4:	f043 0310 	orr.w	r3, r3, #16
 80020a8:	6453      	str	r3, [r2, #68]	; 0x44
 80020aa:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <HAL_UART_MspInit+0xec>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_UART_MspInit+0xec>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a29      	ldr	r2, [pc, #164]	; (8002164 <HAL_UART_MspInit+0xec>)
 80020c0:	f043 0302 	orr.w	r3, r3, #2
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_UART_MspInit+0xec>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020d2:	23c0      	movs	r3, #192	; 0xc0
 80020d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020e2:	2307      	movs	r3, #7
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	4619      	mov	r1, r3
 80020ec:	481e      	ldr	r0, [pc, #120]	; (8002168 <HAL_UART_MspInit+0xf0>)
 80020ee:	f001 fb3d 	bl	800376c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020f2:	e031      	b.n	8002158 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1c      	ldr	r2, [pc, #112]	; (800216c <HAL_UART_MspInit+0xf4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d12c      	bne.n	8002158 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_UART_MspInit+0xec>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_UART_MspInit+0xec>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_UART_MspInit+0xec>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_UART_MspInit+0xec>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a10      	ldr	r2, [pc, #64]	; (8002164 <HAL_UART_MspInit+0xec>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_UART_MspInit+0xec>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002136:	f44f 7340 	mov.w	r3, #768	; 0x300
 800213a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002148:	2307      	movs	r3, #7
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214c:	f107 031c 	add.w	r3, r7, #28
 8002150:	4619      	mov	r1, r3
 8002152:	4807      	ldr	r0, [pc, #28]	; (8002170 <HAL_UART_MspInit+0xf8>)
 8002154:	f001 fb0a 	bl	800376c <HAL_GPIO_Init>
}
 8002158:	bf00      	nop
 800215a:	3730      	adds	r7, #48	; 0x30
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40011000 	.word	0x40011000
 8002164:	40023800 	.word	0x40023800
 8002168:	40020400 	.word	0x40020400
 800216c:	40004800 	.word	0x40004800
 8002170:	40020c00 	.word	0x40020c00

08002174 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002194:	d13f      	bne.n	8002216 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	4b21      	ldr	r3, [pc, #132]	; (8002220 <HAL_PCD_MspInit+0xac>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a20      	ldr	r2, [pc, #128]	; (8002220 <HAL_PCD_MspInit+0xac>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <HAL_PCD_MspInit+0xac>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80021b2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80021b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021c4:	230a      	movs	r3, #10
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4619      	mov	r1, r3
 80021ce:	4815      	ldr	r0, [pc, #84]	; (8002224 <HAL_PCD_MspInit+0xb0>)
 80021d0:	f001 facc 	bl	800376c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	4619      	mov	r1, r3
 80021e8:	480e      	ldr	r0, [pc, #56]	; (8002224 <HAL_PCD_MspInit+0xb0>)
 80021ea:	f001 fabf 	bl	800376c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_PCD_MspInit+0xac>)
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <HAL_PCD_MspInit+0xac>)
 80021f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f8:	6353      	str	r3, [r2, #52]	; 0x34
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <HAL_PCD_MspInit+0xac>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a07      	ldr	r2, [pc, #28]	; (8002220 <HAL_PCD_MspInit+0xac>)
 8002204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_PCD_MspInit+0xac>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	; 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800
 8002224:	40020000 	.word	0x40020000

08002228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800222c:	e7fe      	b.n	800222c <NMI_Handler+0x4>

0800222e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <HardFault_Handler+0x4>

08002234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <MemManage_Handler+0x4>

0800223a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <UsageFault_Handler+0x4>

08002246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002274:	f000 f95e 	bl	8002534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002280:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002284:	f001 fc38 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}

0800228c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	return 1;
 8002290:	2301      	movs	r3, #1
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <_kill>:

int _kill(int pid, int sig)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022a6:	f004 f8e3 	bl	8006470 <__errno>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2216      	movs	r2, #22
 80022ae:	601a      	str	r2, [r3, #0]
	return -1;
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <_exit>:

void _exit (int status)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ffe7 	bl	800229c <_kill>
	while (1) {}		/* Make sure we hang here */
 80022ce:	e7fe      	b.n	80022ce <_exit+0x12>

080022d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	e00a      	b.n	80022f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022e2:	f3af 8000 	nop.w
 80022e6:	4601      	mov	r1, r0
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	60ba      	str	r2, [r7, #8]
 80022ee:	b2ca      	uxtb	r2, r1
 80022f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3301      	adds	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	dbf0      	blt.n	80022e2 <_read+0x12>
	}

return len;
 8002300:	687b      	ldr	r3, [r7, #4]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e009      	b.n	8002330 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	60ba      	str	r2, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3301      	adds	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	dbf1      	blt.n	800231c <_write+0x12>
	}
	return len;
 8002338:	687b      	ldr	r3, [r7, #4]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_close>:

int _close(int file)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
	return -1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800236a:	605a      	str	r2, [r3, #4]
	return 0;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <_isatty>:

int _isatty(int file)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
	return 1;
 8002382:	2301      	movs	r3, #1
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
	return 0;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b4:	4a14      	ldr	r2, [pc, #80]	; (8002408 <_sbrk+0x5c>)
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <_sbrk+0x60>)
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <_sbrk+0x64>)
 80023ca:	4a12      	ldr	r2, [pc, #72]	; (8002414 <_sbrk+0x68>)
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <_sbrk+0x64>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d207      	bcs.n	80023ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023dc:	f004 f848 	bl	8006470 <__errno>
 80023e0:	4603      	mov	r3, r0
 80023e2:	220c      	movs	r2, #12
 80023e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	e009      	b.n	8002400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <_sbrk+0x64>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <_sbrk+0x64>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <_sbrk+0x64>)
 80023fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fe:	68fb      	ldr	r3, [r7, #12]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20030000 	.word	0x20030000
 800240c:	00000400 	.word	0x00000400
 8002410:	20000c00 	.word	0x20000c00
 8002414:	20000c18 	.word	0x20000c18

08002418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <SystemInit+0x20>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	4a05      	ldr	r2, [pc, #20]	; (8002438 <SystemInit+0x20>)
 8002424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002474 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002440:	480d      	ldr	r0, [pc, #52]	; (8002478 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002442:	490e      	ldr	r1, [pc, #56]	; (800247c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002444:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002448:	e002      	b.n	8002450 <LoopCopyDataInit>

0800244a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800244c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244e:	3304      	adds	r3, #4

08002450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002454:	d3f9      	bcc.n	800244a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002456:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002458:	4c0b      	ldr	r4, [pc, #44]	; (8002488 <LoopFillZerobss+0x26>)
  movs r3, #0
 800245a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800245c:	e001      	b.n	8002462 <LoopFillZerobss>

0800245e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002460:	3204      	adds	r2, #4

08002462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002464:	d3fb      	bcc.n	800245e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002466:	f7ff ffd7 	bl	8002418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800246a:	f004 f807 	bl	800647c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246e:	f7fe feeb 	bl	8001248 <main>
  bx  lr    
 8002472:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002474:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800247c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002480:	0800b2cc 	.word	0x0800b2cc
  ldr r2, =_sbss
 8002484:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002488:	20000c18 	.word	0x20000c18

0800248c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC_IRQHandler>
	...

08002490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <HAL_Init+0x40>)
 800249a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_Init+0x40>)
 80024a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_Init+0x40>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_Init+0x40>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b8:	2003      	movs	r0, #3
 80024ba:	f000 fd2b 	bl	8002f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024be:	2000      	movs	r0, #0
 80024c0:	f000 f808 	bl	80024d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c4:	f7ff fbc8 	bl	8001c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00

080024d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_InitTick+0x54>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_InitTick+0x58>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fd43 	bl	8002f7e <HAL_SYSTICK_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e00e      	b.n	8002520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b0f      	cmp	r3, #15
 8002506:	d80a      	bhi.n	800251e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002508:	2200      	movs	r2, #0
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f000 fd0b 	bl	8002f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002514:	4a06      	ldr	r2, [pc, #24]	; (8002530 <HAL_InitTick+0x5c>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e000      	b.n	8002520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000014 	.word	0x20000014
 800252c:	2000001c 	.word	0x2000001c
 8002530:	20000018 	.word	0x20000018

08002534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_IncTick+0x20>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_IncTick+0x24>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4413      	add	r3, r2
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <HAL_IncTick+0x24>)
 8002546:	6013      	str	r3, [r2, #0]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	2000001c 	.word	0x2000001c
 8002558:	20000c04 	.word	0x20000c04

0800255c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return uwTick;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_GetTick+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000c04 	.word	0x20000c04

08002574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff ffee 	bl	800255c <HAL_GetTick>
 8002580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d005      	beq.n	800259a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_Delay+0x44>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800259a:	bf00      	nop
 800259c:	f7ff ffde 	bl	800255c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d8f7      	bhi.n	800259c <HAL_Delay+0x28>
  {
  }
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	2000001c 	.word	0x2000001c

080025bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e033      	b.n	800263a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff fb64 	bl	8001ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d118      	bne.n	800262c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002602:	f023 0302 	bic.w	r3, r3, #2
 8002606:	f043 0202 	orr.w	r2, r3, #2
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fab4 	bl	8002b7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f023 0303 	bic.w	r3, r3, #3
 8002622:	f043 0201 	orr.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
 800262a:	e001      	b.n	8002630 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_ADC_Start+0x1a>
 800265a:	2302      	movs	r3, #2
 800265c:	e0b2      	b.n	80027c4 <HAL_ADC_Start+0x180>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d018      	beq.n	80026a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002684:	4b52      	ldr	r3, [pc, #328]	; (80027d0 <HAL_ADC_Start+0x18c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a52      	ldr	r2, [pc, #328]	; (80027d4 <HAL_ADC_Start+0x190>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0c9a      	lsrs	r2, r3, #18
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002698:	e002      	b.n	80026a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	3b01      	subs	r3, #1
 800269e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f9      	bne.n	800269a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d17a      	bne.n	80027aa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f2:	d106      	bne.n	8002702 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	f023 0206 	bic.w	r2, r3, #6
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44
 8002700:	e002      	b.n	8002708 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002710:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <HAL_ADC_Start+0x194>)
 8002712:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800271c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	2b00      	cmp	r3, #0
 8002728:	d12a      	bne.n	8002780 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <HAL_ADC_Start+0x198>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d015      	beq.n	8002760 <HAL_ADC_Start+0x11c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a29      	ldr	r2, [pc, #164]	; (80027e0 <HAL_ADC_Start+0x19c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d105      	bne.n	800274a <HAL_ADC_Start+0x106>
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <HAL_ADC_Start+0x194>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a25      	ldr	r2, [pc, #148]	; (80027e4 <HAL_ADC_Start+0x1a0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d136      	bne.n	80027c2 <HAL_ADC_Start+0x17e>
 8002754:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_ADC_Start+0x194>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d130      	bne.n	80027c2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d129      	bne.n	80027c2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800277c:	609a      	str	r2, [r3, #8]
 800277e:	e020      	b.n	80027c2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a15      	ldr	r2, [pc, #84]	; (80027dc <HAL_ADC_Start+0x198>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d11b      	bne.n	80027c2 <HAL_ADC_Start+0x17e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d114      	bne.n	80027c2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	e00b      	b.n	80027c2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f043 0210 	orr.w	r2, r3, #16
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f043 0201 	orr.w	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	20000014 	.word	0x20000014
 80027d4:	431bde83 	.word	0x431bde83
 80027d8:	40012300 	.word	0x40012300
 80027dc:	40012000 	.word	0x40012000
 80027e0:	40012100 	.word	0x40012100
 80027e4:	40012200 	.word	0x40012200

080027e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002804:	d113      	bne.n	800282e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002814:	d10b      	bne.n	800282e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f043 0220 	orr.w	r2, r3, #32
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e063      	b.n	80028f6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800282e:	f7ff fe95 	bl	800255c <HAL_GetTick>
 8002832:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002834:	e021      	b.n	800287a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d01d      	beq.n	800287a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <HAL_ADC_PollForConversion+0x6c>
 8002844:	f7ff fe8a 	bl	800255c <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d212      	bcs.n	800287a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d00b      	beq.n	800287a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f043 0204 	orr.w	r2, r3, #4
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e03d      	b.n	80028f6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b02      	cmp	r3, #2
 8002886:	d1d6      	bne.n	8002836 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0212 	mvn.w	r2, #18
 8002890:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d123      	bne.n	80028f4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d11f      	bne.n	80028f4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d111      	bne.n	80028f4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x1c>
 8002930:	2302      	movs	r3, #2
 8002932:	e113      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x244>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b09      	cmp	r3, #9
 8002942:	d925      	bls.n	8002990 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68d9      	ldr	r1, [r3, #12]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	3b1e      	subs	r3, #30
 800295a:	2207      	movs	r2, #7
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43da      	mvns	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	400a      	ands	r2, r1
 8002968:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68d9      	ldr	r1, [r3, #12]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	b29b      	uxth	r3, r3
 800297a:	4618      	mov	r0, r3
 800297c:	4603      	mov	r3, r0
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4403      	add	r3, r0
 8002982:	3b1e      	subs	r3, #30
 8002984:	409a      	lsls	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	e022      	b.n	80029d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6919      	ldr	r1, [r3, #16]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	2207      	movs	r2, #7
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	400a      	ands	r2, r1
 80029b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6919      	ldr	r1, [r3, #16]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4618      	mov	r0, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4403      	add	r3, r0
 80029cc:	409a      	lsls	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b06      	cmp	r3, #6
 80029dc:	d824      	bhi.n	8002a28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	3b05      	subs	r3, #5
 80029f0:	221f      	movs	r2, #31
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	400a      	ands	r2, r1
 80029fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	3b05      	subs	r3, #5
 8002a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	635a      	str	r2, [r3, #52]	; 0x34
 8002a26:	e04c      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	d824      	bhi.n	8002a7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b23      	subs	r3, #35	; 0x23
 8002a42:	221f      	movs	r2, #31
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43da      	mvns	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	400a      	ands	r2, r1
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	4618      	mov	r0, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	3b23      	subs	r3, #35	; 0x23
 8002a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
 8002a78:	e023      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	3b41      	subs	r3, #65	; 0x41
 8002a8c:	221f      	movs	r2, #31
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43da      	mvns	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	400a      	ands	r2, r1
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3b41      	subs	r3, #65	; 0x41
 8002ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ac2:	4b29      	ldr	r3, [pc, #164]	; (8002b68 <HAL_ADC_ConfigChannel+0x250>)
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <HAL_ADC_ConfigChannel+0x254>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d10f      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x1d8>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b12      	cmp	r3, #18
 8002ad6:	d10b      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <HAL_ADC_ConfigChannel+0x254>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d12b      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x23a>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <HAL_ADC_ConfigChannel+0x258>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d003      	beq.n	8002b0c <HAL_ADC_ConfigChannel+0x1f4>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b11      	cmp	r3, #17
 8002b0a:	d122      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a11      	ldr	r2, [pc, #68]	; (8002b70 <HAL_ADC_ConfigChannel+0x258>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d111      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_ADC_ConfigChannel+0x25c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a11      	ldr	r2, [pc, #68]	; (8002b78 <HAL_ADC_ConfigChannel+0x260>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	0c9a      	lsrs	r2, r3, #18
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b44:	e002      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f9      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	40012300 	.word	0x40012300
 8002b6c:	40012000 	.word	0x40012000
 8002b70:	10000012 	.word	0x10000012
 8002b74:	20000014 	.word	0x20000014
 8002b78:	431bde83 	.word	0x431bde83

08002b7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b84:	4b79      	ldr	r3, [pc, #484]	; (8002d6c <ADC_Init+0x1f0>)
 8002b86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	021a      	lsls	r2, r3, #8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	4a58      	ldr	r2, [pc, #352]	; (8002d70 <ADC_Init+0x1f4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d022      	beq.n	8002c5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6899      	ldr	r1, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6899      	ldr	r1, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	e00f      	b.n	8002c7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0202 	bic.w	r2, r2, #2
 8002c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7e1b      	ldrb	r3, [r3, #24]
 8002c94:	005a      	lsls	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01b      	beq.n	8002ce0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	035a      	lsls	r2, r3, #13
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	e007      	b.n	8002cf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	051a      	lsls	r2, r3, #20
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6899      	ldr	r1, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d32:	025a      	lsls	r2, r3, #9
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6899      	ldr	r1, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	029a      	lsls	r2, r3, #10
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	40012300 	.word	0x40012300
 8002d70:	0f000001 	.word	0x0f000001

08002d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d90:	4013      	ands	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002da6:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	60d3      	str	r3, [r2, #12]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	f003 0307 	and.w	r3, r3, #7
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	db0b      	blt.n	8002e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	4907      	ldr	r1, [pc, #28]	; (8002e10 <__NVIC_EnableIRQ+0x38>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2001      	movs	r0, #1
 8002dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000e100 	.word	0xe000e100

08002e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	db0a      	blt.n	8002e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	490c      	ldr	r1, [pc, #48]	; (8002e60 <__NVIC_SetPriority+0x4c>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	440b      	add	r3, r1
 8002e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e3c:	e00a      	b.n	8002e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4908      	ldr	r1, [pc, #32]	; (8002e64 <__NVIC_SetPriority+0x50>)
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	3b04      	subs	r3, #4
 8002e4c:	0112      	lsls	r2, r2, #4
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	440b      	add	r3, r1
 8002e52:	761a      	strb	r2, [r3, #24]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000e100 	.word	0xe000e100
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f1c3 0307 	rsb	r3, r3, #7
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	bf28      	it	cs
 8002e86:	2304      	movcs	r3, #4
 8002e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d902      	bls.n	8002e98 <NVIC_EncodePriority+0x30>
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3b03      	subs	r3, #3
 8002e96:	e000      	b.n	8002e9a <NVIC_EncodePriority+0x32>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	401a      	ands	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	43d9      	mvns	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	4313      	orrs	r3, r2
         );
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3724      	adds	r7, #36	; 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee0:	d301      	bcc.n	8002ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00f      	b.n	8002f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <SysTick_Config+0x40>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eee:	210f      	movs	r1, #15
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef4:	f7ff ff8e 	bl	8002e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <SysTick_Config+0x40>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002efe:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <SysTick_Config+0x40>)
 8002f00:	2207      	movs	r2, #7
 8002f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	e000e010 	.word	0xe000e010

08002f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ff29 	bl	8002d74 <__NVIC_SetPriorityGrouping>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	4603      	mov	r3, r0
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f3c:	f7ff ff3e 	bl	8002dbc <__NVIC_GetPriorityGrouping>
 8002f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	6978      	ldr	r0, [r7, #20]
 8002f48:	f7ff ff8e 	bl	8002e68 <NVIC_EncodePriority>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff5d 	bl	8002e14 <__NVIC_SetPriority>
}
 8002f5a:	bf00      	nop
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	4603      	mov	r3, r0
 8002f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff31 	bl	8002dd8 <__NVIC_EnableIRQ>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff ffa2 	bl	8002ed0 <SysTick_Config>
 8002f8c:	4603      	mov	r3, r0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e014      	b.n	8002fd2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	791b      	ldrb	r3, [r3, #4]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7fe feeb 	bl	8001d94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	795b      	ldrb	r3, [r3, #5]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_DAC_Start+0x16>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e040      	b.n	8003072 <HAL_DAC_Start+0x98>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6819      	ldr	r1, [r3, #0]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2201      	movs	r2, #1
 800300a:	409a      	lsls	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003024:	2b3c      	cmp	r3, #60	; 0x3c
 8003026:	d11d      	bne.n	8003064 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	e014      	b.n	8003064 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	213c      	movs	r1, #60	; 0x3c
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	429a      	cmp	r2, r3
 8003052:	d107      	bne.n	8003064 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0202 	orr.w	r2, r2, #2
 8003062:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800307e:	b480      	push	{r7}
 8003080:	b087      	sub	sp, #28
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	795b      	ldrb	r3, [r3, #5]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_DAC_ConfigChannel+0x18>
 8003092:	2302      	movs	r3, #2
 8003094:	e03c      	b.n	8003110 <HAL_DAC_ConfigChannel+0x92>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2202      	movs	r2, #2
 80030a0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4013      	ands	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	22c0      	movs	r2, #192	; 0xc0
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43da      	mvns	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	400a      	ands	r2, r1
 8003100:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e06c      	b.n	8003208 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003134:	2b00      	cmp	r3, #0
 8003136:	d106      	bne.n	8003146 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2223      	movs	r2, #35	; 0x23
 800313c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7fe fe6b 	bl	8001e1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <HAL_ETH_Init+0xf4>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	4a30      	ldr	r2, [pc, #192]	; (8003210 <HAL_ETH_Init+0xf4>)
 8003150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003154:	6453      	str	r3, [r2, #68]	; 0x44
 8003156:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <HAL_ETH_Init+0xf4>)
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003162:	4b2c      	ldr	r3, [pc, #176]	; (8003214 <HAL_ETH_Init+0xf8>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4a2b      	ldr	r2, [pc, #172]	; (8003214 <HAL_ETH_Init+0xf8>)
 8003168:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800316c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800316e:	4b29      	ldr	r3, [pc, #164]	; (8003214 <HAL_ETH_Init+0xf8>)
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	4927      	ldr	r1, [pc, #156]	; (8003214 <HAL_ETH_Init+0xf8>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800317c:	4b25      	ldr	r3, [pc, #148]	; (8003214 <HAL_ETH_Init+0xf8>)
 800317e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003196:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003198:	f7ff f9e0 	bl	800255c <HAL_GetTick>
 800319c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800319e:	e011      	b.n	80031c4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80031a0:	f7ff f9dc 	bl	800255c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031ae:	d909      	bls.n	80031c4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2204      	movs	r2, #4
 80031b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	22e0      	movs	r2, #224	; 0xe0
 80031bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e021      	b.n	8003208 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e4      	bne.n	80031a0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f958 	bl	800348c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f9ff 	bl	80035e0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fa55 	bl	8003692 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	461a      	mov	r2, r3
 80031ee:	2100      	movs	r1, #0
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f9bd 	bl	8003570 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2210      	movs	r2, #16
 8003202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40023800 	.word	0x40023800
 8003214:	40013800 	.word	0x40013800

08003218 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4b51      	ldr	r3, [pc, #324]	; (8003374 <ETH_SetMACConfig+0x15c>)
 800322e:	4013      	ands	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	7c1b      	ldrb	r3, [r3, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <ETH_SetMACConfig+0x28>
 800323a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800323e:	e000      	b.n	8003242 <ETH_SetMACConfig+0x2a>
 8003240:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	7c5b      	ldrb	r3, [r3, #17]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <ETH_SetMACConfig+0x38>
 800324a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800324e:	e000      	b.n	8003252 <ETH_SetMACConfig+0x3a>
 8003250:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003252:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003258:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	7fdb      	ldrb	r3, [r3, #31]
 800325e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003260:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003266:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	7f92      	ldrb	r2, [r2, #30]
 800326c:	2a00      	cmp	r2, #0
 800326e:	d102      	bne.n	8003276 <ETH_SetMACConfig+0x5e>
 8003270:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003274:	e000      	b.n	8003278 <ETH_SetMACConfig+0x60>
 8003276:	2200      	movs	r2, #0
                        macconf->Speed |
 8003278:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	7f1b      	ldrb	r3, [r3, #28]
 800327e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003280:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003286:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	791b      	ldrb	r3, [r3, #4]
 800328c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800328e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003296:	2a00      	cmp	r2, #0
 8003298:	d102      	bne.n	80032a0 <ETH_SetMACConfig+0x88>
 800329a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800329e:	e000      	b.n	80032a2 <ETH_SetMACConfig+0x8a>
 80032a0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80032a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	7bdb      	ldrb	r3, [r3, #15]
 80032a8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80032aa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80032b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032b8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032ba:	4313      	orrs	r3, r2
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032d2:	2001      	movs	r0, #1
 80032d4:	f7ff f94e 	bl	8002574 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	f64f 7341 	movw	r3, #65345	; 0xff41
 80032ee:	4013      	ands	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80032fe:	2a00      	cmp	r2, #0
 8003300:	d101      	bne.n	8003306 <ETH_SetMACConfig+0xee>
 8003302:	2280      	movs	r2, #128	; 0x80
 8003304:	e000      	b.n	8003308 <ETH_SetMACConfig+0xf0>
 8003306:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003308:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800330e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003316:	2a01      	cmp	r2, #1
 8003318:	d101      	bne.n	800331e <ETH_SetMACConfig+0x106>
 800331a:	2208      	movs	r2, #8
 800331c:	e000      	b.n	8003320 <ETH_SetMACConfig+0x108>
 800331e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003320:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003328:	2a01      	cmp	r2, #1
 800332a:	d101      	bne.n	8003330 <ETH_SetMACConfig+0x118>
 800332c:	2204      	movs	r2, #4
 800332e:	e000      	b.n	8003332 <ETH_SetMACConfig+0x11a>
 8003330:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003332:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800333a:	2a01      	cmp	r2, #1
 800333c:	d101      	bne.n	8003342 <ETH_SetMACConfig+0x12a>
 800333e:	2202      	movs	r2, #2
 8003340:	e000      	b.n	8003344 <ETH_SetMACConfig+0x12c>
 8003342:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003344:	4313      	orrs	r3, r2
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800335c:	2001      	movs	r0, #1
 800335e:	f7ff f909 	bl	8002574 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	619a      	str	r2, [r3, #24]
}
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	ff20810f 	.word	0xff20810f

08003378 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4b3d      	ldr	r3, [pc, #244]	; (8003488 <ETH_SetDMAConfig+0x110>)
 8003392:	4013      	ands	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	7b1b      	ldrb	r3, [r3, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d102      	bne.n	80033a4 <ETH_SetDMAConfig+0x2c>
 800339e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80033a2:	e000      	b.n	80033a6 <ETH_SetDMAConfig+0x2e>
 80033a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	7b5b      	ldrb	r3, [r3, #13]
 80033aa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033ac:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	7f52      	ldrb	r2, [r2, #29]
 80033b2:	2a00      	cmp	r2, #0
 80033b4:	d102      	bne.n	80033bc <ETH_SetDMAConfig+0x44>
 80033b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033ba:	e000      	b.n	80033be <ETH_SetDMAConfig+0x46>
 80033bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80033be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	7b9b      	ldrb	r3, [r3, #14]
 80033c4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80033c6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80033cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	7f1b      	ldrb	r3, [r3, #28]
 80033d2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80033d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	7f9b      	ldrb	r3, [r3, #30]
 80033da:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80033dc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80033e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033ea:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033ec:	4313      	orrs	r3, r2
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033fc:	461a      	mov	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800340e:	2001      	movs	r0, #1
 8003410:	f7ff f8b0 	bl	8002574 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800341c:	461a      	mov	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	791b      	ldrb	r3, [r3, #4]
 8003426:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800342c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003432:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003438:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003440:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003442:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800344a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003450:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800345a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800345e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800346c:	2001      	movs	r0, #1
 800346e:	f7ff f881 	bl	8002574 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800347a:	461a      	mov	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6013      	str	r3, [r2, #0]
}
 8003480:	bf00      	nop
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	f8de3f23 	.word	0xf8de3f23

0800348c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b0a6      	sub	sp, #152	; 0x98
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003494:	2301      	movs	r3, #1
 8003496:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80034a0:	2300      	movs	r3, #0
 80034a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80034c8:	2300      	movs	r3, #0
 80034ca:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80034dc:	2300      	movs	r3, #0
 80034de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80034ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034f2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80034f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003500:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff fe86 	bl	8003218 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800350c:	2301      	movs	r3, #1
 800350e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003510:	2301      	movs	r3, #1
 8003512:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003514:	2301      	movs	r3, #1
 8003516:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800351a:	2301      	movs	r3, #1
 800351c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003522:	2300      	movs	r3, #0
 8003524:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003528:	2300      	movs	r3, #0
 800352a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800352e:	2300      	movs	r3, #0
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003538:	2301      	movs	r3, #1
 800353a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800353c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003540:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003542:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003546:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800354c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800354e:	2301      	movs	r3, #1
 8003550:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003554:	2300      	movs	r3, #0
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003558:	2300      	movs	r3, #0
 800355a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800355c:	f107 0308 	add.w	r3, r7, #8
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff ff08 	bl	8003378 <ETH_SetDMAConfig>
}
 8003568:	bf00      	nop
 800356a:	3798      	adds	r7, #152	; 0x98
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3305      	adds	r3, #5
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	3204      	adds	r2, #4
 8003588:	7812      	ldrb	r2, [r2, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <ETH_MACAddressConfig+0x68>)
 8003592:	4413      	add	r3, r2
 8003594:	461a      	mov	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3303      	adds	r3, #3
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	061a      	lsls	r2, r3, #24
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3302      	adds	r3, #2
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	041b      	lsls	r3, r3, #16
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3301      	adds	r3, #1
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	4313      	orrs	r3, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	7812      	ldrb	r2, [r2, #0]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <ETH_MACAddressConfig+0x6c>)
 80035c2:	4413      	add	r3, r2
 80035c4:	461a      	mov	r2, r3
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	6013      	str	r3, [r2, #0]
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40028040 	.word	0x40028040
 80035dc:	40028044 	.word	0x40028044

080035e0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	e03e      	b.n	800366c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68d9      	ldr	r1, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	440b      	add	r3, r1
 80035fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2200      	movs	r2, #0
 800360a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2200      	movs	r2, #0
 8003616:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	3206      	adds	r2, #6
 8003620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d80c      	bhi.n	8003650 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68d9      	ldr	r1, [r3, #12]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	440b      	add	r3, r1
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	60da      	str	r2, [r3, #12]
 800364e:	e004      	b.n	800365a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	461a      	mov	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3301      	adds	r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b03      	cmp	r3, #3
 8003670:	d9bd      	bls.n	80035ee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003684:	611a      	str	r2, [r3, #16]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e046      	b.n	800372e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6919      	ldr	r1, [r3, #16]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	440b      	add	r3, r1
 80036b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2200      	movs	r2, #0
 80036bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2200      	movs	r2, #0
 80036c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2200      	movs	r2, #0
 80036c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2200      	movs	r2, #0
 80036ce:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2200      	movs	r2, #0
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036dc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80036e4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	3212      	adds	r2, #18
 80036fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d80c      	bhi.n	800371e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6919      	ldr	r1, [r3, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	440b      	add	r3, r1
 8003716:	461a      	mov	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	60da      	str	r2, [r3, #12]
 800371c:	e004      	b.n	8003728 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	461a      	mov	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3301      	adds	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d9b5      	bls.n	80036a0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375e:	60da      	str	r2, [r3, #12]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800376c:	b480      	push	{r7}
 800376e:	b089      	sub	sp, #36	; 0x24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800377e:	2300      	movs	r3, #0
 8003780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	e177      	b.n	8003a78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003788:	2201      	movs	r2, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	f040 8166 	bne.w	8003a72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d005      	beq.n	80037be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d130      	bne.n	8003820 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	2203      	movs	r2, #3
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4013      	ands	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037f4:	2201      	movs	r2, #1
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 0201 	and.w	r2, r3, #1
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	2b03      	cmp	r3, #3
 800382a:	d017      	beq.n	800385c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	2203      	movs	r2, #3
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d123      	bne.n	80038b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	08da      	lsrs	r2, r3, #3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3208      	adds	r2, #8
 8003870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	220f      	movs	r2, #15
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	08da      	lsrs	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3208      	adds	r2, #8
 80038aa:	69b9      	ldr	r1, [r7, #24]
 80038ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0203 	and.w	r2, r3, #3
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80c0 	beq.w	8003a72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	4b66      	ldr	r3, [pc, #408]	; (8003a90 <HAL_GPIO_Init+0x324>)
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	4a65      	ldr	r2, [pc, #404]	; (8003a90 <HAL_GPIO_Init+0x324>)
 80038fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003900:	6453      	str	r3, [r2, #68]	; 0x44
 8003902:	4b63      	ldr	r3, [pc, #396]	; (8003a90 <HAL_GPIO_Init+0x324>)
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800390e:	4a61      	ldr	r2, [pc, #388]	; (8003a94 <HAL_GPIO_Init+0x328>)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	089b      	lsrs	r3, r3, #2
 8003914:	3302      	adds	r3, #2
 8003916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	220f      	movs	r2, #15
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a58      	ldr	r2, [pc, #352]	; (8003a98 <HAL_GPIO_Init+0x32c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d037      	beq.n	80039aa <HAL_GPIO_Init+0x23e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a57      	ldr	r2, [pc, #348]	; (8003a9c <HAL_GPIO_Init+0x330>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d031      	beq.n	80039a6 <HAL_GPIO_Init+0x23a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a56      	ldr	r2, [pc, #344]	; (8003aa0 <HAL_GPIO_Init+0x334>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d02b      	beq.n	80039a2 <HAL_GPIO_Init+0x236>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a55      	ldr	r2, [pc, #340]	; (8003aa4 <HAL_GPIO_Init+0x338>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d025      	beq.n	800399e <HAL_GPIO_Init+0x232>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a54      	ldr	r2, [pc, #336]	; (8003aa8 <HAL_GPIO_Init+0x33c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01f      	beq.n	800399a <HAL_GPIO_Init+0x22e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a53      	ldr	r2, [pc, #332]	; (8003aac <HAL_GPIO_Init+0x340>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d019      	beq.n	8003996 <HAL_GPIO_Init+0x22a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a52      	ldr	r2, [pc, #328]	; (8003ab0 <HAL_GPIO_Init+0x344>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <HAL_GPIO_Init+0x226>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a51      	ldr	r2, [pc, #324]	; (8003ab4 <HAL_GPIO_Init+0x348>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00d      	beq.n	800398e <HAL_GPIO_Init+0x222>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a50      	ldr	r2, [pc, #320]	; (8003ab8 <HAL_GPIO_Init+0x34c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d007      	beq.n	800398a <HAL_GPIO_Init+0x21e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a4f      	ldr	r2, [pc, #316]	; (8003abc <HAL_GPIO_Init+0x350>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <HAL_GPIO_Init+0x21a>
 8003982:	2309      	movs	r3, #9
 8003984:	e012      	b.n	80039ac <HAL_GPIO_Init+0x240>
 8003986:	230a      	movs	r3, #10
 8003988:	e010      	b.n	80039ac <HAL_GPIO_Init+0x240>
 800398a:	2308      	movs	r3, #8
 800398c:	e00e      	b.n	80039ac <HAL_GPIO_Init+0x240>
 800398e:	2307      	movs	r3, #7
 8003990:	e00c      	b.n	80039ac <HAL_GPIO_Init+0x240>
 8003992:	2306      	movs	r3, #6
 8003994:	e00a      	b.n	80039ac <HAL_GPIO_Init+0x240>
 8003996:	2305      	movs	r3, #5
 8003998:	e008      	b.n	80039ac <HAL_GPIO_Init+0x240>
 800399a:	2304      	movs	r3, #4
 800399c:	e006      	b.n	80039ac <HAL_GPIO_Init+0x240>
 800399e:	2303      	movs	r3, #3
 80039a0:	e004      	b.n	80039ac <HAL_GPIO_Init+0x240>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e002      	b.n	80039ac <HAL_GPIO_Init+0x240>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <HAL_GPIO_Init+0x240>
 80039aa:	2300      	movs	r3, #0
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	f002 0203 	and.w	r2, r2, #3
 80039b2:	0092      	lsls	r2, r2, #2
 80039b4:	4093      	lsls	r3, r2
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039bc:	4935      	ldr	r1, [pc, #212]	; (8003a94 <HAL_GPIO_Init+0x328>)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	089b      	lsrs	r3, r3, #2
 80039c2:	3302      	adds	r3, #2
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ca:	4b3d      	ldr	r3, [pc, #244]	; (8003ac0 <HAL_GPIO_Init+0x354>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	43db      	mvns	r3, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4013      	ands	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039ee:	4a34      	ldr	r2, [pc, #208]	; (8003ac0 <HAL_GPIO_Init+0x354>)
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039f4:	4b32      	ldr	r3, [pc, #200]	; (8003ac0 <HAL_GPIO_Init+0x354>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a18:	4a29      	ldr	r2, [pc, #164]	; (8003ac0 <HAL_GPIO_Init+0x354>)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a1e:	4b28      	ldr	r3, [pc, #160]	; (8003ac0 <HAL_GPIO_Init+0x354>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a42:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <HAL_GPIO_Init+0x354>)
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <HAL_GPIO_Init+0x354>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	43db      	mvns	r3, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4013      	ands	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a6c:	4a14      	ldr	r2, [pc, #80]	; (8003ac0 <HAL_GPIO_Init+0x354>)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3301      	adds	r3, #1
 8003a76:	61fb      	str	r3, [r7, #28]
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	2b0f      	cmp	r3, #15
 8003a7c:	f67f ae84 	bls.w	8003788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	3724      	adds	r7, #36	; 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40013800 	.word	0x40013800
 8003a98:	40020000 	.word	0x40020000
 8003a9c:	40020400 	.word	0x40020400
 8003aa0:	40020800 	.word	0x40020800
 8003aa4:	40020c00 	.word	0x40020c00
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	40021400 	.word	0x40021400
 8003ab0:	40021800 	.word	0x40021800
 8003ab4:	40021c00 	.word	0x40021c00
 8003ab8:	40022000 	.word	0x40022000
 8003abc:	40022400 	.word	0x40022400
 8003ac0:	40013c00 	.word	0x40013c00

08003ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ad4:	787b      	ldrb	r3, [r7, #1]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ada:	887a      	ldrh	r2, [r7, #2]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ae0:	e003      	b.n	8003aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ae2:	887b      	ldrh	r3, [r7, #2]
 8003ae4:	041a      	lsls	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	619a      	str	r2, [r3, #24]
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d006      	beq.n	8003b1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b0e:	4a05      	ldr	r2, [pc, #20]	; (8003b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe f878 	bl	8001c0c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40013c00 	.word	0x40013c00

08003b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e12b      	b.n	8003d92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fe fa2a 	bl	8001fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2224      	movs	r2, #36	; 0x24
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b8c:	f001 fb4e 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 8003b90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4a81      	ldr	r2, [pc, #516]	; (8003d9c <HAL_I2C_Init+0x274>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d807      	bhi.n	8003bac <HAL_I2C_Init+0x84>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4a80      	ldr	r2, [pc, #512]	; (8003da0 <HAL_I2C_Init+0x278>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	bf94      	ite	ls
 8003ba4:	2301      	movls	r3, #1
 8003ba6:	2300      	movhi	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	e006      	b.n	8003bba <HAL_I2C_Init+0x92>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a7d      	ldr	r2, [pc, #500]	; (8003da4 <HAL_I2C_Init+0x27c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	bf94      	ite	ls
 8003bb4:	2301      	movls	r3, #1
 8003bb6:	2300      	movhi	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e0e7      	b.n	8003d92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a78      	ldr	r2, [pc, #480]	; (8003da8 <HAL_I2C_Init+0x280>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0c9b      	lsrs	r3, r3, #18
 8003bcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4a6a      	ldr	r2, [pc, #424]	; (8003d9c <HAL_I2C_Init+0x274>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d802      	bhi.n	8003bfc <HAL_I2C_Init+0xd4>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	e009      	b.n	8003c10 <HAL_I2C_Init+0xe8>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	4a69      	ldr	r2, [pc, #420]	; (8003dac <HAL_I2C_Init+0x284>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	3301      	adds	r3, #1
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	430b      	orrs	r3, r1
 8003c16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	495c      	ldr	r1, [pc, #368]	; (8003d9c <HAL_I2C_Init+0x274>)
 8003c2c:	428b      	cmp	r3, r1
 8003c2e:	d819      	bhi.n	8003c64 <HAL_I2C_Init+0x13c>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1e59      	subs	r1, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c3e:	1c59      	adds	r1, r3, #1
 8003c40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c44:	400b      	ands	r3, r1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_I2C_Init+0x138>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1e59      	subs	r1, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5e:	e051      	b.n	8003d04 <HAL_I2C_Init+0x1dc>
 8003c60:	2304      	movs	r3, #4
 8003c62:	e04f      	b.n	8003d04 <HAL_I2C_Init+0x1dc>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d111      	bne.n	8003c90 <HAL_I2C_Init+0x168>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1e58      	subs	r0, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	440b      	add	r3, r1
 8003c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e012      	b.n	8003cb6 <HAL_I2C_Init+0x18e>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1e58      	subs	r0, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	0099      	lsls	r1, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_I2C_Init+0x196>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e022      	b.n	8003d04 <HAL_I2C_Init+0x1dc>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_I2C_Init+0x1bc>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1e58      	subs	r0, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6859      	ldr	r1, [r3, #4]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	440b      	add	r3, r1
 8003cd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce2:	e00f      	b.n	8003d04 <HAL_I2C_Init+0x1dc>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1e58      	subs	r0, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6859      	ldr	r1, [r3, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	0099      	lsls	r1, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	6809      	ldr	r1, [r1, #0]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69da      	ldr	r2, [r3, #28]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6911      	ldr	r1, [r2, #16]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68d2      	ldr	r2, [r2, #12]
 8003d3e:	4311      	orrs	r1, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	000186a0 	.word	0x000186a0
 8003da0:	001e847f 	.word	0x001e847f
 8003da4:	003d08ff 	.word	0x003d08ff
 8003da8:	431bde83 	.word	0x431bde83
 8003dac:	10624dd3 	.word	0x10624dd3

08003db0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	817b      	strh	r3, [r7, #10]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dc4:	f7fe fbca 	bl	800255c <HAL_GetTick>
 8003dc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	f040 80e0 	bne.w	8003f98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	2319      	movs	r3, #25
 8003dde:	2201      	movs	r2, #1
 8003de0:	4970      	ldr	r1, [pc, #448]	; (8003fa4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fa92 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
 8003df0:	e0d3      	b.n	8003f9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_I2C_Master_Transmit+0x50>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e0cc      	b.n	8003f9a <HAL_I2C_Master_Transmit+0x1ea>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d007      	beq.n	8003e26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0201 	orr.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2221      	movs	r2, #33	; 0x21
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2210      	movs	r2, #16
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	893a      	ldrh	r2, [r7, #8]
 8003e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a50      	ldr	r2, [pc, #320]	; (8003fa8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e68:	8979      	ldrh	r1, [r7, #10]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	6a3a      	ldr	r2, [r7, #32]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f9ca 	bl	8004208 <I2C_MasterRequestWrite>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e08d      	b.n	8003f9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e94:	e066      	b.n	8003f64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	6a39      	ldr	r1, [r7, #32]
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 fb0c 	bl	80044b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d107      	bne.n	8003ebe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ebc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e06b      	b.n	8003f9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	781a      	ldrb	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d11b      	bne.n	8003f38 <HAL_I2C_Master_Transmit+0x188>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d017      	beq.n	8003f38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	6a39      	ldr	r1, [r7, #32]
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 fafc 	bl	800453a <I2C_WaitOnBTFFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00d      	beq.n	8003f64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d107      	bne.n	8003f60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e01a      	b.n	8003f9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d194      	bne.n	8003e96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	e000      	b.n	8003f9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f98:	2302      	movs	r3, #2
  }
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	00100002 	.word	0x00100002
 8003fa8:	ffff0000 	.word	0xffff0000

08003fac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003fbc:	f7fe face 	bl	800255c <HAL_GetTick>
 8003fc0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	f040 8111 	bne.w	80041f6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	2319      	movs	r3, #25
 8003fda:	2201      	movs	r2, #1
 8003fdc:	4988      	ldr	r1, [pc, #544]	; (8004200 <HAL_I2C_IsDeviceReady+0x254>)
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f994 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003fea:	2302      	movs	r3, #2
 8003fec:	e104      	b.n	80041f8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_I2C_IsDeviceReady+0x50>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e0fd      	b.n	80041f8 <HAL_I2C_IsDeviceReady+0x24c>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b01      	cmp	r3, #1
 8004010:	d007      	beq.n	8004022 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0201 	orr.w	r2, r2, #1
 8004020:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004030:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2224      	movs	r2, #36	; 0x24
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4a70      	ldr	r2, [pc, #448]	; (8004204 <HAL_I2C_IsDeviceReady+0x258>)
 8004044:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004054:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2200      	movs	r2, #0
 800405e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f952 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00d      	beq.n	800408a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407c:	d103      	bne.n	8004086 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e0b6      	b.n	80041f8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800408a:	897b      	ldrh	r3, [r7, #10]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004098:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800409a:	f7fe fa5f 	bl	800255c <HAL_GetTick>
 800409e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	bf0c      	ite	eq
 80040ae:	2301      	moveq	r3, #1
 80040b0:	2300      	movne	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c4:	bf0c      	ite	eq
 80040c6:	2301      	moveq	r3, #1
 80040c8:	2300      	movne	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040ce:	e025      	b.n	800411c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040d0:	f7fe fa44 	bl	800255c <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d302      	bcc.n	80040e6 <HAL_I2C_IsDeviceReady+0x13a>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d103      	bne.n	80040ee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	22a0      	movs	r2, #160	; 0xa0
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	bf0c      	ite	eq
 80040fc:	2301      	moveq	r3, #1
 80040fe:	2300      	movne	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2ba0      	cmp	r3, #160	; 0xa0
 8004126:	d005      	beq.n	8004134 <HAL_I2C_IsDeviceReady+0x188>
 8004128:	7dfb      	ldrb	r3, [r7, #23]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <HAL_I2C_IsDeviceReady+0x188>
 800412e:	7dbb      	ldrb	r3, [r7, #22]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0cd      	beq.n	80040d0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b02      	cmp	r3, #2
 8004148:	d129      	bne.n	800419e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004158:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	2319      	movs	r3, #25
 8004176:	2201      	movs	r2, #1
 8004178:	4921      	ldr	r1, [pc, #132]	; (8004200 <HAL_I2C_IsDeviceReady+0x254>)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f8c6 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e036      	b.n	80041f8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	e02c      	b.n	80041f8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041b6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	2319      	movs	r3, #25
 80041be:	2201      	movs	r2, #1
 80041c0:	490f      	ldr	r1, [pc, #60]	; (8004200 <HAL_I2C_IsDeviceReady+0x254>)
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f8a2 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e012      	b.n	80041f8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	3301      	adds	r3, #1
 80041d6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	429a      	cmp	r2, r3
 80041de:	f4ff af32 	bcc.w	8004046 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	00100002 	.word	0x00100002
 8004204:	ffff0000 	.word	0xffff0000

08004208 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	460b      	mov	r3, r1
 8004216:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d006      	beq.n	8004232 <I2C_MasterRequestWrite+0x2a>
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d003      	beq.n	8004232 <I2C_MasterRequestWrite+0x2a>
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004230:	d108      	bne.n	8004244 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e00b      	b.n	800425c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	2b12      	cmp	r3, #18
 800424a:	d107      	bne.n	800425c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800425a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f84f 	bl	800430c <I2C_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00d      	beq.n	8004290 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004282:	d103      	bne.n	800428c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800428a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e035      	b.n	80042fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004298:	d108      	bne.n	80042ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800429a:	897b      	ldrh	r3, [r7, #10]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042a8:	611a      	str	r2, [r3, #16]
 80042aa:	e01b      	b.n	80042e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042ac:	897b      	ldrh	r3, [r7, #10]
 80042ae:	11db      	asrs	r3, r3, #7
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 0306 	and.w	r3, r3, #6
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f063 030f 	orn	r3, r3, #15
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	490e      	ldr	r1, [pc, #56]	; (8004304 <I2C_MasterRequestWrite+0xfc>)
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f875 	bl	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e010      	b.n	80042fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042da:	897b      	ldrh	r3, [r7, #10]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	4907      	ldr	r1, [pc, #28]	; (8004308 <I2C_MasterRequestWrite+0x100>)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f865 	bl	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	00010008 	.word	0x00010008
 8004308:	00010002 	.word	0x00010002

0800430c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800431c:	e025      	b.n	800436a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d021      	beq.n	800436a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004326:	f7fe f919 	bl	800255c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d302      	bcc.n	800433c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d116      	bne.n	800436a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f043 0220 	orr.w	r2, r3, #32
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e023      	b.n	80043b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	0c1b      	lsrs	r3, r3, #16
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	d10d      	bne.n	8004390 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	43da      	mvns	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4013      	ands	r3, r2
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	e00c      	b.n	80043aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	43da      	mvns	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	bf0c      	ite	eq
 80043a2:	2301      	moveq	r3, #1
 80043a4:	2300      	movne	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d0b6      	beq.n	800431e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043c8:	e051      	b.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d8:	d123      	bne.n	8004422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f043 0204 	orr.w	r2, r3, #4
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e046      	b.n	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d021      	beq.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fe f897 	bl	800255c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d116      	bne.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f043 0220 	orr.w	r2, r3, #32
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e020      	b.n	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10c      	bne.n	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	43da      	mvns	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	bf14      	ite	ne
 800448a:	2301      	movne	r3, #1
 800448c:	2300      	moveq	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	e00b      	b.n	80044aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	43da      	mvns	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf14      	ite	ne
 80044a4:	2301      	movne	r3, #1
 80044a6:	2300      	moveq	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d18d      	bne.n	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c4:	e02d      	b.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f878 	bl	80045bc <I2C_IsAcknowledgeFailed>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e02d      	b.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d021      	beq.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044de:	f7fe f83d 	bl	800255c <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d302      	bcc.n	80044f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d116      	bne.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f043 0220 	orr.w	r2, r3, #32
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e007      	b.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452c:	2b80      	cmp	r3, #128	; 0x80
 800452e:	d1ca      	bne.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004546:	e02d      	b.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f837 	bl	80045bc <I2C_IsAcknowledgeFailed>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e02d      	b.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d021      	beq.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004560:	f7fd fffc 	bl	800255c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	429a      	cmp	r2, r3
 800456e:	d302      	bcc.n	8004576 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d116      	bne.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e007      	b.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d1ca      	bne.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d2:	d11b      	bne.n	800460c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	f043 0204 	orr.w	r2, r3, #4
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b20      	cmp	r3, #32
 800462e:	d129      	bne.n	8004684 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2224      	movs	r2, #36	; 0x24
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0210 	bic.w	r2, r2, #16
 8004656:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d12a      	bne.n	8004702 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2224      	movs	r2, #36	; 0x24
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80046cc:	89fb      	ldrh	r3, [r7, #14]
 80046ce:	f023 030f 	bic.w	r3, r3, #15
 80046d2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	89fb      	ldrh	r3, [r7, #14]
 80046da:	4313      	orrs	r3, r2
 80046dc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	89fa      	ldrh	r2, [r7, #14]
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	e000      	b.n	8004704 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004702:	2302      	movs	r3, #2
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004712:	b08f      	sub	sp, #60	; 0x3c
 8004714:	af0a      	add	r7, sp, #40	; 0x28
 8004716:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e10f      	b.n	8004942 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7fd fd19 	bl	8002174 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2203      	movs	r2, #3
 8004746:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d102      	bne.n	800475c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f001 fbe4 	bl	8005f2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	687e      	ldr	r6, [r7, #4]
 800476e:	466d      	mov	r5, sp
 8004770:	f106 0410 	add.w	r4, r6, #16
 8004774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800477a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800477c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004780:	e885 0003 	stmia.w	r5, {r0, r1}
 8004784:	1d33      	adds	r3, r6, #4
 8004786:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004788:	6838      	ldr	r0, [r7, #0]
 800478a:	f001 fb6f 	bl	8005e6c <USB_CoreInit>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0d0      	b.n	8004942 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2100      	movs	r1, #0
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 fbd2 	bl	8005f50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ac:	2300      	movs	r3, #0
 80047ae:	73fb      	strb	r3, [r7, #15]
 80047b0:	e04a      	b.n	8004848 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047b2:	7bfa      	ldrb	r2, [r7, #15]
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	333d      	adds	r3, #61	; 0x3d
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047c6:	7bfa      	ldrb	r2, [r7, #15]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	333c      	adds	r3, #60	; 0x3c
 80047d6:	7bfa      	ldrb	r2, [r7, #15]
 80047d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047da:	7bfa      	ldrb	r2, [r7, #15]
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	b298      	uxth	r0, r3
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	3344      	adds	r3, #68	; 0x44
 80047ee:	4602      	mov	r2, r0
 80047f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047f2:	7bfa      	ldrb	r2, [r7, #15]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	3340      	adds	r3, #64	; 0x40
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004806:	7bfa      	ldrb	r2, [r7, #15]
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	3348      	adds	r3, #72	; 0x48
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800481a:	7bfa      	ldrb	r2, [r7, #15]
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	334c      	adds	r3, #76	; 0x4c
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800482e:	7bfa      	ldrb	r2, [r7, #15]
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	4413      	add	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	3354      	adds	r3, #84	; 0x54
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	3301      	adds	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
 8004848:	7bfa      	ldrb	r2, [r7, #15]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	429a      	cmp	r2, r3
 8004850:	d3af      	bcc.n	80047b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004852:	2300      	movs	r3, #0
 8004854:	73fb      	strb	r3, [r7, #15]
 8004856:	e044      	b.n	80048e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004858:	7bfa      	ldrb	r2, [r7, #15]
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800486e:	7bfa      	ldrb	r2, [r7, #15]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004880:	7bfa      	ldrb	r2, [r7, #15]
 8004882:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004884:	7bfa      	ldrb	r2, [r7, #15]
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800489a:	7bfa      	ldrb	r2, [r7, #15]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048b0:	7bfa      	ldrb	r2, [r7, #15]
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	4413      	add	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048c6:	7bfa      	ldrb	r2, [r7, #15]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	3301      	adds	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
 80048e2:	7bfa      	ldrb	r2, [r7, #15]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d3b5      	bcc.n	8004858 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	687e      	ldr	r6, [r7, #4]
 80048f4:	466d      	mov	r5, sp
 80048f6:	f106 0410 	add.w	r4, r6, #16
 80048fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004902:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004906:	e885 0003 	stmia.w	r5, {r0, r1}
 800490a:	1d33      	adds	r3, r6, #4
 800490c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800490e:	6838      	ldr	r0, [r7, #0]
 8004910:	f001 fb6a 	bl	8005fe8 <USB_DevInit>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2202      	movs	r2, #2
 800491e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e00d      	b.n	8004942 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f001 fd35 	bl	80063aa <USB_DevDisconnect>

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800494c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e267      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d075      	beq.n	8004a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800496a:	4b88      	ldr	r3, [pc, #544]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	2b04      	cmp	r3, #4
 8004974:	d00c      	beq.n	8004990 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004976:	4b85      	ldr	r3, [pc, #532]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800497e:	2b08      	cmp	r3, #8
 8004980:	d112      	bne.n	80049a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004982:	4b82      	ldr	r3, [pc, #520]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800498e:	d10b      	bne.n	80049a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004990:	4b7e      	ldr	r3, [pc, #504]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d05b      	beq.n	8004a54 <HAL_RCC_OscConfig+0x108>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d157      	bne.n	8004a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e242      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	d106      	bne.n	80049c0 <HAL_RCC_OscConfig+0x74>
 80049b2:	4b76      	ldr	r3, [pc, #472]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a75      	ldr	r2, [pc, #468]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 80049b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e01d      	b.n	80049fc <HAL_RCC_OscConfig+0xb0>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCC_OscConfig+0x98>
 80049ca:	4b70      	ldr	r3, [pc, #448]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a6f      	ldr	r2, [pc, #444]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 80049d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	4b6d      	ldr	r3, [pc, #436]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a6c      	ldr	r2, [pc, #432]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e00b      	b.n	80049fc <HAL_RCC_OscConfig+0xb0>
 80049e4:	4b69      	ldr	r3, [pc, #420]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a68      	ldr	r2, [pc, #416]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 80049ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	4b66      	ldr	r3, [pc, #408]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a65      	ldr	r2, [pc, #404]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 80049f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d013      	beq.n	8004a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a04:	f7fd fdaa 	bl	800255c <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a0c:	f7fd fda6 	bl	800255c <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	; 0x64
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e207      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1e:	4b5b      	ldr	r3, [pc, #364]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0xc0>
 8004a2a:	e014      	b.n	8004a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fd fd96 	bl	800255c <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a34:	f7fd fd92 	bl	800255c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e1f3      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a46:	4b51      	ldr	r3, [pc, #324]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCC_OscConfig+0xe8>
 8004a52:	e000      	b.n	8004a56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d063      	beq.n	8004b2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a62:	4b4a      	ldr	r3, [pc, #296]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00b      	beq.n	8004a86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6e:	4b47      	ldr	r3, [pc, #284]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d11c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a7a:	4b44      	ldr	r3, [pc, #272]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d116      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a86:	4b41      	ldr	r3, [pc, #260]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_RCC_OscConfig+0x152>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e1c7      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9e:	4b3b      	ldr	r3, [pc, #236]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4937      	ldr	r1, [pc, #220]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ab2:	e03a      	b.n	8004b2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d020      	beq.n	8004afe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004abc:	4b34      	ldr	r3, [pc, #208]	; (8004b90 <HAL_RCC_OscConfig+0x244>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac2:	f7fd fd4b 	bl	800255c <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aca:	f7fd fd47 	bl	800255c <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e1a8      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004adc:	4b2b      	ldr	r3, [pc, #172]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae8:	4b28      	ldr	r3, [pc, #160]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4925      	ldr	r1, [pc, #148]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	600b      	str	r3, [r1, #0]
 8004afc:	e015      	b.n	8004b2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004afe:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <HAL_RCC_OscConfig+0x244>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fd fd2a 	bl	800255c <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b0c:	f7fd fd26 	bl	800255c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e187      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b1e:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d036      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d016      	beq.n	8004b6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <HAL_RCC_OscConfig+0x248>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b44:	f7fd fd0a 	bl	800255c <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b4c:	f7fd fd06 	bl	800255c <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e167      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCC_OscConfig+0x240>)
 8004b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x200>
 8004b6a:	e01b      	b.n	8004ba4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b6c:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <HAL_RCC_OscConfig+0x248>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b72:	f7fd fcf3 	bl	800255c <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b78:	e00e      	b.n	8004b98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b7a:	f7fd fcef 	bl	800255c <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d907      	bls.n	8004b98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e150      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	42470000 	.word	0x42470000
 8004b94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b98:	4b88      	ldr	r3, [pc, #544]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1ea      	bne.n	8004b7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8097 	beq.w	8004ce0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bb6:	4b81      	ldr	r3, [pc, #516]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10f      	bne.n	8004be2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	4b7d      	ldr	r3, [pc, #500]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	4a7c      	ldr	r2, [pc, #496]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004bd2:	4b7a      	ldr	r3, [pc, #488]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bde:	2301      	movs	r3, #1
 8004be0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be2:	4b77      	ldr	r3, [pc, #476]	; (8004dc0 <HAL_RCC_OscConfig+0x474>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d118      	bne.n	8004c20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bee:	4b74      	ldr	r3, [pc, #464]	; (8004dc0 <HAL_RCC_OscConfig+0x474>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a73      	ldr	r2, [pc, #460]	; (8004dc0 <HAL_RCC_OscConfig+0x474>)
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfa:	f7fd fcaf 	bl	800255c <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c02:	f7fd fcab 	bl	800255c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e10c      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c14:	4b6a      	ldr	r3, [pc, #424]	; (8004dc0 <HAL_RCC_OscConfig+0x474>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d106      	bne.n	8004c36 <HAL_RCC_OscConfig+0x2ea>
 8004c28:	4b64      	ldr	r3, [pc, #400]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	4a63      	ldr	r2, [pc, #396]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	6713      	str	r3, [r2, #112]	; 0x70
 8004c34:	e01c      	b.n	8004c70 <HAL_RCC_OscConfig+0x324>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b05      	cmp	r3, #5
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCC_OscConfig+0x30c>
 8004c3e:	4b5f      	ldr	r3, [pc, #380]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	4a5e      	ldr	r2, [pc, #376]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004c44:	f043 0304 	orr.w	r3, r3, #4
 8004c48:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4a:	4b5c      	ldr	r3, [pc, #368]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	4a5b      	ldr	r2, [pc, #364]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004c50:	f043 0301 	orr.w	r3, r3, #1
 8004c54:	6713      	str	r3, [r2, #112]	; 0x70
 8004c56:	e00b      	b.n	8004c70 <HAL_RCC_OscConfig+0x324>
 8004c58:	4b58      	ldr	r3, [pc, #352]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5c:	4a57      	ldr	r2, [pc, #348]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	6713      	str	r3, [r2, #112]	; 0x70
 8004c64:	4b55      	ldr	r3, [pc, #340]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c68:	4a54      	ldr	r2, [pc, #336]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004c6a:	f023 0304 	bic.w	r3, r3, #4
 8004c6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d015      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c78:	f7fd fc70 	bl	800255c <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7e:	e00a      	b.n	8004c96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c80:	f7fd fc6c 	bl	800255c <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e0cb      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c96:	4b49      	ldr	r3, [pc, #292]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0ee      	beq.n	8004c80 <HAL_RCC_OscConfig+0x334>
 8004ca2:	e014      	b.n	8004cce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca4:	f7fd fc5a 	bl	800255c <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cac:	f7fd fc56 	bl	800255c <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e0b5      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cc2:	4b3e      	ldr	r3, [pc, #248]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1ee      	bne.n	8004cac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d105      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd4:	4b39      	ldr	r3, [pc, #228]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	4a38      	ldr	r2, [pc, #224]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80a1 	beq.w	8004e2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cea:	4b34      	ldr	r3, [pc, #208]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d05c      	beq.n	8004db0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d141      	bne.n	8004d82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfe:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <HAL_RCC_OscConfig+0x478>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d04:	f7fd fc2a 	bl	800255c <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fd fc26 	bl	800255c <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e087      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1e:	4b27      	ldr	r3, [pc, #156]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69da      	ldr	r2, [r3, #28]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	019b      	lsls	r3, r3, #6
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	085b      	lsrs	r3, r3, #1
 8004d42:	3b01      	subs	r3, #1
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	061b      	lsls	r3, r3, #24
 8004d4e:	491b      	ldr	r1, [pc, #108]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d54:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <HAL_RCC_OscConfig+0x478>)
 8004d56:	2201      	movs	r2, #1
 8004d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5a:	f7fd fbff 	bl	800255c <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d62:	f7fd fbfb 	bl	800255c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e05c      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d74:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCC_OscConfig+0x416>
 8004d80:	e054      	b.n	8004e2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d82:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <HAL_RCC_OscConfig+0x478>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d88:	f7fd fbe8 	bl	800255c <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d90:	f7fd fbe4 	bl	800255c <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e045      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_RCC_OscConfig+0x470>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x444>
 8004dae:	e03d      	b.n	8004e2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e038      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	40007000 	.word	0x40007000
 8004dc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dc8:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <HAL_RCC_OscConfig+0x4ec>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d028      	beq.n	8004e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d121      	bne.n	8004e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d11a      	bne.n	8004e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004df8:	4013      	ands	r3, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d111      	bne.n	8004e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	085b      	lsrs	r3, r3, #1
 8004e10:	3b01      	subs	r3, #1
 8004e12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d107      	bne.n	8004e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40023800 	.word	0x40023800

08004e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e0cc      	b.n	8004fea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e50:	4b68      	ldr	r3, [pc, #416]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d90c      	bls.n	8004e78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5e:	4b65      	ldr	r3, [pc, #404]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e66:	4b63      	ldr	r3, [pc, #396]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d001      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0b8      	b.n	8004fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d020      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e90:	4b59      	ldr	r3, [pc, #356]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	4a58      	ldr	r2, [pc, #352]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ea8:	4b53      	ldr	r3, [pc, #332]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	4a52      	ldr	r2, [pc, #328]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004eb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eb4:	4b50      	ldr	r3, [pc, #320]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	494d      	ldr	r1, [pc, #308]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d044      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d107      	bne.n	8004eea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eda:	4b47      	ldr	r3, [pc, #284]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d119      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e07f      	b.n	8004fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d003      	beq.n	8004efa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d107      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004efa:	4b3f      	ldr	r3, [pc, #252]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e06f      	b.n	8004fea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f0a:	4b3b      	ldr	r3, [pc, #236]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e067      	b.n	8004fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f1a:	4b37      	ldr	r3, [pc, #220]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f023 0203 	bic.w	r2, r3, #3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4934      	ldr	r1, [pc, #208]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f2c:	f7fd fb16 	bl	800255c <HAL_GetTick>
 8004f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f32:	e00a      	b.n	8004f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f34:	f7fd fb12 	bl	800255c <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e04f      	b.n	8004fea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4a:	4b2b      	ldr	r3, [pc, #172]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 020c 	and.w	r2, r3, #12
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d1eb      	bne.n	8004f34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f5c:	4b25      	ldr	r3, [pc, #148]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d20c      	bcs.n	8004f84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6a:	4b22      	ldr	r3, [pc, #136]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f72:	4b20      	ldr	r3, [pc, #128]	; (8004ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e032      	b.n	8004fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f90:	4b19      	ldr	r3, [pc, #100]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4916      	ldr	r1, [pc, #88]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d009      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fae:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	490e      	ldr	r1, [pc, #56]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fc2:	f000 f821 	bl	8005008 <HAL_RCC_GetSysClockFreq>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	091b      	lsrs	r3, r3, #4
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	490a      	ldr	r1, [pc, #40]	; (8004ffc <HAL_RCC_ClockConfig+0x1c0>)
 8004fd4:	5ccb      	ldrb	r3, [r1, r3]
 8004fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fda:	4a09      	ldr	r2, [pc, #36]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fde:	4b09      	ldr	r3, [pc, #36]	; (8005004 <HAL_RCC_ClockConfig+0x1c8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fd fa76 	bl	80024d4 <HAL_InitTick>

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40023c00 	.word	0x40023c00
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	0800ae00 	.word	0x0800ae00
 8005000:	20000014 	.word	0x20000014
 8005004:	20000018 	.word	0x20000018

08005008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800500c:	b094      	sub	sp, #80	; 0x50
 800500e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	647b      	str	r3, [r7, #68]	; 0x44
 8005014:	2300      	movs	r3, #0
 8005016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005018:	2300      	movs	r3, #0
 800501a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005020:	4b79      	ldr	r3, [pc, #484]	; (8005208 <HAL_RCC_GetSysClockFreq+0x200>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 030c 	and.w	r3, r3, #12
 8005028:	2b08      	cmp	r3, #8
 800502a:	d00d      	beq.n	8005048 <HAL_RCC_GetSysClockFreq+0x40>
 800502c:	2b08      	cmp	r3, #8
 800502e:	f200 80e1 	bhi.w	80051f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <HAL_RCC_GetSysClockFreq+0x34>
 8005036:	2b04      	cmp	r3, #4
 8005038:	d003      	beq.n	8005042 <HAL_RCC_GetSysClockFreq+0x3a>
 800503a:	e0db      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800503c:	4b73      	ldr	r3, [pc, #460]	; (800520c <HAL_RCC_GetSysClockFreq+0x204>)
 800503e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005040:	e0db      	b.n	80051fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005042:	4b73      	ldr	r3, [pc, #460]	; (8005210 <HAL_RCC_GetSysClockFreq+0x208>)
 8005044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005046:	e0d8      	b.n	80051fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005048:	4b6f      	ldr	r3, [pc, #444]	; (8005208 <HAL_RCC_GetSysClockFreq+0x200>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005050:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005052:	4b6d      	ldr	r3, [pc, #436]	; (8005208 <HAL_RCC_GetSysClockFreq+0x200>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d063      	beq.n	8005126 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800505e:	4b6a      	ldr	r3, [pc, #424]	; (8005208 <HAL_RCC_GetSysClockFreq+0x200>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	099b      	lsrs	r3, r3, #6
 8005064:	2200      	movs	r2, #0
 8005066:	63bb      	str	r3, [r7, #56]	; 0x38
 8005068:	63fa      	str	r2, [r7, #60]	; 0x3c
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005070:	633b      	str	r3, [r7, #48]	; 0x30
 8005072:	2300      	movs	r3, #0
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
 8005076:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800507a:	4622      	mov	r2, r4
 800507c:	462b      	mov	r3, r5
 800507e:	f04f 0000 	mov.w	r0, #0
 8005082:	f04f 0100 	mov.w	r1, #0
 8005086:	0159      	lsls	r1, r3, #5
 8005088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800508c:	0150      	lsls	r0, r2, #5
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4621      	mov	r1, r4
 8005094:	1a51      	subs	r1, r2, r1
 8005096:	6139      	str	r1, [r7, #16]
 8005098:	4629      	mov	r1, r5
 800509a:	eb63 0301 	sbc.w	r3, r3, r1
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050ac:	4659      	mov	r1, fp
 80050ae:	018b      	lsls	r3, r1, #6
 80050b0:	4651      	mov	r1, sl
 80050b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050b6:	4651      	mov	r1, sl
 80050b8:	018a      	lsls	r2, r1, #6
 80050ba:	4651      	mov	r1, sl
 80050bc:	ebb2 0801 	subs.w	r8, r2, r1
 80050c0:	4659      	mov	r1, fp
 80050c2:	eb63 0901 	sbc.w	r9, r3, r1
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050da:	4690      	mov	r8, r2
 80050dc:	4699      	mov	r9, r3
 80050de:	4623      	mov	r3, r4
 80050e0:	eb18 0303 	adds.w	r3, r8, r3
 80050e4:	60bb      	str	r3, [r7, #8]
 80050e6:	462b      	mov	r3, r5
 80050e8:	eb49 0303 	adc.w	r3, r9, r3
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050fa:	4629      	mov	r1, r5
 80050fc:	024b      	lsls	r3, r1, #9
 80050fe:	4621      	mov	r1, r4
 8005100:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005104:	4621      	mov	r1, r4
 8005106:	024a      	lsls	r2, r1, #9
 8005108:	4610      	mov	r0, r2
 800510a:	4619      	mov	r1, r3
 800510c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510e:	2200      	movs	r2, #0
 8005110:	62bb      	str	r3, [r7, #40]	; 0x28
 8005112:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005114:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005118:	f7fb fdc6 	bl	8000ca8 <__aeabi_uldivmod>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4613      	mov	r3, r2
 8005122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005124:	e058      	b.n	80051d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005126:	4b38      	ldr	r3, [pc, #224]	; (8005208 <HAL_RCC_GetSysClockFreq+0x200>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	099b      	lsrs	r3, r3, #6
 800512c:	2200      	movs	r2, #0
 800512e:	4618      	mov	r0, r3
 8005130:	4611      	mov	r1, r2
 8005132:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005136:	623b      	str	r3, [r7, #32]
 8005138:	2300      	movs	r3, #0
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
 800513c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005140:	4642      	mov	r2, r8
 8005142:	464b      	mov	r3, r9
 8005144:	f04f 0000 	mov.w	r0, #0
 8005148:	f04f 0100 	mov.w	r1, #0
 800514c:	0159      	lsls	r1, r3, #5
 800514e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005152:	0150      	lsls	r0, r2, #5
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4641      	mov	r1, r8
 800515a:	ebb2 0a01 	subs.w	sl, r2, r1
 800515e:	4649      	mov	r1, r9
 8005160:	eb63 0b01 	sbc.w	fp, r3, r1
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005170:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005174:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005178:	ebb2 040a 	subs.w	r4, r2, sl
 800517c:	eb63 050b 	sbc.w	r5, r3, fp
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	00eb      	lsls	r3, r5, #3
 800518a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800518e:	00e2      	lsls	r2, r4, #3
 8005190:	4614      	mov	r4, r2
 8005192:	461d      	mov	r5, r3
 8005194:	4643      	mov	r3, r8
 8005196:	18e3      	adds	r3, r4, r3
 8005198:	603b      	str	r3, [r7, #0]
 800519a:	464b      	mov	r3, r9
 800519c:	eb45 0303 	adc.w	r3, r5, r3
 80051a0:	607b      	str	r3, [r7, #4]
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051ae:	4629      	mov	r1, r5
 80051b0:	028b      	lsls	r3, r1, #10
 80051b2:	4621      	mov	r1, r4
 80051b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051b8:	4621      	mov	r1, r4
 80051ba:	028a      	lsls	r2, r1, #10
 80051bc:	4610      	mov	r0, r2
 80051be:	4619      	mov	r1, r3
 80051c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c2:	2200      	movs	r2, #0
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	61fa      	str	r2, [r7, #28]
 80051c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051cc:	f7fb fd6c 	bl	8000ca8 <__aeabi_uldivmod>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4613      	mov	r3, r2
 80051d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_RCC_GetSysClockFreq+0x200>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	0c1b      	lsrs	r3, r3, #16
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	3301      	adds	r3, #1
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80051e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051f2:	e002      	b.n	80051fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <HAL_RCC_GetSysClockFreq+0x204>)
 80051f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3750      	adds	r7, #80	; 0x50
 8005200:	46bd      	mov	sp, r7
 8005202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005206:	bf00      	nop
 8005208:	40023800 	.word	0x40023800
 800520c:	00f42400 	.word	0x00f42400
 8005210:	007a1200 	.word	0x007a1200

08005214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005218:	4b03      	ldr	r3, [pc, #12]	; (8005228 <HAL_RCC_GetHCLKFreq+0x14>)
 800521a:	681b      	ldr	r3, [r3, #0]
}
 800521c:	4618      	mov	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	20000014 	.word	0x20000014

0800522c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005230:	f7ff fff0 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 8005234:	4602      	mov	r2, r0
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	0a9b      	lsrs	r3, r3, #10
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	4903      	ldr	r1, [pc, #12]	; (8005250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005242:	5ccb      	ldrb	r3, [r1, r3]
 8005244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005248:	4618      	mov	r0, r3
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40023800 	.word	0x40023800
 8005250:	0800ae10 	.word	0x0800ae10

08005254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005258:	f7ff ffdc 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 800525c:	4602      	mov	r2, r0
 800525e:	4b05      	ldr	r3, [pc, #20]	; (8005274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	0b5b      	lsrs	r3, r3, #13
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	4903      	ldr	r1, [pc, #12]	; (8005278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800526a:	5ccb      	ldrb	r3, [r1, r3]
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005270:	4618      	mov	r0, r3
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40023800 	.word	0x40023800
 8005278:	0800ae10 	.word	0x0800ae10

0800527c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e041      	b.n	8005312 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fc fec8 	bl	8002038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f000 f95e 	bl	800557c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d001      	beq.n	8005334 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e046      	b.n	80053c2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a23      	ldr	r2, [pc, #140]	; (80053d0 <HAL_TIM_Base_Start+0xb4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d022      	beq.n	800538c <HAL_TIM_Base_Start+0x70>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534e:	d01d      	beq.n	800538c <HAL_TIM_Base_Start+0x70>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1f      	ldr	r2, [pc, #124]	; (80053d4 <HAL_TIM_Base_Start+0xb8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d018      	beq.n	800538c <HAL_TIM_Base_Start+0x70>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1e      	ldr	r2, [pc, #120]	; (80053d8 <HAL_TIM_Base_Start+0xbc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d013      	beq.n	800538c <HAL_TIM_Base_Start+0x70>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1c      	ldr	r2, [pc, #112]	; (80053dc <HAL_TIM_Base_Start+0xc0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00e      	beq.n	800538c <HAL_TIM_Base_Start+0x70>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1b      	ldr	r2, [pc, #108]	; (80053e0 <HAL_TIM_Base_Start+0xc4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d009      	beq.n	800538c <HAL_TIM_Base_Start+0x70>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <HAL_TIM_Base_Start+0xc8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_TIM_Base_Start+0x70>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <HAL_TIM_Base_Start+0xcc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d111      	bne.n	80053b0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b06      	cmp	r3, #6
 800539c:	d010      	beq.n	80053c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0201 	orr.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ae:	e007      	b.n	80053c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800
 80053dc:	40000c00 	.word	0x40000c00
 80053e0:	40010400 	.word	0x40010400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40001800 	.word	0x40001800

080053ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_TIM_ConfigClockSource+0x1c>
 8005404:	2302      	movs	r3, #2
 8005406:	e0b4      	b.n	8005572 <HAL_TIM_ConfigClockSource+0x186>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800542e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005440:	d03e      	beq.n	80054c0 <HAL_TIM_ConfigClockSource+0xd4>
 8005442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005446:	f200 8087 	bhi.w	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 800544a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544e:	f000 8086 	beq.w	800555e <HAL_TIM_ConfigClockSource+0x172>
 8005452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005456:	d87f      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005458:	2b70      	cmp	r3, #112	; 0x70
 800545a:	d01a      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0xa6>
 800545c:	2b70      	cmp	r3, #112	; 0x70
 800545e:	d87b      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005460:	2b60      	cmp	r3, #96	; 0x60
 8005462:	d050      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x11a>
 8005464:	2b60      	cmp	r3, #96	; 0x60
 8005466:	d877      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005468:	2b50      	cmp	r3, #80	; 0x50
 800546a:	d03c      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0xfa>
 800546c:	2b50      	cmp	r3, #80	; 0x50
 800546e:	d873      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005470:	2b40      	cmp	r3, #64	; 0x40
 8005472:	d058      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x13a>
 8005474:	2b40      	cmp	r3, #64	; 0x40
 8005476:	d86f      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005478:	2b30      	cmp	r3, #48	; 0x30
 800547a:	d064      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x15a>
 800547c:	2b30      	cmp	r3, #48	; 0x30
 800547e:	d86b      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005480:	2b20      	cmp	r3, #32
 8005482:	d060      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x15a>
 8005484:	2b20      	cmp	r3, #32
 8005486:	d867      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d05c      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x15a>
 800548c:	2b10      	cmp	r3, #16
 800548e:	d05a      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x15a>
 8005490:	e062      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6899      	ldr	r1, [r3, #8]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f000 f985 	bl	80057b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	609a      	str	r2, [r3, #8]
      break;
 80054be:	e04f      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	6899      	ldr	r1, [r3, #8]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f000 f96e 	bl	80057b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054e2:	609a      	str	r2, [r3, #8]
      break;
 80054e4:	e03c      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6859      	ldr	r1, [r3, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	461a      	mov	r2, r3
 80054f4:	f000 f8e2 	bl	80056bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2150      	movs	r1, #80	; 0x50
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 f93b 	bl	800577a <TIM_ITRx_SetConfig>
      break;
 8005504:	e02c      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6859      	ldr	r1, [r3, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	461a      	mov	r2, r3
 8005514:	f000 f901 	bl	800571a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2160      	movs	r1, #96	; 0x60
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f92b 	bl	800577a <TIM_ITRx_SetConfig>
      break;
 8005524:	e01c      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6859      	ldr	r1, [r3, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	461a      	mov	r2, r3
 8005534:	f000 f8c2 	bl	80056bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2140      	movs	r1, #64	; 0x40
 800553e:	4618      	mov	r0, r3
 8005540:	f000 f91b 	bl	800577a <TIM_ITRx_SetConfig>
      break;
 8005544:	e00c      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4619      	mov	r1, r3
 8005550:	4610      	mov	r0, r2
 8005552:	f000 f912 	bl	800577a <TIM_ITRx_SetConfig>
      break;
 8005556:	e003      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
      break;
 800555c:	e000      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800555e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a40      	ldr	r2, [pc, #256]	; (8005690 <TIM_Base_SetConfig+0x114>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d013      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559a:	d00f      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a3d      	ldr	r2, [pc, #244]	; (8005694 <TIM_Base_SetConfig+0x118>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00b      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a3c      	ldr	r2, [pc, #240]	; (8005698 <TIM_Base_SetConfig+0x11c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d007      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a3b      	ldr	r2, [pc, #236]	; (800569c <TIM_Base_SetConfig+0x120>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a3a      	ldr	r2, [pc, #232]	; (80056a0 <TIM_Base_SetConfig+0x124>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d108      	bne.n	80055ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2f      	ldr	r2, [pc, #188]	; (8005690 <TIM_Base_SetConfig+0x114>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d02b      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055dc:	d027      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2c      	ldr	r2, [pc, #176]	; (8005694 <TIM_Base_SetConfig+0x118>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d023      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <TIM_Base_SetConfig+0x11c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01f      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2a      	ldr	r2, [pc, #168]	; (800569c <TIM_Base_SetConfig+0x120>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d01b      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a29      	ldr	r2, [pc, #164]	; (80056a0 <TIM_Base_SetConfig+0x124>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d017      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a28      	ldr	r2, [pc, #160]	; (80056a4 <TIM_Base_SetConfig+0x128>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d013      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <TIM_Base_SetConfig+0x12c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00f      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a26      	ldr	r2, [pc, #152]	; (80056ac <TIM_Base_SetConfig+0x130>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00b      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a25      	ldr	r2, [pc, #148]	; (80056b0 <TIM_Base_SetConfig+0x134>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d007      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a24      	ldr	r2, [pc, #144]	; (80056b4 <TIM_Base_SetConfig+0x138>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d003      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a23      	ldr	r2, [pc, #140]	; (80056b8 <TIM_Base_SetConfig+0x13c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d108      	bne.n	8005640 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a0a      	ldr	r2, [pc, #40]	; (8005690 <TIM_Base_SetConfig+0x114>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a0c      	ldr	r2, [pc, #48]	; (80056a0 <TIM_Base_SetConfig+0x124>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d103      	bne.n	800567c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	615a      	str	r2, [r3, #20]
}
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40010000 	.word	0x40010000
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800
 800569c:	40000c00 	.word	0x40000c00
 80056a0:	40010400 	.word	0x40010400
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40014400 	.word	0x40014400
 80056ac:	40014800 	.word	0x40014800
 80056b0:	40001800 	.word	0x40001800
 80056b4:	40001c00 	.word	0x40001c00
 80056b8:	40002000 	.word	0x40002000

080056bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f023 0201 	bic.w	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 030a 	bic.w	r3, r3, #10
 80056f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800571a:	b480      	push	{r7}
 800571c:	b087      	sub	sp, #28
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f023 0210 	bic.w	r2, r3, #16
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	031b      	lsls	r3, r3, #12
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	f043 0307 	orr.w	r3, r3, #7
 800579c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	609a      	str	r2, [r3, #8]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	021a      	lsls	r2, r3, #8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	609a      	str	r2, [r3, #8]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005804:	2302      	movs	r3, #2
 8005806:	e05a      	b.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a21      	ldr	r2, [pc, #132]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d022      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005854:	d01d      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1d      	ldr	r2, [pc, #116]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d018      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1a      	ldr	r2, [pc, #104]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00e      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a18      	ldr	r2, [pc, #96]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d009      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a17      	ldr	r2, [pc, #92]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d004      	beq.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a15      	ldr	r2, [pc, #84]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d10c      	bne.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40010000 	.word	0x40010000
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800
 80058d8:	40000c00 	.word	0x40000c00
 80058dc:	40010400 	.word	0x40010400
 80058e0:	40014000 	.word	0x40014000
 80058e4:	40001800 	.word	0x40001800

080058e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e03f      	b.n	800597a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fc fbb2 	bl	8002078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2224      	movs	r2, #36	; 0x24
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800592a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f829 	bl	8005984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695a      	ldr	r2, [r3, #20]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005988:	b0c0      	sub	sp, #256	; 0x100
 800598a:	af00      	add	r7, sp, #0
 800598c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800599c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a0:	68d9      	ldr	r1, [r3, #12]
 80059a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	ea40 0301 	orr.w	r3, r0, r1
 80059ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	431a      	orrs	r2, r3
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059dc:	f021 010c 	bic.w	r1, r1, #12
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059ea:	430b      	orrs	r3, r1
 80059ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fe:	6999      	ldr	r1, [r3, #24]
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	ea40 0301 	orr.w	r3, r0, r1
 8005a0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4b8f      	ldr	r3, [pc, #572]	; (8005c50 <UART_SetConfig+0x2cc>)
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d005      	beq.n	8005a24 <UART_SetConfig+0xa0>
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b8d      	ldr	r3, [pc, #564]	; (8005c54 <UART_SetConfig+0x2d0>)
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d104      	bne.n	8005a2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a24:	f7ff fc16 	bl	8005254 <HAL_RCC_GetPCLK2Freq>
 8005a28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a2c:	e003      	b.n	8005a36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a2e:	f7ff fbfd 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 8005a32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a40:	f040 810c 	bne.w	8005c5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a56:	4622      	mov	r2, r4
 8005a58:	462b      	mov	r3, r5
 8005a5a:	1891      	adds	r1, r2, r2
 8005a5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a5e:	415b      	adcs	r3, r3
 8005a60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a66:	4621      	mov	r1, r4
 8005a68:	eb12 0801 	adds.w	r8, r2, r1
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	eb43 0901 	adc.w	r9, r3, r1
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a86:	4690      	mov	r8, r2
 8005a88:	4699      	mov	r9, r3
 8005a8a:	4623      	mov	r3, r4
 8005a8c:	eb18 0303 	adds.w	r3, r8, r3
 8005a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a94:	462b      	mov	r3, r5
 8005a96:	eb49 0303 	adc.w	r3, r9, r3
 8005a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005aaa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005aae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	18db      	adds	r3, r3, r3
 8005ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ab8:	4613      	mov	r3, r2
 8005aba:	eb42 0303 	adc.w	r3, r2, r3
 8005abe:	657b      	str	r3, [r7, #84]	; 0x54
 8005ac0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ac4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ac8:	f7fb f8ee 	bl	8000ca8 <__aeabi_uldivmod>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4b61      	ldr	r3, [pc, #388]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	011c      	lsls	r4, r3, #4
 8005ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ae4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ae8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005aec:	4642      	mov	r2, r8
 8005aee:	464b      	mov	r3, r9
 8005af0:	1891      	adds	r1, r2, r2
 8005af2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005af4:	415b      	adcs	r3, r3
 8005af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005afc:	4641      	mov	r1, r8
 8005afe:	eb12 0a01 	adds.w	sl, r2, r1
 8005b02:	4649      	mov	r1, r9
 8005b04:	eb43 0b01 	adc.w	fp, r3, r1
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b1c:	4692      	mov	sl, r2
 8005b1e:	469b      	mov	fp, r3
 8005b20:	4643      	mov	r3, r8
 8005b22:	eb1a 0303 	adds.w	r3, sl, r3
 8005b26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	18db      	adds	r3, r3, r3
 8005b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b4e:	4613      	mov	r3, r2
 8005b50:	eb42 0303 	adc.w	r3, r2, r3
 8005b54:	647b      	str	r3, [r7, #68]	; 0x44
 8005b56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b5e:	f7fb f8a3 	bl	8000ca8 <__aeabi_uldivmod>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4611      	mov	r1, r2
 8005b68:	4b3b      	ldr	r3, [pc, #236]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b6e:	095b      	lsrs	r3, r3, #5
 8005b70:	2264      	movs	r2, #100	; 0x64
 8005b72:	fb02 f303 	mul.w	r3, r2, r3
 8005b76:	1acb      	subs	r3, r1, r3
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b7e:	4b36      	ldr	r3, [pc, #216]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005b80:	fba3 2302 	umull	r2, r3, r3, r2
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b8c:	441c      	add	r4, r3
 8005b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	1891      	adds	r1, r2, r2
 8005ba6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ba8:	415b      	adcs	r3, r3
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bb0:	4641      	mov	r1, r8
 8005bb2:	1851      	adds	r1, r2, r1
 8005bb4:	6339      	str	r1, [r7, #48]	; 0x30
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	414b      	adcs	r3, r1
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005bc8:	4659      	mov	r1, fp
 8005bca:	00cb      	lsls	r3, r1, #3
 8005bcc:	4651      	mov	r1, sl
 8005bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bd2:	4651      	mov	r1, sl
 8005bd4:	00ca      	lsls	r2, r1, #3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4603      	mov	r3, r0
 8005bdc:	4642      	mov	r2, r8
 8005bde:	189b      	adds	r3, r3, r2
 8005be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005be4:	464b      	mov	r3, r9
 8005be6:	460a      	mov	r2, r1
 8005be8:	eb42 0303 	adc.w	r3, r2, r3
 8005bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c04:	460b      	mov	r3, r1
 8005c06:	18db      	adds	r3, r3, r3
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	eb42 0303 	adc.w	r3, r2, r3
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c1a:	f7fb f845 	bl	8000ca8 <__aeabi_uldivmod>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005c24:	fba3 1302 	umull	r1, r3, r3, r2
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	2164      	movs	r1, #100	; 0x64
 8005c2c:	fb01 f303 	mul.w	r3, r1, r3
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	3332      	adds	r3, #50	; 0x32
 8005c36:	4a08      	ldr	r2, [pc, #32]	; (8005c58 <UART_SetConfig+0x2d4>)
 8005c38:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	f003 0207 	and.w	r2, r3, #7
 8005c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4422      	add	r2, r4
 8005c4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c4c:	e105      	b.n	8005e5a <UART_SetConfig+0x4d6>
 8005c4e:	bf00      	nop
 8005c50:	40011000 	.word	0x40011000
 8005c54:	40011400 	.word	0x40011400
 8005c58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c6e:	4642      	mov	r2, r8
 8005c70:	464b      	mov	r3, r9
 8005c72:	1891      	adds	r1, r2, r2
 8005c74:	6239      	str	r1, [r7, #32]
 8005c76:	415b      	adcs	r3, r3
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c7e:	4641      	mov	r1, r8
 8005c80:	1854      	adds	r4, r2, r1
 8005c82:	4649      	mov	r1, r9
 8005c84:	eb43 0501 	adc.w	r5, r3, r1
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	00eb      	lsls	r3, r5, #3
 8005c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c96:	00e2      	lsls	r2, r4, #3
 8005c98:	4614      	mov	r4, r2
 8005c9a:	461d      	mov	r5, r3
 8005c9c:	4643      	mov	r3, r8
 8005c9e:	18e3      	adds	r3, r4, r3
 8005ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ca4:	464b      	mov	r3, r9
 8005ca6:	eb45 0303 	adc.w	r3, r5, r3
 8005caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cca:	4629      	mov	r1, r5
 8005ccc:	008b      	lsls	r3, r1, #2
 8005cce:	4621      	mov	r1, r4
 8005cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	008a      	lsls	r2, r1, #2
 8005cd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005cdc:	f7fa ffe4 	bl	8000ca8 <__aeabi_uldivmod>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4b60      	ldr	r3, [pc, #384]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	011c      	lsls	r4, r3, #4
 8005cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005cfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d00:	4642      	mov	r2, r8
 8005d02:	464b      	mov	r3, r9
 8005d04:	1891      	adds	r1, r2, r2
 8005d06:	61b9      	str	r1, [r7, #24]
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d10:	4641      	mov	r1, r8
 8005d12:	1851      	adds	r1, r2, r1
 8005d14:	6139      	str	r1, [r7, #16]
 8005d16:	4649      	mov	r1, r9
 8005d18:	414b      	adcs	r3, r1
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d28:	4659      	mov	r1, fp
 8005d2a:	00cb      	lsls	r3, r1, #3
 8005d2c:	4651      	mov	r1, sl
 8005d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d32:	4651      	mov	r1, sl
 8005d34:	00ca      	lsls	r2, r1, #3
 8005d36:	4610      	mov	r0, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	189b      	adds	r3, r3, r2
 8005d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d44:	464b      	mov	r3, r9
 8005d46:	460a      	mov	r2, r1
 8005d48:	eb42 0303 	adc.w	r3, r2, r3
 8005d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d68:	4649      	mov	r1, r9
 8005d6a:	008b      	lsls	r3, r1, #2
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d72:	4641      	mov	r1, r8
 8005d74:	008a      	lsls	r2, r1, #2
 8005d76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d7a:	f7fa ff95 	bl	8000ca8 <__aeabi_uldivmod>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4b39      	ldr	r3, [pc, #228]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005d84:	fba3 1302 	umull	r1, r3, r3, r2
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	2164      	movs	r1, #100	; 0x64
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	3332      	adds	r3, #50	; 0x32
 8005d96:	4a34      	ldr	r2, [pc, #208]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da2:	441c      	add	r4, r3
 8005da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005da8:	2200      	movs	r2, #0
 8005daa:	673b      	str	r3, [r7, #112]	; 0x70
 8005dac:	677a      	str	r2, [r7, #116]	; 0x74
 8005dae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005db2:	4642      	mov	r2, r8
 8005db4:	464b      	mov	r3, r9
 8005db6:	1891      	adds	r1, r2, r2
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	415b      	adcs	r3, r3
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	1851      	adds	r1, r2, r1
 8005dc6:	6039      	str	r1, [r7, #0]
 8005dc8:	4649      	mov	r1, r9
 8005dca:	414b      	adcs	r3, r1
 8005dcc:	607b      	str	r3, [r7, #4]
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dda:	4659      	mov	r1, fp
 8005ddc:	00cb      	lsls	r3, r1, #3
 8005dde:	4651      	mov	r1, sl
 8005de0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005de4:	4651      	mov	r1, sl
 8005de6:	00ca      	lsls	r2, r1, #3
 8005de8:	4610      	mov	r0, r2
 8005dea:	4619      	mov	r1, r3
 8005dec:	4603      	mov	r3, r0
 8005dee:	4642      	mov	r2, r8
 8005df0:	189b      	adds	r3, r3, r2
 8005df2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005df4:	464b      	mov	r3, r9
 8005df6:	460a      	mov	r2, r1
 8005df8:	eb42 0303 	adc.w	r3, r2, r3
 8005dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	663b      	str	r3, [r7, #96]	; 0x60
 8005e08:	667a      	str	r2, [r7, #100]	; 0x64
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e16:	4649      	mov	r1, r9
 8005e18:	008b      	lsls	r3, r1, #2
 8005e1a:	4641      	mov	r1, r8
 8005e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e20:	4641      	mov	r1, r8
 8005e22:	008a      	lsls	r2, r1, #2
 8005e24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e28:	f7fa ff3e 	bl	8000ca8 <__aeabi_uldivmod>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4b0d      	ldr	r3, [pc, #52]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005e32:	fba3 1302 	umull	r1, r3, r3, r2
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	2164      	movs	r1, #100	; 0x64
 8005e3a:	fb01 f303 	mul.w	r3, r1, r3
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	3332      	adds	r3, #50	; 0x32
 8005e44:	4a08      	ldr	r2, [pc, #32]	; (8005e68 <UART_SetConfig+0x4e4>)
 8005e46:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	f003 020f 	and.w	r2, r3, #15
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4422      	add	r2, r4
 8005e58:	609a      	str	r2, [r3, #8]
}
 8005e5a:	bf00      	nop
 8005e5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e60:	46bd      	mov	sp, r7
 8005e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e66:	bf00      	nop
 8005e68:	51eb851f 	.word	0x51eb851f

08005e6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	f107 001c 	add.w	r0, r7, #28
 8005e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d122      	bne.n	8005eca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d105      	bne.n	8005ebe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 faa2 	bl	8006408 <USB_CoreReset>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73fb      	strb	r3, [r7, #15]
 8005ec8:	e01a      	b.n	8005f00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fa96 	bl	8006408 <USB_CoreReset>
 8005edc:	4603      	mov	r3, r0
 8005ede:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ef2:	e005      	b.n	8005f00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d10b      	bne.n	8005f1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f043 0206 	orr.w	r2, r3, #6
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f043 0220 	orr.w	r2, r3, #32
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f2a:	b004      	add	sp, #16
 8005f2c:	4770      	bx	lr

08005f2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f023 0201 	bic.w	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d115      	bne.n	8005f9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f7e:	2001      	movs	r0, #1
 8005f80:	f7fc faf8 	bl	8002574 <HAL_Delay>
      ms++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3301      	adds	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa2e 	bl	80063ec <USB_GetMode>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d01e      	beq.n	8005fd4 <USB_SetCurrentMode+0x84>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b31      	cmp	r3, #49	; 0x31
 8005f9a:	d9f0      	bls.n	8005f7e <USB_SetCurrentMode+0x2e>
 8005f9c:	e01a      	b.n	8005fd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f9e:	78fb      	ldrb	r3, [r7, #3]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d115      	bne.n	8005fd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	f7fc fadf 	bl	8002574 <HAL_Delay>
      ms++;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fa15 	bl	80063ec <USB_GetMode>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <USB_SetCurrentMode+0x84>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b31      	cmp	r3, #49	; 0x31
 8005fcc:	d9f0      	bls.n	8005fb0 <USB_SetCurrentMode+0x60>
 8005fce:	e001      	b.n	8005fd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e005      	b.n	8005fe0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b32      	cmp	r3, #50	; 0x32
 8005fd8:	d101      	bne.n	8005fde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fe8:	b084      	sub	sp, #16
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b086      	sub	sp, #24
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006002:	2300      	movs	r3, #0
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	e009      	b.n	800601c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	3340      	adds	r3, #64	; 0x40
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	2200      	movs	r2, #0
 8006014:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	3301      	adds	r3, #1
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b0e      	cmp	r3, #14
 8006020:	d9f2      	bls.n	8006008 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d11c      	bne.n	8006062 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006036:	f043 0302 	orr.w	r3, r3, #2
 800603a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
 8006060:	e00b      	b.n	800607a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006080:	461a      	mov	r2, r3
 8006082:	2300      	movs	r3, #0
 8006084:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608c:	4619      	mov	r1, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006094:	461a      	mov	r2, r3
 8006096:	680b      	ldr	r3, [r1, #0]
 8006098:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2b01      	cmp	r3, #1
 800609e:	d10c      	bne.n	80060ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d104      	bne.n	80060b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060a6:	2100      	movs	r1, #0
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f965 	bl	8006378 <USB_SetDevSpeed>
 80060ae:	e008      	b.n	80060c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060b0:	2101      	movs	r1, #1
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f960 	bl	8006378 <USB_SetDevSpeed>
 80060b8:	e003      	b.n	80060c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060ba:	2103      	movs	r1, #3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f95b 	bl	8006378 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060c2:	2110      	movs	r1, #16
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f8f3 	bl	80062b0 <USB_FlushTxFifo>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f91f 	bl	8006318 <USB_FlushRxFifo>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ea:	461a      	mov	r2, r3
 80060ec:	2300      	movs	r3, #0
 80060ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f6:	461a      	mov	r2, r3
 80060f8:	2300      	movs	r3, #0
 80060fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006102:	461a      	mov	r2, r3
 8006104:	2300      	movs	r3, #0
 8006106:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	e043      	b.n	8006196 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006124:	d118      	bne.n	8006158 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	461a      	mov	r2, r3
 800613a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	e013      	b.n	800616a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614e:	461a      	mov	r2, r3
 8006150:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	e008      	b.n	800616a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	461a      	mov	r2, r3
 8006166:	2300      	movs	r3, #0
 8006168:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006176:	461a      	mov	r2, r3
 8006178:	2300      	movs	r3, #0
 800617a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006188:	461a      	mov	r2, r3
 800618a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800618e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	3301      	adds	r3, #1
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	429a      	cmp	r2, r3
 800619c:	d3b7      	bcc.n	800610e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800619e:	2300      	movs	r3, #0
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	e043      	b.n	800622c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ba:	d118      	bne.n	80061ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	461a      	mov	r2, r3
 80061d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e013      	b.n	8006200 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e4:	461a      	mov	r2, r3
 80061e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	e008      	b.n	8006200 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fa:	461a      	mov	r2, r3
 80061fc:	2300      	movs	r3, #0
 80061fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	461a      	mov	r2, r3
 800620e:	2300      	movs	r3, #0
 8006210:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621e:	461a      	mov	r2, r3
 8006220:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006224:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	3301      	adds	r3, #1
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	429a      	cmp	r2, r3
 8006232:	d3b7      	bcc.n	80061a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006246:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006254:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	2b00      	cmp	r3, #0
 800625a:	d105      	bne.n	8006268 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	f043 0210 	orr.w	r2, r3, #16
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699a      	ldr	r2, [r3, #24]
 800626c:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <USB_DevInit+0x2c4>)
 800626e:	4313      	orrs	r3, r2
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f043 0208 	orr.w	r2, r3, #8
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d107      	bne.n	800629c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006294:	f043 0304 	orr.w	r3, r3, #4
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800629c:	7dfb      	ldrb	r3, [r7, #23]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062a8:	b004      	add	sp, #16
 80062aa:	4770      	bx	lr
 80062ac:	803c3800 	.word	0x803c3800

080062b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3301      	adds	r3, #1
 80062c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4a13      	ldr	r2, [pc, #76]	; (8006314 <USB_FlushTxFifo+0x64>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d901      	bls.n	80062d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e01b      	b.n	8006308 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	daf2      	bge.n	80062be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	019b      	lsls	r3, r3, #6
 80062e0:	f043 0220 	orr.w	r2, r3, #32
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	3301      	adds	r3, #1
 80062ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4a08      	ldr	r2, [pc, #32]	; (8006314 <USB_FlushTxFifo+0x64>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d901      	bls.n	80062fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e006      	b.n	8006308 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b20      	cmp	r3, #32
 8006304:	d0f0      	beq.n	80062e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	00030d40 	.word	0x00030d40

08006318 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4a11      	ldr	r2, [pc, #68]	; (8006374 <USB_FlushRxFifo+0x5c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d901      	bls.n	8006336 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e018      	b.n	8006368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	daf2      	bge.n	8006324 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2210      	movs	r2, #16
 8006346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3301      	adds	r3, #1
 800634c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4a08      	ldr	r2, [pc, #32]	; (8006374 <USB_FlushRxFifo+0x5c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d901      	bls.n	800635a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e006      	b.n	8006368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b10      	cmp	r3, #16
 8006364:	d0f0      	beq.n	8006348 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	00030d40 	.word	0x00030d40

08006378 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	68f9      	ldr	r1, [r7, #12]
 8006394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006398:	4313      	orrs	r3, r2
 800639a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063c4:	f023 0303 	bic.w	r3, r3, #3
 80063c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d8:	f043 0302 	orr.w	r3, r3, #2
 80063dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	f003 0301 	and.w	r3, r3, #1
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4a13      	ldr	r2, [pc, #76]	; (800646c <USB_CoreReset+0x64>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e01b      	b.n	800645e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	daf2      	bge.n	8006414 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f043 0201 	orr.w	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3301      	adds	r3, #1
 8006442:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4a09      	ldr	r2, [pc, #36]	; (800646c <USB_CoreReset+0x64>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d901      	bls.n	8006450 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e006      	b.n	800645e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b01      	cmp	r3, #1
 800645a:	d0f0      	beq.n	800643e <USB_CoreReset+0x36>

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	00030d40 	.word	0x00030d40

08006470 <__errno>:
 8006470:	4b01      	ldr	r3, [pc, #4]	; (8006478 <__errno+0x8>)
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	20000020 	.word	0x20000020

0800647c <__libc_init_array>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	4d0d      	ldr	r5, [pc, #52]	; (80064b4 <__libc_init_array+0x38>)
 8006480:	4c0d      	ldr	r4, [pc, #52]	; (80064b8 <__libc_init_array+0x3c>)
 8006482:	1b64      	subs	r4, r4, r5
 8006484:	10a4      	asrs	r4, r4, #2
 8006486:	2600      	movs	r6, #0
 8006488:	42a6      	cmp	r6, r4
 800648a:	d109      	bne.n	80064a0 <__libc_init_array+0x24>
 800648c:	4d0b      	ldr	r5, [pc, #44]	; (80064bc <__libc_init_array+0x40>)
 800648e:	4c0c      	ldr	r4, [pc, #48]	; (80064c0 <__libc_init_array+0x44>)
 8006490:	f004 fc92 	bl	800adb8 <_init>
 8006494:	1b64      	subs	r4, r4, r5
 8006496:	10a4      	asrs	r4, r4, #2
 8006498:	2600      	movs	r6, #0
 800649a:	42a6      	cmp	r6, r4
 800649c:	d105      	bne.n	80064aa <__libc_init_array+0x2e>
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a4:	4798      	blx	r3
 80064a6:	3601      	adds	r6, #1
 80064a8:	e7ee      	b.n	8006488 <__libc_init_array+0xc>
 80064aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ae:	4798      	blx	r3
 80064b0:	3601      	adds	r6, #1
 80064b2:	e7f2      	b.n	800649a <__libc_init_array+0x1e>
 80064b4:	0800b2c4 	.word	0x0800b2c4
 80064b8:	0800b2c4 	.word	0x0800b2c4
 80064bc:	0800b2c4 	.word	0x0800b2c4
 80064c0:	0800b2c8 	.word	0x0800b2c8

080064c4 <memset>:
 80064c4:	4402      	add	r2, r0
 80064c6:	4603      	mov	r3, r0
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d100      	bne.n	80064ce <memset+0xa>
 80064cc:	4770      	bx	lr
 80064ce:	f803 1b01 	strb.w	r1, [r3], #1
 80064d2:	e7f9      	b.n	80064c8 <memset+0x4>

080064d4 <__cvt>:
 80064d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d8:	ec55 4b10 	vmov	r4, r5, d0
 80064dc:	2d00      	cmp	r5, #0
 80064de:	460e      	mov	r6, r1
 80064e0:	4619      	mov	r1, r3
 80064e2:	462b      	mov	r3, r5
 80064e4:	bfbb      	ittet	lt
 80064e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064ea:	461d      	movlt	r5, r3
 80064ec:	2300      	movge	r3, #0
 80064ee:	232d      	movlt	r3, #45	; 0x2d
 80064f0:	700b      	strb	r3, [r1, #0]
 80064f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064f8:	4691      	mov	r9, r2
 80064fa:	f023 0820 	bic.w	r8, r3, #32
 80064fe:	bfbc      	itt	lt
 8006500:	4622      	movlt	r2, r4
 8006502:	4614      	movlt	r4, r2
 8006504:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006508:	d005      	beq.n	8006516 <__cvt+0x42>
 800650a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800650e:	d100      	bne.n	8006512 <__cvt+0x3e>
 8006510:	3601      	adds	r6, #1
 8006512:	2102      	movs	r1, #2
 8006514:	e000      	b.n	8006518 <__cvt+0x44>
 8006516:	2103      	movs	r1, #3
 8006518:	ab03      	add	r3, sp, #12
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	ab02      	add	r3, sp, #8
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	ec45 4b10 	vmov	d0, r4, r5
 8006524:	4653      	mov	r3, sl
 8006526:	4632      	mov	r2, r6
 8006528:	f001 fdae 	bl	8008088 <_dtoa_r>
 800652c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006530:	4607      	mov	r7, r0
 8006532:	d102      	bne.n	800653a <__cvt+0x66>
 8006534:	f019 0f01 	tst.w	r9, #1
 8006538:	d022      	beq.n	8006580 <__cvt+0xac>
 800653a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800653e:	eb07 0906 	add.w	r9, r7, r6
 8006542:	d110      	bne.n	8006566 <__cvt+0x92>
 8006544:	783b      	ldrb	r3, [r7, #0]
 8006546:	2b30      	cmp	r3, #48	; 0x30
 8006548:	d10a      	bne.n	8006560 <__cvt+0x8c>
 800654a:	2200      	movs	r2, #0
 800654c:	2300      	movs	r3, #0
 800654e:	4620      	mov	r0, r4
 8006550:	4629      	mov	r1, r5
 8006552:	f7fa fac9 	bl	8000ae8 <__aeabi_dcmpeq>
 8006556:	b918      	cbnz	r0, 8006560 <__cvt+0x8c>
 8006558:	f1c6 0601 	rsb	r6, r6, #1
 800655c:	f8ca 6000 	str.w	r6, [sl]
 8006560:	f8da 3000 	ldr.w	r3, [sl]
 8006564:	4499      	add	r9, r3
 8006566:	2200      	movs	r2, #0
 8006568:	2300      	movs	r3, #0
 800656a:	4620      	mov	r0, r4
 800656c:	4629      	mov	r1, r5
 800656e:	f7fa fabb 	bl	8000ae8 <__aeabi_dcmpeq>
 8006572:	b108      	cbz	r0, 8006578 <__cvt+0xa4>
 8006574:	f8cd 900c 	str.w	r9, [sp, #12]
 8006578:	2230      	movs	r2, #48	; 0x30
 800657a:	9b03      	ldr	r3, [sp, #12]
 800657c:	454b      	cmp	r3, r9
 800657e:	d307      	bcc.n	8006590 <__cvt+0xbc>
 8006580:	9b03      	ldr	r3, [sp, #12]
 8006582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006584:	1bdb      	subs	r3, r3, r7
 8006586:	4638      	mov	r0, r7
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	b004      	add	sp, #16
 800658c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006590:	1c59      	adds	r1, r3, #1
 8006592:	9103      	str	r1, [sp, #12]
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	e7f0      	b.n	800657a <__cvt+0xa6>

08006598 <__exponent>:
 8006598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800659a:	4603      	mov	r3, r0
 800659c:	2900      	cmp	r1, #0
 800659e:	bfb8      	it	lt
 80065a0:	4249      	neglt	r1, r1
 80065a2:	f803 2b02 	strb.w	r2, [r3], #2
 80065a6:	bfb4      	ite	lt
 80065a8:	222d      	movlt	r2, #45	; 0x2d
 80065aa:	222b      	movge	r2, #43	; 0x2b
 80065ac:	2909      	cmp	r1, #9
 80065ae:	7042      	strb	r2, [r0, #1]
 80065b0:	dd2a      	ble.n	8006608 <__exponent+0x70>
 80065b2:	f10d 0407 	add.w	r4, sp, #7
 80065b6:	46a4      	mov	ip, r4
 80065b8:	270a      	movs	r7, #10
 80065ba:	46a6      	mov	lr, r4
 80065bc:	460a      	mov	r2, r1
 80065be:	fb91 f6f7 	sdiv	r6, r1, r7
 80065c2:	fb07 1516 	mls	r5, r7, r6, r1
 80065c6:	3530      	adds	r5, #48	; 0x30
 80065c8:	2a63      	cmp	r2, #99	; 0x63
 80065ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80065ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80065d2:	4631      	mov	r1, r6
 80065d4:	dcf1      	bgt.n	80065ba <__exponent+0x22>
 80065d6:	3130      	adds	r1, #48	; 0x30
 80065d8:	f1ae 0502 	sub.w	r5, lr, #2
 80065dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80065e0:	1c44      	adds	r4, r0, #1
 80065e2:	4629      	mov	r1, r5
 80065e4:	4561      	cmp	r1, ip
 80065e6:	d30a      	bcc.n	80065fe <__exponent+0x66>
 80065e8:	f10d 0209 	add.w	r2, sp, #9
 80065ec:	eba2 020e 	sub.w	r2, r2, lr
 80065f0:	4565      	cmp	r5, ip
 80065f2:	bf88      	it	hi
 80065f4:	2200      	movhi	r2, #0
 80065f6:	4413      	add	r3, r2
 80065f8:	1a18      	subs	r0, r3, r0
 80065fa:	b003      	add	sp, #12
 80065fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006602:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006606:	e7ed      	b.n	80065e4 <__exponent+0x4c>
 8006608:	2330      	movs	r3, #48	; 0x30
 800660a:	3130      	adds	r1, #48	; 0x30
 800660c:	7083      	strb	r3, [r0, #2]
 800660e:	70c1      	strb	r1, [r0, #3]
 8006610:	1d03      	adds	r3, r0, #4
 8006612:	e7f1      	b.n	80065f8 <__exponent+0x60>

08006614 <_printf_float>:
 8006614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006618:	ed2d 8b02 	vpush	{d8}
 800661c:	b08d      	sub	sp, #52	; 0x34
 800661e:	460c      	mov	r4, r1
 8006620:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006624:	4616      	mov	r6, r2
 8006626:	461f      	mov	r7, r3
 8006628:	4605      	mov	r5, r0
 800662a:	f002 fe8b 	bl	8009344 <_localeconv_r>
 800662e:	f8d0 a000 	ldr.w	sl, [r0]
 8006632:	4650      	mov	r0, sl
 8006634:	f7f9 fddc 	bl	80001f0 <strlen>
 8006638:	2300      	movs	r3, #0
 800663a:	930a      	str	r3, [sp, #40]	; 0x28
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	9305      	str	r3, [sp, #20]
 8006640:	f8d8 3000 	ldr.w	r3, [r8]
 8006644:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006648:	3307      	adds	r3, #7
 800664a:	f023 0307 	bic.w	r3, r3, #7
 800664e:	f103 0208 	add.w	r2, r3, #8
 8006652:	f8c8 2000 	str.w	r2, [r8]
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800665e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006662:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006666:	9307      	str	r3, [sp, #28]
 8006668:	f8cd 8018 	str.w	r8, [sp, #24]
 800666c:	ee08 0a10 	vmov	s16, r0
 8006670:	4b9f      	ldr	r3, [pc, #636]	; (80068f0 <_printf_float+0x2dc>)
 8006672:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006676:	f04f 32ff 	mov.w	r2, #4294967295
 800667a:	f7fa fa67 	bl	8000b4c <__aeabi_dcmpun>
 800667e:	bb88      	cbnz	r0, 80066e4 <_printf_float+0xd0>
 8006680:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006684:	4b9a      	ldr	r3, [pc, #616]	; (80068f0 <_printf_float+0x2dc>)
 8006686:	f04f 32ff 	mov.w	r2, #4294967295
 800668a:	f7fa fa41 	bl	8000b10 <__aeabi_dcmple>
 800668e:	bb48      	cbnz	r0, 80066e4 <_printf_float+0xd0>
 8006690:	2200      	movs	r2, #0
 8006692:	2300      	movs	r3, #0
 8006694:	4640      	mov	r0, r8
 8006696:	4649      	mov	r1, r9
 8006698:	f7fa fa30 	bl	8000afc <__aeabi_dcmplt>
 800669c:	b110      	cbz	r0, 80066a4 <_printf_float+0x90>
 800669e:	232d      	movs	r3, #45	; 0x2d
 80066a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a4:	4b93      	ldr	r3, [pc, #588]	; (80068f4 <_printf_float+0x2e0>)
 80066a6:	4894      	ldr	r0, [pc, #592]	; (80068f8 <_printf_float+0x2e4>)
 80066a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066ac:	bf94      	ite	ls
 80066ae:	4698      	movls	r8, r3
 80066b0:	4680      	movhi	r8, r0
 80066b2:	2303      	movs	r3, #3
 80066b4:	6123      	str	r3, [r4, #16]
 80066b6:	9b05      	ldr	r3, [sp, #20]
 80066b8:	f023 0204 	bic.w	r2, r3, #4
 80066bc:	6022      	str	r2, [r4, #0]
 80066be:	f04f 0900 	mov.w	r9, #0
 80066c2:	9700      	str	r7, [sp, #0]
 80066c4:	4633      	mov	r3, r6
 80066c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80066c8:	4621      	mov	r1, r4
 80066ca:	4628      	mov	r0, r5
 80066cc:	f000 f9d8 	bl	8006a80 <_printf_common>
 80066d0:	3001      	adds	r0, #1
 80066d2:	f040 8090 	bne.w	80067f6 <_printf_float+0x1e2>
 80066d6:	f04f 30ff 	mov.w	r0, #4294967295
 80066da:	b00d      	add	sp, #52	; 0x34
 80066dc:	ecbd 8b02 	vpop	{d8}
 80066e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e4:	4642      	mov	r2, r8
 80066e6:	464b      	mov	r3, r9
 80066e8:	4640      	mov	r0, r8
 80066ea:	4649      	mov	r1, r9
 80066ec:	f7fa fa2e 	bl	8000b4c <__aeabi_dcmpun>
 80066f0:	b140      	cbz	r0, 8006704 <_printf_float+0xf0>
 80066f2:	464b      	mov	r3, r9
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	bfbc      	itt	lt
 80066f8:	232d      	movlt	r3, #45	; 0x2d
 80066fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066fe:	487f      	ldr	r0, [pc, #508]	; (80068fc <_printf_float+0x2e8>)
 8006700:	4b7f      	ldr	r3, [pc, #508]	; (8006900 <_printf_float+0x2ec>)
 8006702:	e7d1      	b.n	80066a8 <_printf_float+0x94>
 8006704:	6863      	ldr	r3, [r4, #4]
 8006706:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800670a:	9206      	str	r2, [sp, #24]
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	d13f      	bne.n	8006790 <_printf_float+0x17c>
 8006710:	2306      	movs	r3, #6
 8006712:	6063      	str	r3, [r4, #4]
 8006714:	9b05      	ldr	r3, [sp, #20]
 8006716:	6861      	ldr	r1, [r4, #4]
 8006718:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800671c:	2300      	movs	r3, #0
 800671e:	9303      	str	r3, [sp, #12]
 8006720:	ab0a      	add	r3, sp, #40	; 0x28
 8006722:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006726:	ab09      	add	r3, sp, #36	; 0x24
 8006728:	ec49 8b10 	vmov	d0, r8, r9
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	6022      	str	r2, [r4, #0]
 8006730:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006734:	4628      	mov	r0, r5
 8006736:	f7ff fecd 	bl	80064d4 <__cvt>
 800673a:	9b06      	ldr	r3, [sp, #24]
 800673c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800673e:	2b47      	cmp	r3, #71	; 0x47
 8006740:	4680      	mov	r8, r0
 8006742:	d108      	bne.n	8006756 <_printf_float+0x142>
 8006744:	1cc8      	adds	r0, r1, #3
 8006746:	db02      	blt.n	800674e <_printf_float+0x13a>
 8006748:	6863      	ldr	r3, [r4, #4]
 800674a:	4299      	cmp	r1, r3
 800674c:	dd41      	ble.n	80067d2 <_printf_float+0x1be>
 800674e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006752:	fa5f fb8b 	uxtb.w	fp, fp
 8006756:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800675a:	d820      	bhi.n	800679e <_printf_float+0x18a>
 800675c:	3901      	subs	r1, #1
 800675e:	465a      	mov	r2, fp
 8006760:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006764:	9109      	str	r1, [sp, #36]	; 0x24
 8006766:	f7ff ff17 	bl	8006598 <__exponent>
 800676a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800676c:	1813      	adds	r3, r2, r0
 800676e:	2a01      	cmp	r2, #1
 8006770:	4681      	mov	r9, r0
 8006772:	6123      	str	r3, [r4, #16]
 8006774:	dc02      	bgt.n	800677c <_printf_float+0x168>
 8006776:	6822      	ldr	r2, [r4, #0]
 8006778:	07d2      	lsls	r2, r2, #31
 800677a:	d501      	bpl.n	8006780 <_printf_float+0x16c>
 800677c:	3301      	adds	r3, #1
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006784:	2b00      	cmp	r3, #0
 8006786:	d09c      	beq.n	80066c2 <_printf_float+0xae>
 8006788:	232d      	movs	r3, #45	; 0x2d
 800678a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800678e:	e798      	b.n	80066c2 <_printf_float+0xae>
 8006790:	9a06      	ldr	r2, [sp, #24]
 8006792:	2a47      	cmp	r2, #71	; 0x47
 8006794:	d1be      	bne.n	8006714 <_printf_float+0x100>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1bc      	bne.n	8006714 <_printf_float+0x100>
 800679a:	2301      	movs	r3, #1
 800679c:	e7b9      	b.n	8006712 <_printf_float+0xfe>
 800679e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067a2:	d118      	bne.n	80067d6 <_printf_float+0x1c2>
 80067a4:	2900      	cmp	r1, #0
 80067a6:	6863      	ldr	r3, [r4, #4]
 80067a8:	dd0b      	ble.n	80067c2 <_printf_float+0x1ae>
 80067aa:	6121      	str	r1, [r4, #16]
 80067ac:	b913      	cbnz	r3, 80067b4 <_printf_float+0x1a0>
 80067ae:	6822      	ldr	r2, [r4, #0]
 80067b0:	07d0      	lsls	r0, r2, #31
 80067b2:	d502      	bpl.n	80067ba <_printf_float+0x1a6>
 80067b4:	3301      	adds	r3, #1
 80067b6:	440b      	add	r3, r1
 80067b8:	6123      	str	r3, [r4, #16]
 80067ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80067bc:	f04f 0900 	mov.w	r9, #0
 80067c0:	e7de      	b.n	8006780 <_printf_float+0x16c>
 80067c2:	b913      	cbnz	r3, 80067ca <_printf_float+0x1b6>
 80067c4:	6822      	ldr	r2, [r4, #0]
 80067c6:	07d2      	lsls	r2, r2, #31
 80067c8:	d501      	bpl.n	80067ce <_printf_float+0x1ba>
 80067ca:	3302      	adds	r3, #2
 80067cc:	e7f4      	b.n	80067b8 <_printf_float+0x1a4>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e7f2      	b.n	80067b8 <_printf_float+0x1a4>
 80067d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80067d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d8:	4299      	cmp	r1, r3
 80067da:	db05      	blt.n	80067e8 <_printf_float+0x1d4>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	6121      	str	r1, [r4, #16]
 80067e0:	07d8      	lsls	r0, r3, #31
 80067e2:	d5ea      	bpl.n	80067ba <_printf_float+0x1a6>
 80067e4:	1c4b      	adds	r3, r1, #1
 80067e6:	e7e7      	b.n	80067b8 <_printf_float+0x1a4>
 80067e8:	2900      	cmp	r1, #0
 80067ea:	bfd4      	ite	le
 80067ec:	f1c1 0202 	rsble	r2, r1, #2
 80067f0:	2201      	movgt	r2, #1
 80067f2:	4413      	add	r3, r2
 80067f4:	e7e0      	b.n	80067b8 <_printf_float+0x1a4>
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	055a      	lsls	r2, r3, #21
 80067fa:	d407      	bmi.n	800680c <_printf_float+0x1f8>
 80067fc:	6923      	ldr	r3, [r4, #16]
 80067fe:	4642      	mov	r2, r8
 8006800:	4631      	mov	r1, r6
 8006802:	4628      	mov	r0, r5
 8006804:	47b8      	blx	r7
 8006806:	3001      	adds	r0, #1
 8006808:	d12c      	bne.n	8006864 <_printf_float+0x250>
 800680a:	e764      	b.n	80066d6 <_printf_float+0xc2>
 800680c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006810:	f240 80e0 	bls.w	80069d4 <_printf_float+0x3c0>
 8006814:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006818:	2200      	movs	r2, #0
 800681a:	2300      	movs	r3, #0
 800681c:	f7fa f964 	bl	8000ae8 <__aeabi_dcmpeq>
 8006820:	2800      	cmp	r0, #0
 8006822:	d034      	beq.n	800688e <_printf_float+0x27a>
 8006824:	4a37      	ldr	r2, [pc, #220]	; (8006904 <_printf_float+0x2f0>)
 8006826:	2301      	movs	r3, #1
 8006828:	4631      	mov	r1, r6
 800682a:	4628      	mov	r0, r5
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	f43f af51 	beq.w	80066d6 <_printf_float+0xc2>
 8006834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006838:	429a      	cmp	r2, r3
 800683a:	db02      	blt.n	8006842 <_printf_float+0x22e>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	07d8      	lsls	r0, r3, #31
 8006840:	d510      	bpl.n	8006864 <_printf_float+0x250>
 8006842:	ee18 3a10 	vmov	r3, s16
 8006846:	4652      	mov	r2, sl
 8006848:	4631      	mov	r1, r6
 800684a:	4628      	mov	r0, r5
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	f43f af41 	beq.w	80066d6 <_printf_float+0xc2>
 8006854:	f04f 0800 	mov.w	r8, #0
 8006858:	f104 091a 	add.w	r9, r4, #26
 800685c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685e:	3b01      	subs	r3, #1
 8006860:	4543      	cmp	r3, r8
 8006862:	dc09      	bgt.n	8006878 <_printf_float+0x264>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	079b      	lsls	r3, r3, #30
 8006868:	f100 8105 	bmi.w	8006a76 <_printf_float+0x462>
 800686c:	68e0      	ldr	r0, [r4, #12]
 800686e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006870:	4298      	cmp	r0, r3
 8006872:	bfb8      	it	lt
 8006874:	4618      	movlt	r0, r3
 8006876:	e730      	b.n	80066da <_printf_float+0xc6>
 8006878:	2301      	movs	r3, #1
 800687a:	464a      	mov	r2, r9
 800687c:	4631      	mov	r1, r6
 800687e:	4628      	mov	r0, r5
 8006880:	47b8      	blx	r7
 8006882:	3001      	adds	r0, #1
 8006884:	f43f af27 	beq.w	80066d6 <_printf_float+0xc2>
 8006888:	f108 0801 	add.w	r8, r8, #1
 800688c:	e7e6      	b.n	800685c <_printf_float+0x248>
 800688e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006890:	2b00      	cmp	r3, #0
 8006892:	dc39      	bgt.n	8006908 <_printf_float+0x2f4>
 8006894:	4a1b      	ldr	r2, [pc, #108]	; (8006904 <_printf_float+0x2f0>)
 8006896:	2301      	movs	r3, #1
 8006898:	4631      	mov	r1, r6
 800689a:	4628      	mov	r0, r5
 800689c:	47b8      	blx	r7
 800689e:	3001      	adds	r0, #1
 80068a0:	f43f af19 	beq.w	80066d6 <_printf_float+0xc2>
 80068a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068a8:	4313      	orrs	r3, r2
 80068aa:	d102      	bne.n	80068b2 <_printf_float+0x29e>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	07d9      	lsls	r1, r3, #31
 80068b0:	d5d8      	bpl.n	8006864 <_printf_float+0x250>
 80068b2:	ee18 3a10 	vmov	r3, s16
 80068b6:	4652      	mov	r2, sl
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b8      	blx	r7
 80068be:	3001      	adds	r0, #1
 80068c0:	f43f af09 	beq.w	80066d6 <_printf_float+0xc2>
 80068c4:	f04f 0900 	mov.w	r9, #0
 80068c8:	f104 0a1a 	add.w	sl, r4, #26
 80068cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ce:	425b      	negs	r3, r3
 80068d0:	454b      	cmp	r3, r9
 80068d2:	dc01      	bgt.n	80068d8 <_printf_float+0x2c4>
 80068d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d6:	e792      	b.n	80067fe <_printf_float+0x1ea>
 80068d8:	2301      	movs	r3, #1
 80068da:	4652      	mov	r2, sl
 80068dc:	4631      	mov	r1, r6
 80068de:	4628      	mov	r0, r5
 80068e0:	47b8      	blx	r7
 80068e2:	3001      	adds	r0, #1
 80068e4:	f43f aef7 	beq.w	80066d6 <_printf_float+0xc2>
 80068e8:	f109 0901 	add.w	r9, r9, #1
 80068ec:	e7ee      	b.n	80068cc <_printf_float+0x2b8>
 80068ee:	bf00      	nop
 80068f0:	7fefffff 	.word	0x7fefffff
 80068f4:	0800ae1c 	.word	0x0800ae1c
 80068f8:	0800ae20 	.word	0x0800ae20
 80068fc:	0800ae28 	.word	0x0800ae28
 8006900:	0800ae24 	.word	0x0800ae24
 8006904:	0800ae2c 	.word	0x0800ae2c
 8006908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800690a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800690c:	429a      	cmp	r2, r3
 800690e:	bfa8      	it	ge
 8006910:	461a      	movge	r2, r3
 8006912:	2a00      	cmp	r2, #0
 8006914:	4691      	mov	r9, r2
 8006916:	dc37      	bgt.n	8006988 <_printf_float+0x374>
 8006918:	f04f 0b00 	mov.w	fp, #0
 800691c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006920:	f104 021a 	add.w	r2, r4, #26
 8006924:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006926:	9305      	str	r3, [sp, #20]
 8006928:	eba3 0309 	sub.w	r3, r3, r9
 800692c:	455b      	cmp	r3, fp
 800692e:	dc33      	bgt.n	8006998 <_printf_float+0x384>
 8006930:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006934:	429a      	cmp	r2, r3
 8006936:	db3b      	blt.n	80069b0 <_printf_float+0x39c>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	07da      	lsls	r2, r3, #31
 800693c:	d438      	bmi.n	80069b0 <_printf_float+0x39c>
 800693e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006940:	9a05      	ldr	r2, [sp, #20]
 8006942:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006944:	1a9a      	subs	r2, r3, r2
 8006946:	eba3 0901 	sub.w	r9, r3, r1
 800694a:	4591      	cmp	r9, r2
 800694c:	bfa8      	it	ge
 800694e:	4691      	movge	r9, r2
 8006950:	f1b9 0f00 	cmp.w	r9, #0
 8006954:	dc35      	bgt.n	80069c2 <_printf_float+0x3ae>
 8006956:	f04f 0800 	mov.w	r8, #0
 800695a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800695e:	f104 0a1a 	add.w	sl, r4, #26
 8006962:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006966:	1a9b      	subs	r3, r3, r2
 8006968:	eba3 0309 	sub.w	r3, r3, r9
 800696c:	4543      	cmp	r3, r8
 800696e:	f77f af79 	ble.w	8006864 <_printf_float+0x250>
 8006972:	2301      	movs	r3, #1
 8006974:	4652      	mov	r2, sl
 8006976:	4631      	mov	r1, r6
 8006978:	4628      	mov	r0, r5
 800697a:	47b8      	blx	r7
 800697c:	3001      	adds	r0, #1
 800697e:	f43f aeaa 	beq.w	80066d6 <_printf_float+0xc2>
 8006982:	f108 0801 	add.w	r8, r8, #1
 8006986:	e7ec      	b.n	8006962 <_printf_float+0x34e>
 8006988:	4613      	mov	r3, r2
 800698a:	4631      	mov	r1, r6
 800698c:	4642      	mov	r2, r8
 800698e:	4628      	mov	r0, r5
 8006990:	47b8      	blx	r7
 8006992:	3001      	adds	r0, #1
 8006994:	d1c0      	bne.n	8006918 <_printf_float+0x304>
 8006996:	e69e      	b.n	80066d6 <_printf_float+0xc2>
 8006998:	2301      	movs	r3, #1
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	9205      	str	r2, [sp, #20]
 80069a0:	47b8      	blx	r7
 80069a2:	3001      	adds	r0, #1
 80069a4:	f43f ae97 	beq.w	80066d6 <_printf_float+0xc2>
 80069a8:	9a05      	ldr	r2, [sp, #20]
 80069aa:	f10b 0b01 	add.w	fp, fp, #1
 80069ae:	e7b9      	b.n	8006924 <_printf_float+0x310>
 80069b0:	ee18 3a10 	vmov	r3, s16
 80069b4:	4652      	mov	r2, sl
 80069b6:	4631      	mov	r1, r6
 80069b8:	4628      	mov	r0, r5
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	d1be      	bne.n	800693e <_printf_float+0x32a>
 80069c0:	e689      	b.n	80066d6 <_printf_float+0xc2>
 80069c2:	9a05      	ldr	r2, [sp, #20]
 80069c4:	464b      	mov	r3, r9
 80069c6:	4442      	add	r2, r8
 80069c8:	4631      	mov	r1, r6
 80069ca:	4628      	mov	r0, r5
 80069cc:	47b8      	blx	r7
 80069ce:	3001      	adds	r0, #1
 80069d0:	d1c1      	bne.n	8006956 <_printf_float+0x342>
 80069d2:	e680      	b.n	80066d6 <_printf_float+0xc2>
 80069d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069d6:	2a01      	cmp	r2, #1
 80069d8:	dc01      	bgt.n	80069de <_printf_float+0x3ca>
 80069da:	07db      	lsls	r3, r3, #31
 80069dc:	d538      	bpl.n	8006a50 <_printf_float+0x43c>
 80069de:	2301      	movs	r3, #1
 80069e0:	4642      	mov	r2, r8
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b8      	blx	r7
 80069e8:	3001      	adds	r0, #1
 80069ea:	f43f ae74 	beq.w	80066d6 <_printf_float+0xc2>
 80069ee:	ee18 3a10 	vmov	r3, s16
 80069f2:	4652      	mov	r2, sl
 80069f4:	4631      	mov	r1, r6
 80069f6:	4628      	mov	r0, r5
 80069f8:	47b8      	blx	r7
 80069fa:	3001      	adds	r0, #1
 80069fc:	f43f ae6b 	beq.w	80066d6 <_printf_float+0xc2>
 8006a00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a04:	2200      	movs	r2, #0
 8006a06:	2300      	movs	r3, #0
 8006a08:	f7fa f86e 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a0c:	b9d8      	cbnz	r0, 8006a46 <_printf_float+0x432>
 8006a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a10:	f108 0201 	add.w	r2, r8, #1
 8006a14:	3b01      	subs	r3, #1
 8006a16:	4631      	mov	r1, r6
 8006a18:	4628      	mov	r0, r5
 8006a1a:	47b8      	blx	r7
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d10e      	bne.n	8006a3e <_printf_float+0x42a>
 8006a20:	e659      	b.n	80066d6 <_printf_float+0xc2>
 8006a22:	2301      	movs	r3, #1
 8006a24:	4652      	mov	r2, sl
 8006a26:	4631      	mov	r1, r6
 8006a28:	4628      	mov	r0, r5
 8006a2a:	47b8      	blx	r7
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	f43f ae52 	beq.w	80066d6 <_printf_float+0xc2>
 8006a32:	f108 0801 	add.w	r8, r8, #1
 8006a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	4543      	cmp	r3, r8
 8006a3c:	dcf1      	bgt.n	8006a22 <_printf_float+0x40e>
 8006a3e:	464b      	mov	r3, r9
 8006a40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a44:	e6dc      	b.n	8006800 <_printf_float+0x1ec>
 8006a46:	f04f 0800 	mov.w	r8, #0
 8006a4a:	f104 0a1a 	add.w	sl, r4, #26
 8006a4e:	e7f2      	b.n	8006a36 <_printf_float+0x422>
 8006a50:	2301      	movs	r3, #1
 8006a52:	4642      	mov	r2, r8
 8006a54:	e7df      	b.n	8006a16 <_printf_float+0x402>
 8006a56:	2301      	movs	r3, #1
 8006a58:	464a      	mov	r2, r9
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b8      	blx	r7
 8006a60:	3001      	adds	r0, #1
 8006a62:	f43f ae38 	beq.w	80066d6 <_printf_float+0xc2>
 8006a66:	f108 0801 	add.w	r8, r8, #1
 8006a6a:	68e3      	ldr	r3, [r4, #12]
 8006a6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a6e:	1a5b      	subs	r3, r3, r1
 8006a70:	4543      	cmp	r3, r8
 8006a72:	dcf0      	bgt.n	8006a56 <_printf_float+0x442>
 8006a74:	e6fa      	b.n	800686c <_printf_float+0x258>
 8006a76:	f04f 0800 	mov.w	r8, #0
 8006a7a:	f104 0919 	add.w	r9, r4, #25
 8006a7e:	e7f4      	b.n	8006a6a <_printf_float+0x456>

08006a80 <_printf_common>:
 8006a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a84:	4616      	mov	r6, r2
 8006a86:	4699      	mov	r9, r3
 8006a88:	688a      	ldr	r2, [r1, #8]
 8006a8a:	690b      	ldr	r3, [r1, #16]
 8006a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a90:	4293      	cmp	r3, r2
 8006a92:	bfb8      	it	lt
 8006a94:	4613      	movlt	r3, r2
 8006a96:	6033      	str	r3, [r6, #0]
 8006a98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a9c:	4607      	mov	r7, r0
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	b10a      	cbz	r2, 8006aa6 <_printf_common+0x26>
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	6033      	str	r3, [r6, #0]
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	0699      	lsls	r1, r3, #26
 8006aaa:	bf42      	ittt	mi
 8006aac:	6833      	ldrmi	r3, [r6, #0]
 8006aae:	3302      	addmi	r3, #2
 8006ab0:	6033      	strmi	r3, [r6, #0]
 8006ab2:	6825      	ldr	r5, [r4, #0]
 8006ab4:	f015 0506 	ands.w	r5, r5, #6
 8006ab8:	d106      	bne.n	8006ac8 <_printf_common+0x48>
 8006aba:	f104 0a19 	add.w	sl, r4, #25
 8006abe:	68e3      	ldr	r3, [r4, #12]
 8006ac0:	6832      	ldr	r2, [r6, #0]
 8006ac2:	1a9b      	subs	r3, r3, r2
 8006ac4:	42ab      	cmp	r3, r5
 8006ac6:	dc26      	bgt.n	8006b16 <_printf_common+0x96>
 8006ac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006acc:	1e13      	subs	r3, r2, #0
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	bf18      	it	ne
 8006ad2:	2301      	movne	r3, #1
 8006ad4:	0692      	lsls	r2, r2, #26
 8006ad6:	d42b      	bmi.n	8006b30 <_printf_common+0xb0>
 8006ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006adc:	4649      	mov	r1, r9
 8006ade:	4638      	mov	r0, r7
 8006ae0:	47c0      	blx	r8
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	d01e      	beq.n	8006b24 <_printf_common+0xa4>
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	68e5      	ldr	r5, [r4, #12]
 8006aea:	6832      	ldr	r2, [r6, #0]
 8006aec:	f003 0306 	and.w	r3, r3, #6
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	bf08      	it	eq
 8006af4:	1aad      	subeq	r5, r5, r2
 8006af6:	68a3      	ldr	r3, [r4, #8]
 8006af8:	6922      	ldr	r2, [r4, #16]
 8006afa:	bf0c      	ite	eq
 8006afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b00:	2500      	movne	r5, #0
 8006b02:	4293      	cmp	r3, r2
 8006b04:	bfc4      	itt	gt
 8006b06:	1a9b      	subgt	r3, r3, r2
 8006b08:	18ed      	addgt	r5, r5, r3
 8006b0a:	2600      	movs	r6, #0
 8006b0c:	341a      	adds	r4, #26
 8006b0e:	42b5      	cmp	r5, r6
 8006b10:	d11a      	bne.n	8006b48 <_printf_common+0xc8>
 8006b12:	2000      	movs	r0, #0
 8006b14:	e008      	b.n	8006b28 <_printf_common+0xa8>
 8006b16:	2301      	movs	r3, #1
 8006b18:	4652      	mov	r2, sl
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	4638      	mov	r0, r7
 8006b1e:	47c0      	blx	r8
 8006b20:	3001      	adds	r0, #1
 8006b22:	d103      	bne.n	8006b2c <_printf_common+0xac>
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b2c:	3501      	adds	r5, #1
 8006b2e:	e7c6      	b.n	8006abe <_printf_common+0x3e>
 8006b30:	18e1      	adds	r1, r4, r3
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	2030      	movs	r0, #48	; 0x30
 8006b36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b3a:	4422      	add	r2, r4
 8006b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b44:	3302      	adds	r3, #2
 8006b46:	e7c7      	b.n	8006ad8 <_printf_common+0x58>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	4638      	mov	r0, r7
 8006b50:	47c0      	blx	r8
 8006b52:	3001      	adds	r0, #1
 8006b54:	d0e6      	beq.n	8006b24 <_printf_common+0xa4>
 8006b56:	3601      	adds	r6, #1
 8006b58:	e7d9      	b.n	8006b0e <_printf_common+0x8e>
	...

08006b5c <_printf_i>:
 8006b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b60:	7e0f      	ldrb	r7, [r1, #24]
 8006b62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b64:	2f78      	cmp	r7, #120	; 0x78
 8006b66:	4691      	mov	r9, r2
 8006b68:	4680      	mov	r8, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	469a      	mov	sl, r3
 8006b6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b72:	d807      	bhi.n	8006b84 <_printf_i+0x28>
 8006b74:	2f62      	cmp	r7, #98	; 0x62
 8006b76:	d80a      	bhi.n	8006b8e <_printf_i+0x32>
 8006b78:	2f00      	cmp	r7, #0
 8006b7a:	f000 80d8 	beq.w	8006d2e <_printf_i+0x1d2>
 8006b7e:	2f58      	cmp	r7, #88	; 0x58
 8006b80:	f000 80a3 	beq.w	8006cca <_printf_i+0x16e>
 8006b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b8c:	e03a      	b.n	8006c04 <_printf_i+0xa8>
 8006b8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b92:	2b15      	cmp	r3, #21
 8006b94:	d8f6      	bhi.n	8006b84 <_printf_i+0x28>
 8006b96:	a101      	add	r1, pc, #4	; (adr r1, 8006b9c <_printf_i+0x40>)
 8006b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b9c:	08006bf5 	.word	0x08006bf5
 8006ba0:	08006c09 	.word	0x08006c09
 8006ba4:	08006b85 	.word	0x08006b85
 8006ba8:	08006b85 	.word	0x08006b85
 8006bac:	08006b85 	.word	0x08006b85
 8006bb0:	08006b85 	.word	0x08006b85
 8006bb4:	08006c09 	.word	0x08006c09
 8006bb8:	08006b85 	.word	0x08006b85
 8006bbc:	08006b85 	.word	0x08006b85
 8006bc0:	08006b85 	.word	0x08006b85
 8006bc4:	08006b85 	.word	0x08006b85
 8006bc8:	08006d15 	.word	0x08006d15
 8006bcc:	08006c39 	.word	0x08006c39
 8006bd0:	08006cf7 	.word	0x08006cf7
 8006bd4:	08006b85 	.word	0x08006b85
 8006bd8:	08006b85 	.word	0x08006b85
 8006bdc:	08006d37 	.word	0x08006d37
 8006be0:	08006b85 	.word	0x08006b85
 8006be4:	08006c39 	.word	0x08006c39
 8006be8:	08006b85 	.word	0x08006b85
 8006bec:	08006b85 	.word	0x08006b85
 8006bf0:	08006cff 	.word	0x08006cff
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	1d1a      	adds	r2, r3, #4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	602a      	str	r2, [r5, #0]
 8006bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c04:	2301      	movs	r3, #1
 8006c06:	e0a3      	b.n	8006d50 <_printf_i+0x1f4>
 8006c08:	6820      	ldr	r0, [r4, #0]
 8006c0a:	6829      	ldr	r1, [r5, #0]
 8006c0c:	0606      	lsls	r6, r0, #24
 8006c0e:	f101 0304 	add.w	r3, r1, #4
 8006c12:	d50a      	bpl.n	8006c2a <_printf_i+0xce>
 8006c14:	680e      	ldr	r6, [r1, #0]
 8006c16:	602b      	str	r3, [r5, #0]
 8006c18:	2e00      	cmp	r6, #0
 8006c1a:	da03      	bge.n	8006c24 <_printf_i+0xc8>
 8006c1c:	232d      	movs	r3, #45	; 0x2d
 8006c1e:	4276      	negs	r6, r6
 8006c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c24:	485e      	ldr	r0, [pc, #376]	; (8006da0 <_printf_i+0x244>)
 8006c26:	230a      	movs	r3, #10
 8006c28:	e019      	b.n	8006c5e <_printf_i+0x102>
 8006c2a:	680e      	ldr	r6, [r1, #0]
 8006c2c:	602b      	str	r3, [r5, #0]
 8006c2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c32:	bf18      	it	ne
 8006c34:	b236      	sxthne	r6, r6
 8006c36:	e7ef      	b.n	8006c18 <_printf_i+0xbc>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	6820      	ldr	r0, [r4, #0]
 8006c3c:	1d19      	adds	r1, r3, #4
 8006c3e:	6029      	str	r1, [r5, #0]
 8006c40:	0601      	lsls	r1, r0, #24
 8006c42:	d501      	bpl.n	8006c48 <_printf_i+0xec>
 8006c44:	681e      	ldr	r6, [r3, #0]
 8006c46:	e002      	b.n	8006c4e <_printf_i+0xf2>
 8006c48:	0646      	lsls	r6, r0, #25
 8006c4a:	d5fb      	bpl.n	8006c44 <_printf_i+0xe8>
 8006c4c:	881e      	ldrh	r6, [r3, #0]
 8006c4e:	4854      	ldr	r0, [pc, #336]	; (8006da0 <_printf_i+0x244>)
 8006c50:	2f6f      	cmp	r7, #111	; 0x6f
 8006c52:	bf0c      	ite	eq
 8006c54:	2308      	moveq	r3, #8
 8006c56:	230a      	movne	r3, #10
 8006c58:	2100      	movs	r1, #0
 8006c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c5e:	6865      	ldr	r5, [r4, #4]
 8006c60:	60a5      	str	r5, [r4, #8]
 8006c62:	2d00      	cmp	r5, #0
 8006c64:	bfa2      	ittt	ge
 8006c66:	6821      	ldrge	r1, [r4, #0]
 8006c68:	f021 0104 	bicge.w	r1, r1, #4
 8006c6c:	6021      	strge	r1, [r4, #0]
 8006c6e:	b90e      	cbnz	r6, 8006c74 <_printf_i+0x118>
 8006c70:	2d00      	cmp	r5, #0
 8006c72:	d04d      	beq.n	8006d10 <_printf_i+0x1b4>
 8006c74:	4615      	mov	r5, r2
 8006c76:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c7a:	fb03 6711 	mls	r7, r3, r1, r6
 8006c7e:	5dc7      	ldrb	r7, [r0, r7]
 8006c80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c84:	4637      	mov	r7, r6
 8006c86:	42bb      	cmp	r3, r7
 8006c88:	460e      	mov	r6, r1
 8006c8a:	d9f4      	bls.n	8006c76 <_printf_i+0x11a>
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d10b      	bne.n	8006ca8 <_printf_i+0x14c>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	07de      	lsls	r6, r3, #31
 8006c94:	d508      	bpl.n	8006ca8 <_printf_i+0x14c>
 8006c96:	6923      	ldr	r3, [r4, #16]
 8006c98:	6861      	ldr	r1, [r4, #4]
 8006c9a:	4299      	cmp	r1, r3
 8006c9c:	bfde      	ittt	le
 8006c9e:	2330      	movle	r3, #48	; 0x30
 8006ca0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ca4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ca8:	1b52      	subs	r2, r2, r5
 8006caa:	6122      	str	r2, [r4, #16]
 8006cac:	f8cd a000 	str.w	sl, [sp]
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	aa03      	add	r2, sp, #12
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	f7ff fee2 	bl	8006a80 <_printf_common>
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d14c      	bne.n	8006d5a <_printf_i+0x1fe>
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc4:	b004      	add	sp, #16
 8006cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cca:	4835      	ldr	r0, [pc, #212]	; (8006da0 <_printf_i+0x244>)
 8006ccc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cd0:	6829      	ldr	r1, [r5, #0]
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cd8:	6029      	str	r1, [r5, #0]
 8006cda:	061d      	lsls	r5, r3, #24
 8006cdc:	d514      	bpl.n	8006d08 <_printf_i+0x1ac>
 8006cde:	07df      	lsls	r7, r3, #31
 8006ce0:	bf44      	itt	mi
 8006ce2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ce6:	6023      	strmi	r3, [r4, #0]
 8006ce8:	b91e      	cbnz	r6, 8006cf2 <_printf_i+0x196>
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	f023 0320 	bic.w	r3, r3, #32
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	2310      	movs	r3, #16
 8006cf4:	e7b0      	b.n	8006c58 <_printf_i+0xfc>
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	f043 0320 	orr.w	r3, r3, #32
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	2378      	movs	r3, #120	; 0x78
 8006d00:	4828      	ldr	r0, [pc, #160]	; (8006da4 <_printf_i+0x248>)
 8006d02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d06:	e7e3      	b.n	8006cd0 <_printf_i+0x174>
 8006d08:	0659      	lsls	r1, r3, #25
 8006d0a:	bf48      	it	mi
 8006d0c:	b2b6      	uxthmi	r6, r6
 8006d0e:	e7e6      	b.n	8006cde <_printf_i+0x182>
 8006d10:	4615      	mov	r5, r2
 8006d12:	e7bb      	b.n	8006c8c <_printf_i+0x130>
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	6826      	ldr	r6, [r4, #0]
 8006d18:	6961      	ldr	r1, [r4, #20]
 8006d1a:	1d18      	adds	r0, r3, #4
 8006d1c:	6028      	str	r0, [r5, #0]
 8006d1e:	0635      	lsls	r5, r6, #24
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	d501      	bpl.n	8006d28 <_printf_i+0x1cc>
 8006d24:	6019      	str	r1, [r3, #0]
 8006d26:	e002      	b.n	8006d2e <_printf_i+0x1d2>
 8006d28:	0670      	lsls	r0, r6, #25
 8006d2a:	d5fb      	bpl.n	8006d24 <_printf_i+0x1c8>
 8006d2c:	8019      	strh	r1, [r3, #0]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	6123      	str	r3, [r4, #16]
 8006d32:	4615      	mov	r5, r2
 8006d34:	e7ba      	b.n	8006cac <_printf_i+0x150>
 8006d36:	682b      	ldr	r3, [r5, #0]
 8006d38:	1d1a      	adds	r2, r3, #4
 8006d3a:	602a      	str	r2, [r5, #0]
 8006d3c:	681d      	ldr	r5, [r3, #0]
 8006d3e:	6862      	ldr	r2, [r4, #4]
 8006d40:	2100      	movs	r1, #0
 8006d42:	4628      	mov	r0, r5
 8006d44:	f7f9 fa5c 	bl	8000200 <memchr>
 8006d48:	b108      	cbz	r0, 8006d4e <_printf_i+0x1f2>
 8006d4a:	1b40      	subs	r0, r0, r5
 8006d4c:	6060      	str	r0, [r4, #4]
 8006d4e:	6863      	ldr	r3, [r4, #4]
 8006d50:	6123      	str	r3, [r4, #16]
 8006d52:	2300      	movs	r3, #0
 8006d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d58:	e7a8      	b.n	8006cac <_printf_i+0x150>
 8006d5a:	6923      	ldr	r3, [r4, #16]
 8006d5c:	462a      	mov	r2, r5
 8006d5e:	4649      	mov	r1, r9
 8006d60:	4640      	mov	r0, r8
 8006d62:	47d0      	blx	sl
 8006d64:	3001      	adds	r0, #1
 8006d66:	d0ab      	beq.n	8006cc0 <_printf_i+0x164>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	079b      	lsls	r3, r3, #30
 8006d6c:	d413      	bmi.n	8006d96 <_printf_i+0x23a>
 8006d6e:	68e0      	ldr	r0, [r4, #12]
 8006d70:	9b03      	ldr	r3, [sp, #12]
 8006d72:	4298      	cmp	r0, r3
 8006d74:	bfb8      	it	lt
 8006d76:	4618      	movlt	r0, r3
 8006d78:	e7a4      	b.n	8006cc4 <_printf_i+0x168>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4632      	mov	r2, r6
 8006d7e:	4649      	mov	r1, r9
 8006d80:	4640      	mov	r0, r8
 8006d82:	47d0      	blx	sl
 8006d84:	3001      	adds	r0, #1
 8006d86:	d09b      	beq.n	8006cc0 <_printf_i+0x164>
 8006d88:	3501      	adds	r5, #1
 8006d8a:	68e3      	ldr	r3, [r4, #12]
 8006d8c:	9903      	ldr	r1, [sp, #12]
 8006d8e:	1a5b      	subs	r3, r3, r1
 8006d90:	42ab      	cmp	r3, r5
 8006d92:	dcf2      	bgt.n	8006d7a <_printf_i+0x21e>
 8006d94:	e7eb      	b.n	8006d6e <_printf_i+0x212>
 8006d96:	2500      	movs	r5, #0
 8006d98:	f104 0619 	add.w	r6, r4, #25
 8006d9c:	e7f5      	b.n	8006d8a <_printf_i+0x22e>
 8006d9e:	bf00      	nop
 8006da0:	0800ae2e 	.word	0x0800ae2e
 8006da4:	0800ae3f 	.word	0x0800ae3f

08006da8 <_scanf_float>:
 8006da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	b087      	sub	sp, #28
 8006dae:	4617      	mov	r7, r2
 8006db0:	9303      	str	r3, [sp, #12]
 8006db2:	688b      	ldr	r3, [r1, #8]
 8006db4:	1e5a      	subs	r2, r3, #1
 8006db6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006dba:	bf83      	ittte	hi
 8006dbc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006dc0:	195b      	addhi	r3, r3, r5
 8006dc2:	9302      	strhi	r3, [sp, #8]
 8006dc4:	2300      	movls	r3, #0
 8006dc6:	bf86      	itte	hi
 8006dc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006dcc:	608b      	strhi	r3, [r1, #8]
 8006dce:	9302      	strls	r3, [sp, #8]
 8006dd0:	680b      	ldr	r3, [r1, #0]
 8006dd2:	468b      	mov	fp, r1
 8006dd4:	2500      	movs	r5, #0
 8006dd6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006dda:	f84b 3b1c 	str.w	r3, [fp], #28
 8006dde:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006de2:	4680      	mov	r8, r0
 8006de4:	460c      	mov	r4, r1
 8006de6:	465e      	mov	r6, fp
 8006de8:	46aa      	mov	sl, r5
 8006dea:	46a9      	mov	r9, r5
 8006dec:	9501      	str	r5, [sp, #4]
 8006dee:	68a2      	ldr	r2, [r4, #8]
 8006df0:	b152      	cbz	r2, 8006e08 <_scanf_float+0x60>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b4e      	cmp	r3, #78	; 0x4e
 8006df8:	d864      	bhi.n	8006ec4 <_scanf_float+0x11c>
 8006dfa:	2b40      	cmp	r3, #64	; 0x40
 8006dfc:	d83c      	bhi.n	8006e78 <_scanf_float+0xd0>
 8006dfe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006e02:	b2c8      	uxtb	r0, r1
 8006e04:	280e      	cmp	r0, #14
 8006e06:	d93a      	bls.n	8006e7e <_scanf_float+0xd6>
 8006e08:	f1b9 0f00 	cmp.w	r9, #0
 8006e0c:	d003      	beq.n	8006e16 <_scanf_float+0x6e>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e1a:	f1ba 0f01 	cmp.w	sl, #1
 8006e1e:	f200 8113 	bhi.w	8007048 <_scanf_float+0x2a0>
 8006e22:	455e      	cmp	r6, fp
 8006e24:	f200 8105 	bhi.w	8007032 <_scanf_float+0x28a>
 8006e28:	2501      	movs	r5, #1
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	b007      	add	sp, #28
 8006e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e32:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006e36:	2a0d      	cmp	r2, #13
 8006e38:	d8e6      	bhi.n	8006e08 <_scanf_float+0x60>
 8006e3a:	a101      	add	r1, pc, #4	; (adr r1, 8006e40 <_scanf_float+0x98>)
 8006e3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e40:	08006f7f 	.word	0x08006f7f
 8006e44:	08006e09 	.word	0x08006e09
 8006e48:	08006e09 	.word	0x08006e09
 8006e4c:	08006e09 	.word	0x08006e09
 8006e50:	08006fdf 	.word	0x08006fdf
 8006e54:	08006fb7 	.word	0x08006fb7
 8006e58:	08006e09 	.word	0x08006e09
 8006e5c:	08006e09 	.word	0x08006e09
 8006e60:	08006f8d 	.word	0x08006f8d
 8006e64:	08006e09 	.word	0x08006e09
 8006e68:	08006e09 	.word	0x08006e09
 8006e6c:	08006e09 	.word	0x08006e09
 8006e70:	08006e09 	.word	0x08006e09
 8006e74:	08006f45 	.word	0x08006f45
 8006e78:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006e7c:	e7db      	b.n	8006e36 <_scanf_float+0x8e>
 8006e7e:	290e      	cmp	r1, #14
 8006e80:	d8c2      	bhi.n	8006e08 <_scanf_float+0x60>
 8006e82:	a001      	add	r0, pc, #4	; (adr r0, 8006e88 <_scanf_float+0xe0>)
 8006e84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006e88:	08006f37 	.word	0x08006f37
 8006e8c:	08006e09 	.word	0x08006e09
 8006e90:	08006f37 	.word	0x08006f37
 8006e94:	08006fcb 	.word	0x08006fcb
 8006e98:	08006e09 	.word	0x08006e09
 8006e9c:	08006ee5 	.word	0x08006ee5
 8006ea0:	08006f21 	.word	0x08006f21
 8006ea4:	08006f21 	.word	0x08006f21
 8006ea8:	08006f21 	.word	0x08006f21
 8006eac:	08006f21 	.word	0x08006f21
 8006eb0:	08006f21 	.word	0x08006f21
 8006eb4:	08006f21 	.word	0x08006f21
 8006eb8:	08006f21 	.word	0x08006f21
 8006ebc:	08006f21 	.word	0x08006f21
 8006ec0:	08006f21 	.word	0x08006f21
 8006ec4:	2b6e      	cmp	r3, #110	; 0x6e
 8006ec6:	d809      	bhi.n	8006edc <_scanf_float+0x134>
 8006ec8:	2b60      	cmp	r3, #96	; 0x60
 8006eca:	d8b2      	bhi.n	8006e32 <_scanf_float+0x8a>
 8006ecc:	2b54      	cmp	r3, #84	; 0x54
 8006ece:	d077      	beq.n	8006fc0 <_scanf_float+0x218>
 8006ed0:	2b59      	cmp	r3, #89	; 0x59
 8006ed2:	d199      	bne.n	8006e08 <_scanf_float+0x60>
 8006ed4:	2d07      	cmp	r5, #7
 8006ed6:	d197      	bne.n	8006e08 <_scanf_float+0x60>
 8006ed8:	2508      	movs	r5, #8
 8006eda:	e029      	b.n	8006f30 <_scanf_float+0x188>
 8006edc:	2b74      	cmp	r3, #116	; 0x74
 8006ede:	d06f      	beq.n	8006fc0 <_scanf_float+0x218>
 8006ee0:	2b79      	cmp	r3, #121	; 0x79
 8006ee2:	e7f6      	b.n	8006ed2 <_scanf_float+0x12a>
 8006ee4:	6821      	ldr	r1, [r4, #0]
 8006ee6:	05c8      	lsls	r0, r1, #23
 8006ee8:	d51a      	bpl.n	8006f20 <_scanf_float+0x178>
 8006eea:	9b02      	ldr	r3, [sp, #8]
 8006eec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ef0:	6021      	str	r1, [r4, #0]
 8006ef2:	f109 0901 	add.w	r9, r9, #1
 8006ef6:	b11b      	cbz	r3, 8006f00 <_scanf_float+0x158>
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	3201      	adds	r2, #1
 8006efc:	9302      	str	r3, [sp, #8]
 8006efe:	60a2      	str	r2, [r4, #8]
 8006f00:	68a3      	ldr	r3, [r4, #8]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	60a3      	str	r3, [r4, #8]
 8006f06:	6923      	ldr	r3, [r4, #16]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	6123      	str	r3, [r4, #16]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	607b      	str	r3, [r7, #4]
 8006f14:	f340 8084 	ble.w	8007020 <_scanf_float+0x278>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	603b      	str	r3, [r7, #0]
 8006f1e:	e766      	b.n	8006dee <_scanf_float+0x46>
 8006f20:	eb1a 0f05 	cmn.w	sl, r5
 8006f24:	f47f af70 	bne.w	8006e08 <_scanf_float+0x60>
 8006f28:	6822      	ldr	r2, [r4, #0]
 8006f2a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006f2e:	6022      	str	r2, [r4, #0]
 8006f30:	f806 3b01 	strb.w	r3, [r6], #1
 8006f34:	e7e4      	b.n	8006f00 <_scanf_float+0x158>
 8006f36:	6822      	ldr	r2, [r4, #0]
 8006f38:	0610      	lsls	r0, r2, #24
 8006f3a:	f57f af65 	bpl.w	8006e08 <_scanf_float+0x60>
 8006f3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f42:	e7f4      	b.n	8006f2e <_scanf_float+0x186>
 8006f44:	f1ba 0f00 	cmp.w	sl, #0
 8006f48:	d10e      	bne.n	8006f68 <_scanf_float+0x1c0>
 8006f4a:	f1b9 0f00 	cmp.w	r9, #0
 8006f4e:	d10e      	bne.n	8006f6e <_scanf_float+0x1c6>
 8006f50:	6822      	ldr	r2, [r4, #0]
 8006f52:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f56:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f5a:	d108      	bne.n	8006f6e <_scanf_float+0x1c6>
 8006f5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f60:	6022      	str	r2, [r4, #0]
 8006f62:	f04f 0a01 	mov.w	sl, #1
 8006f66:	e7e3      	b.n	8006f30 <_scanf_float+0x188>
 8006f68:	f1ba 0f02 	cmp.w	sl, #2
 8006f6c:	d055      	beq.n	800701a <_scanf_float+0x272>
 8006f6e:	2d01      	cmp	r5, #1
 8006f70:	d002      	beq.n	8006f78 <_scanf_float+0x1d0>
 8006f72:	2d04      	cmp	r5, #4
 8006f74:	f47f af48 	bne.w	8006e08 <_scanf_float+0x60>
 8006f78:	3501      	adds	r5, #1
 8006f7a:	b2ed      	uxtb	r5, r5
 8006f7c:	e7d8      	b.n	8006f30 <_scanf_float+0x188>
 8006f7e:	f1ba 0f01 	cmp.w	sl, #1
 8006f82:	f47f af41 	bne.w	8006e08 <_scanf_float+0x60>
 8006f86:	f04f 0a02 	mov.w	sl, #2
 8006f8a:	e7d1      	b.n	8006f30 <_scanf_float+0x188>
 8006f8c:	b97d      	cbnz	r5, 8006fae <_scanf_float+0x206>
 8006f8e:	f1b9 0f00 	cmp.w	r9, #0
 8006f92:	f47f af3c 	bne.w	8006e0e <_scanf_float+0x66>
 8006f96:	6822      	ldr	r2, [r4, #0]
 8006f98:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f9c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006fa0:	f47f af39 	bne.w	8006e16 <_scanf_float+0x6e>
 8006fa4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fa8:	6022      	str	r2, [r4, #0]
 8006faa:	2501      	movs	r5, #1
 8006fac:	e7c0      	b.n	8006f30 <_scanf_float+0x188>
 8006fae:	2d03      	cmp	r5, #3
 8006fb0:	d0e2      	beq.n	8006f78 <_scanf_float+0x1d0>
 8006fb2:	2d05      	cmp	r5, #5
 8006fb4:	e7de      	b.n	8006f74 <_scanf_float+0x1cc>
 8006fb6:	2d02      	cmp	r5, #2
 8006fb8:	f47f af26 	bne.w	8006e08 <_scanf_float+0x60>
 8006fbc:	2503      	movs	r5, #3
 8006fbe:	e7b7      	b.n	8006f30 <_scanf_float+0x188>
 8006fc0:	2d06      	cmp	r5, #6
 8006fc2:	f47f af21 	bne.w	8006e08 <_scanf_float+0x60>
 8006fc6:	2507      	movs	r5, #7
 8006fc8:	e7b2      	b.n	8006f30 <_scanf_float+0x188>
 8006fca:	6822      	ldr	r2, [r4, #0]
 8006fcc:	0591      	lsls	r1, r2, #22
 8006fce:	f57f af1b 	bpl.w	8006e08 <_scanf_float+0x60>
 8006fd2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006fd6:	6022      	str	r2, [r4, #0]
 8006fd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fdc:	e7a8      	b.n	8006f30 <_scanf_float+0x188>
 8006fde:	6822      	ldr	r2, [r4, #0]
 8006fe0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006fe4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006fe8:	d006      	beq.n	8006ff8 <_scanf_float+0x250>
 8006fea:	0550      	lsls	r0, r2, #21
 8006fec:	f57f af0c 	bpl.w	8006e08 <_scanf_float+0x60>
 8006ff0:	f1b9 0f00 	cmp.w	r9, #0
 8006ff4:	f43f af0f 	beq.w	8006e16 <_scanf_float+0x6e>
 8006ff8:	0591      	lsls	r1, r2, #22
 8006ffa:	bf58      	it	pl
 8006ffc:	9901      	ldrpl	r1, [sp, #4]
 8006ffe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007002:	bf58      	it	pl
 8007004:	eba9 0101 	subpl.w	r1, r9, r1
 8007008:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800700c:	bf58      	it	pl
 800700e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007012:	6022      	str	r2, [r4, #0]
 8007014:	f04f 0900 	mov.w	r9, #0
 8007018:	e78a      	b.n	8006f30 <_scanf_float+0x188>
 800701a:	f04f 0a03 	mov.w	sl, #3
 800701e:	e787      	b.n	8006f30 <_scanf_float+0x188>
 8007020:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007024:	4639      	mov	r1, r7
 8007026:	4640      	mov	r0, r8
 8007028:	4798      	blx	r3
 800702a:	2800      	cmp	r0, #0
 800702c:	f43f aedf 	beq.w	8006dee <_scanf_float+0x46>
 8007030:	e6ea      	b.n	8006e08 <_scanf_float+0x60>
 8007032:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007036:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800703a:	463a      	mov	r2, r7
 800703c:	4640      	mov	r0, r8
 800703e:	4798      	blx	r3
 8007040:	6923      	ldr	r3, [r4, #16]
 8007042:	3b01      	subs	r3, #1
 8007044:	6123      	str	r3, [r4, #16]
 8007046:	e6ec      	b.n	8006e22 <_scanf_float+0x7a>
 8007048:	1e6b      	subs	r3, r5, #1
 800704a:	2b06      	cmp	r3, #6
 800704c:	d825      	bhi.n	800709a <_scanf_float+0x2f2>
 800704e:	2d02      	cmp	r5, #2
 8007050:	d836      	bhi.n	80070c0 <_scanf_float+0x318>
 8007052:	455e      	cmp	r6, fp
 8007054:	f67f aee8 	bls.w	8006e28 <_scanf_float+0x80>
 8007058:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800705c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007060:	463a      	mov	r2, r7
 8007062:	4640      	mov	r0, r8
 8007064:	4798      	blx	r3
 8007066:	6923      	ldr	r3, [r4, #16]
 8007068:	3b01      	subs	r3, #1
 800706a:	6123      	str	r3, [r4, #16]
 800706c:	e7f1      	b.n	8007052 <_scanf_float+0x2aa>
 800706e:	9802      	ldr	r0, [sp, #8]
 8007070:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007074:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007078:	9002      	str	r0, [sp, #8]
 800707a:	463a      	mov	r2, r7
 800707c:	4640      	mov	r0, r8
 800707e:	4798      	blx	r3
 8007080:	6923      	ldr	r3, [r4, #16]
 8007082:	3b01      	subs	r3, #1
 8007084:	6123      	str	r3, [r4, #16]
 8007086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800708a:	fa5f fa8a 	uxtb.w	sl, sl
 800708e:	f1ba 0f02 	cmp.w	sl, #2
 8007092:	d1ec      	bne.n	800706e <_scanf_float+0x2c6>
 8007094:	3d03      	subs	r5, #3
 8007096:	b2ed      	uxtb	r5, r5
 8007098:	1b76      	subs	r6, r6, r5
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	05da      	lsls	r2, r3, #23
 800709e:	d52f      	bpl.n	8007100 <_scanf_float+0x358>
 80070a0:	055b      	lsls	r3, r3, #21
 80070a2:	d510      	bpl.n	80070c6 <_scanf_float+0x31e>
 80070a4:	455e      	cmp	r6, fp
 80070a6:	f67f aebf 	bls.w	8006e28 <_scanf_float+0x80>
 80070aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070b2:	463a      	mov	r2, r7
 80070b4:	4640      	mov	r0, r8
 80070b6:	4798      	blx	r3
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	6123      	str	r3, [r4, #16]
 80070be:	e7f1      	b.n	80070a4 <_scanf_float+0x2fc>
 80070c0:	46aa      	mov	sl, r5
 80070c2:	9602      	str	r6, [sp, #8]
 80070c4:	e7df      	b.n	8007086 <_scanf_float+0x2de>
 80070c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80070ca:	6923      	ldr	r3, [r4, #16]
 80070cc:	2965      	cmp	r1, #101	; 0x65
 80070ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80070d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80070d6:	6123      	str	r3, [r4, #16]
 80070d8:	d00c      	beq.n	80070f4 <_scanf_float+0x34c>
 80070da:	2945      	cmp	r1, #69	; 0x45
 80070dc:	d00a      	beq.n	80070f4 <_scanf_float+0x34c>
 80070de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070e2:	463a      	mov	r2, r7
 80070e4:	4640      	mov	r0, r8
 80070e6:	4798      	blx	r3
 80070e8:	6923      	ldr	r3, [r4, #16]
 80070ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	1eb5      	subs	r5, r6, #2
 80070f2:	6123      	str	r3, [r4, #16]
 80070f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070f8:	463a      	mov	r2, r7
 80070fa:	4640      	mov	r0, r8
 80070fc:	4798      	blx	r3
 80070fe:	462e      	mov	r6, r5
 8007100:	6825      	ldr	r5, [r4, #0]
 8007102:	f015 0510 	ands.w	r5, r5, #16
 8007106:	d159      	bne.n	80071bc <_scanf_float+0x414>
 8007108:	7035      	strb	r5, [r6, #0]
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007114:	d11b      	bne.n	800714e <_scanf_float+0x3a6>
 8007116:	9b01      	ldr	r3, [sp, #4]
 8007118:	454b      	cmp	r3, r9
 800711a:	eba3 0209 	sub.w	r2, r3, r9
 800711e:	d123      	bne.n	8007168 <_scanf_float+0x3c0>
 8007120:	2200      	movs	r2, #0
 8007122:	4659      	mov	r1, fp
 8007124:	4640      	mov	r0, r8
 8007126:	f000 fe99 	bl	8007e5c <_strtod_r>
 800712a:	6822      	ldr	r2, [r4, #0]
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	f012 0f02 	tst.w	r2, #2
 8007132:	ec57 6b10 	vmov	r6, r7, d0
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	d021      	beq.n	800717e <_scanf_float+0x3d6>
 800713a:	9903      	ldr	r1, [sp, #12]
 800713c:	1d1a      	adds	r2, r3, #4
 800713e:	600a      	str	r2, [r1, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	e9c3 6700 	strd	r6, r7, [r3]
 8007146:	68e3      	ldr	r3, [r4, #12]
 8007148:	3301      	adds	r3, #1
 800714a:	60e3      	str	r3, [r4, #12]
 800714c:	e66d      	b.n	8006e2a <_scanf_float+0x82>
 800714e:	9b04      	ldr	r3, [sp, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0e5      	beq.n	8007120 <_scanf_float+0x378>
 8007154:	9905      	ldr	r1, [sp, #20]
 8007156:	230a      	movs	r3, #10
 8007158:	462a      	mov	r2, r5
 800715a:	3101      	adds	r1, #1
 800715c:	4640      	mov	r0, r8
 800715e:	f000 ff05 	bl	8007f6c <_strtol_r>
 8007162:	9b04      	ldr	r3, [sp, #16]
 8007164:	9e05      	ldr	r6, [sp, #20]
 8007166:	1ac2      	subs	r2, r0, r3
 8007168:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800716c:	429e      	cmp	r6, r3
 800716e:	bf28      	it	cs
 8007170:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007174:	4912      	ldr	r1, [pc, #72]	; (80071c0 <_scanf_float+0x418>)
 8007176:	4630      	mov	r0, r6
 8007178:	f000 f82c 	bl	80071d4 <siprintf>
 800717c:	e7d0      	b.n	8007120 <_scanf_float+0x378>
 800717e:	9903      	ldr	r1, [sp, #12]
 8007180:	f012 0f04 	tst.w	r2, #4
 8007184:	f103 0204 	add.w	r2, r3, #4
 8007188:	600a      	str	r2, [r1, #0]
 800718a:	d1d9      	bne.n	8007140 <_scanf_float+0x398>
 800718c:	f8d3 8000 	ldr.w	r8, [r3]
 8007190:	ee10 2a10 	vmov	r2, s0
 8007194:	ee10 0a10 	vmov	r0, s0
 8007198:	463b      	mov	r3, r7
 800719a:	4639      	mov	r1, r7
 800719c:	f7f9 fcd6 	bl	8000b4c <__aeabi_dcmpun>
 80071a0:	b128      	cbz	r0, 80071ae <_scanf_float+0x406>
 80071a2:	4808      	ldr	r0, [pc, #32]	; (80071c4 <_scanf_float+0x41c>)
 80071a4:	f000 f810 	bl	80071c8 <nanf>
 80071a8:	ed88 0a00 	vstr	s0, [r8]
 80071ac:	e7cb      	b.n	8007146 <_scanf_float+0x39e>
 80071ae:	4630      	mov	r0, r6
 80071b0:	4639      	mov	r1, r7
 80071b2:	f7f9 fd29 	bl	8000c08 <__aeabi_d2f>
 80071b6:	f8c8 0000 	str.w	r0, [r8]
 80071ba:	e7c4      	b.n	8007146 <_scanf_float+0x39e>
 80071bc:	2500      	movs	r5, #0
 80071be:	e634      	b.n	8006e2a <_scanf_float+0x82>
 80071c0:	0800ae50 	.word	0x0800ae50
 80071c4:	0800b258 	.word	0x0800b258

080071c8 <nanf>:
 80071c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80071d0 <nanf+0x8>
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	7fc00000 	.word	0x7fc00000

080071d4 <siprintf>:
 80071d4:	b40e      	push	{r1, r2, r3}
 80071d6:	b500      	push	{lr}
 80071d8:	b09c      	sub	sp, #112	; 0x70
 80071da:	ab1d      	add	r3, sp, #116	; 0x74
 80071dc:	9002      	str	r0, [sp, #8]
 80071de:	9006      	str	r0, [sp, #24]
 80071e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071e4:	4809      	ldr	r0, [pc, #36]	; (800720c <siprintf+0x38>)
 80071e6:	9107      	str	r1, [sp, #28]
 80071e8:	9104      	str	r1, [sp, #16]
 80071ea:	4909      	ldr	r1, [pc, #36]	; (8007210 <siprintf+0x3c>)
 80071ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80071f0:	9105      	str	r1, [sp, #20]
 80071f2:	6800      	ldr	r0, [r0, #0]
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	a902      	add	r1, sp, #8
 80071f8:	f002 fee4 	bl	8009fc4 <_svfiprintf_r>
 80071fc:	9b02      	ldr	r3, [sp, #8]
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	b01c      	add	sp, #112	; 0x70
 8007204:	f85d eb04 	ldr.w	lr, [sp], #4
 8007208:	b003      	add	sp, #12
 800720a:	4770      	bx	lr
 800720c:	20000020 	.word	0x20000020
 8007210:	ffff0208 	.word	0xffff0208

08007214 <sulp>:
 8007214:	b570      	push	{r4, r5, r6, lr}
 8007216:	4604      	mov	r4, r0
 8007218:	460d      	mov	r5, r1
 800721a:	ec45 4b10 	vmov	d0, r4, r5
 800721e:	4616      	mov	r6, r2
 8007220:	f002 fc2e 	bl	8009a80 <__ulp>
 8007224:	ec51 0b10 	vmov	r0, r1, d0
 8007228:	b17e      	cbz	r6, 800724a <sulp+0x36>
 800722a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800722e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007232:	2b00      	cmp	r3, #0
 8007234:	dd09      	ble.n	800724a <sulp+0x36>
 8007236:	051b      	lsls	r3, r3, #20
 8007238:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800723c:	2400      	movs	r4, #0
 800723e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007242:	4622      	mov	r2, r4
 8007244:	462b      	mov	r3, r5
 8007246:	f7f9 f9e7 	bl	8000618 <__aeabi_dmul>
 800724a:	bd70      	pop	{r4, r5, r6, pc}
 800724c:	0000      	movs	r0, r0
	...

08007250 <_strtod_l>:
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	ed2d 8b02 	vpush	{d8}
 8007258:	b09d      	sub	sp, #116	; 0x74
 800725a:	461f      	mov	r7, r3
 800725c:	2300      	movs	r3, #0
 800725e:	9318      	str	r3, [sp, #96]	; 0x60
 8007260:	4ba2      	ldr	r3, [pc, #648]	; (80074ec <_strtod_l+0x29c>)
 8007262:	9213      	str	r2, [sp, #76]	; 0x4c
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	9305      	str	r3, [sp, #20]
 8007268:	4604      	mov	r4, r0
 800726a:	4618      	mov	r0, r3
 800726c:	4688      	mov	r8, r1
 800726e:	f7f8 ffbf 	bl	80001f0 <strlen>
 8007272:	f04f 0a00 	mov.w	sl, #0
 8007276:	4605      	mov	r5, r0
 8007278:	f04f 0b00 	mov.w	fp, #0
 800727c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007282:	781a      	ldrb	r2, [r3, #0]
 8007284:	2a2b      	cmp	r2, #43	; 0x2b
 8007286:	d04e      	beq.n	8007326 <_strtod_l+0xd6>
 8007288:	d83b      	bhi.n	8007302 <_strtod_l+0xb2>
 800728a:	2a0d      	cmp	r2, #13
 800728c:	d834      	bhi.n	80072f8 <_strtod_l+0xa8>
 800728e:	2a08      	cmp	r2, #8
 8007290:	d834      	bhi.n	80072fc <_strtod_l+0xac>
 8007292:	2a00      	cmp	r2, #0
 8007294:	d03e      	beq.n	8007314 <_strtod_l+0xc4>
 8007296:	2300      	movs	r3, #0
 8007298:	930a      	str	r3, [sp, #40]	; 0x28
 800729a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800729c:	7833      	ldrb	r3, [r6, #0]
 800729e:	2b30      	cmp	r3, #48	; 0x30
 80072a0:	f040 80b0 	bne.w	8007404 <_strtod_l+0x1b4>
 80072a4:	7873      	ldrb	r3, [r6, #1]
 80072a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80072aa:	2b58      	cmp	r3, #88	; 0x58
 80072ac:	d168      	bne.n	8007380 <_strtod_l+0x130>
 80072ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	ab18      	add	r3, sp, #96	; 0x60
 80072b4:	9702      	str	r7, [sp, #8]
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	4a8d      	ldr	r2, [pc, #564]	; (80074f0 <_strtod_l+0x2a0>)
 80072ba:	ab19      	add	r3, sp, #100	; 0x64
 80072bc:	a917      	add	r1, sp, #92	; 0x5c
 80072be:	4620      	mov	r0, r4
 80072c0:	f001 fd38 	bl	8008d34 <__gethex>
 80072c4:	f010 0707 	ands.w	r7, r0, #7
 80072c8:	4605      	mov	r5, r0
 80072ca:	d005      	beq.n	80072d8 <_strtod_l+0x88>
 80072cc:	2f06      	cmp	r7, #6
 80072ce:	d12c      	bne.n	800732a <_strtod_l+0xda>
 80072d0:	3601      	adds	r6, #1
 80072d2:	2300      	movs	r3, #0
 80072d4:	9617      	str	r6, [sp, #92]	; 0x5c
 80072d6:	930a      	str	r3, [sp, #40]	; 0x28
 80072d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f040 8590 	bne.w	8007e00 <_strtod_l+0xbb0>
 80072e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e2:	b1eb      	cbz	r3, 8007320 <_strtod_l+0xd0>
 80072e4:	4652      	mov	r2, sl
 80072e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80072ea:	ec43 2b10 	vmov	d0, r2, r3
 80072ee:	b01d      	add	sp, #116	; 0x74
 80072f0:	ecbd 8b02 	vpop	{d8}
 80072f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f8:	2a20      	cmp	r2, #32
 80072fa:	d1cc      	bne.n	8007296 <_strtod_l+0x46>
 80072fc:	3301      	adds	r3, #1
 80072fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8007300:	e7be      	b.n	8007280 <_strtod_l+0x30>
 8007302:	2a2d      	cmp	r2, #45	; 0x2d
 8007304:	d1c7      	bne.n	8007296 <_strtod_l+0x46>
 8007306:	2201      	movs	r2, #1
 8007308:	920a      	str	r2, [sp, #40]	; 0x28
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	9217      	str	r2, [sp, #92]	; 0x5c
 800730e:	785b      	ldrb	r3, [r3, #1]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1c2      	bne.n	800729a <_strtod_l+0x4a>
 8007314:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007316:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800731a:	2b00      	cmp	r3, #0
 800731c:	f040 856e 	bne.w	8007dfc <_strtod_l+0xbac>
 8007320:	4652      	mov	r2, sl
 8007322:	465b      	mov	r3, fp
 8007324:	e7e1      	b.n	80072ea <_strtod_l+0x9a>
 8007326:	2200      	movs	r2, #0
 8007328:	e7ee      	b.n	8007308 <_strtod_l+0xb8>
 800732a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800732c:	b13a      	cbz	r2, 800733e <_strtod_l+0xee>
 800732e:	2135      	movs	r1, #53	; 0x35
 8007330:	a81a      	add	r0, sp, #104	; 0x68
 8007332:	f002 fcb0 	bl	8009c96 <__copybits>
 8007336:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007338:	4620      	mov	r0, r4
 800733a:	f002 f86f 	bl	800941c <_Bfree>
 800733e:	3f01      	subs	r7, #1
 8007340:	2f04      	cmp	r7, #4
 8007342:	d806      	bhi.n	8007352 <_strtod_l+0x102>
 8007344:	e8df f007 	tbb	[pc, r7]
 8007348:	1714030a 	.word	0x1714030a
 800734c:	0a          	.byte	0x0a
 800734d:	00          	.byte	0x00
 800734e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007352:	0728      	lsls	r0, r5, #28
 8007354:	d5c0      	bpl.n	80072d8 <_strtod_l+0x88>
 8007356:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800735a:	e7bd      	b.n	80072d8 <_strtod_l+0x88>
 800735c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007360:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007362:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007366:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800736a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800736e:	e7f0      	b.n	8007352 <_strtod_l+0x102>
 8007370:	f8df b180 	ldr.w	fp, [pc, #384]	; 80074f4 <_strtod_l+0x2a4>
 8007374:	e7ed      	b.n	8007352 <_strtod_l+0x102>
 8007376:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800737a:	f04f 3aff 	mov.w	sl, #4294967295
 800737e:	e7e8      	b.n	8007352 <_strtod_l+0x102>
 8007380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	9217      	str	r2, [sp, #92]	; 0x5c
 8007386:	785b      	ldrb	r3, [r3, #1]
 8007388:	2b30      	cmp	r3, #48	; 0x30
 800738a:	d0f9      	beq.n	8007380 <_strtod_l+0x130>
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0a3      	beq.n	80072d8 <_strtod_l+0x88>
 8007390:	2301      	movs	r3, #1
 8007392:	f04f 0900 	mov.w	r9, #0
 8007396:	9304      	str	r3, [sp, #16]
 8007398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800739a:	9308      	str	r3, [sp, #32]
 800739c:	f8cd 901c 	str.w	r9, [sp, #28]
 80073a0:	464f      	mov	r7, r9
 80073a2:	220a      	movs	r2, #10
 80073a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80073a6:	7806      	ldrb	r6, [r0, #0]
 80073a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80073ac:	b2d9      	uxtb	r1, r3
 80073ae:	2909      	cmp	r1, #9
 80073b0:	d92a      	bls.n	8007408 <_strtod_l+0x1b8>
 80073b2:	9905      	ldr	r1, [sp, #20]
 80073b4:	462a      	mov	r2, r5
 80073b6:	f002 ff1f 	bl	800a1f8 <strncmp>
 80073ba:	b398      	cbz	r0, 8007424 <_strtod_l+0x1d4>
 80073bc:	2000      	movs	r0, #0
 80073be:	4632      	mov	r2, r6
 80073c0:	463d      	mov	r5, r7
 80073c2:	9005      	str	r0, [sp, #20]
 80073c4:	4603      	mov	r3, r0
 80073c6:	2a65      	cmp	r2, #101	; 0x65
 80073c8:	d001      	beq.n	80073ce <_strtod_l+0x17e>
 80073ca:	2a45      	cmp	r2, #69	; 0x45
 80073cc:	d118      	bne.n	8007400 <_strtod_l+0x1b0>
 80073ce:	b91d      	cbnz	r5, 80073d8 <_strtod_l+0x188>
 80073d0:	9a04      	ldr	r2, [sp, #16]
 80073d2:	4302      	orrs	r2, r0
 80073d4:	d09e      	beq.n	8007314 <_strtod_l+0xc4>
 80073d6:	2500      	movs	r5, #0
 80073d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80073dc:	f108 0201 	add.w	r2, r8, #1
 80073e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80073e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80073e6:	2a2b      	cmp	r2, #43	; 0x2b
 80073e8:	d075      	beq.n	80074d6 <_strtod_l+0x286>
 80073ea:	2a2d      	cmp	r2, #45	; 0x2d
 80073ec:	d07b      	beq.n	80074e6 <_strtod_l+0x296>
 80073ee:	f04f 0c00 	mov.w	ip, #0
 80073f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80073f6:	2909      	cmp	r1, #9
 80073f8:	f240 8082 	bls.w	8007500 <_strtod_l+0x2b0>
 80073fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007400:	2600      	movs	r6, #0
 8007402:	e09d      	b.n	8007540 <_strtod_l+0x2f0>
 8007404:	2300      	movs	r3, #0
 8007406:	e7c4      	b.n	8007392 <_strtod_l+0x142>
 8007408:	2f08      	cmp	r7, #8
 800740a:	bfd8      	it	le
 800740c:	9907      	ldrle	r1, [sp, #28]
 800740e:	f100 0001 	add.w	r0, r0, #1
 8007412:	bfda      	itte	le
 8007414:	fb02 3301 	mlale	r3, r2, r1, r3
 8007418:	9307      	strle	r3, [sp, #28]
 800741a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800741e:	3701      	adds	r7, #1
 8007420:	9017      	str	r0, [sp, #92]	; 0x5c
 8007422:	e7bf      	b.n	80073a4 <_strtod_l+0x154>
 8007424:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007426:	195a      	adds	r2, r3, r5
 8007428:	9217      	str	r2, [sp, #92]	; 0x5c
 800742a:	5d5a      	ldrb	r2, [r3, r5]
 800742c:	2f00      	cmp	r7, #0
 800742e:	d037      	beq.n	80074a0 <_strtod_l+0x250>
 8007430:	9005      	str	r0, [sp, #20]
 8007432:	463d      	mov	r5, r7
 8007434:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007438:	2b09      	cmp	r3, #9
 800743a:	d912      	bls.n	8007462 <_strtod_l+0x212>
 800743c:	2301      	movs	r3, #1
 800743e:	e7c2      	b.n	80073c6 <_strtod_l+0x176>
 8007440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	9217      	str	r2, [sp, #92]	; 0x5c
 8007446:	785a      	ldrb	r2, [r3, #1]
 8007448:	3001      	adds	r0, #1
 800744a:	2a30      	cmp	r2, #48	; 0x30
 800744c:	d0f8      	beq.n	8007440 <_strtod_l+0x1f0>
 800744e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007452:	2b08      	cmp	r3, #8
 8007454:	f200 84d9 	bhi.w	8007e0a <_strtod_l+0xbba>
 8007458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800745a:	9005      	str	r0, [sp, #20]
 800745c:	2000      	movs	r0, #0
 800745e:	9308      	str	r3, [sp, #32]
 8007460:	4605      	mov	r5, r0
 8007462:	3a30      	subs	r2, #48	; 0x30
 8007464:	f100 0301 	add.w	r3, r0, #1
 8007468:	d014      	beq.n	8007494 <_strtod_l+0x244>
 800746a:	9905      	ldr	r1, [sp, #20]
 800746c:	4419      	add	r1, r3
 800746e:	9105      	str	r1, [sp, #20]
 8007470:	462b      	mov	r3, r5
 8007472:	eb00 0e05 	add.w	lr, r0, r5
 8007476:	210a      	movs	r1, #10
 8007478:	4573      	cmp	r3, lr
 800747a:	d113      	bne.n	80074a4 <_strtod_l+0x254>
 800747c:	182b      	adds	r3, r5, r0
 800747e:	2b08      	cmp	r3, #8
 8007480:	f105 0501 	add.w	r5, r5, #1
 8007484:	4405      	add	r5, r0
 8007486:	dc1c      	bgt.n	80074c2 <_strtod_l+0x272>
 8007488:	9907      	ldr	r1, [sp, #28]
 800748a:	230a      	movs	r3, #10
 800748c:	fb03 2301 	mla	r3, r3, r1, r2
 8007490:	9307      	str	r3, [sp, #28]
 8007492:	2300      	movs	r3, #0
 8007494:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007496:	1c51      	adds	r1, r2, #1
 8007498:	9117      	str	r1, [sp, #92]	; 0x5c
 800749a:	7852      	ldrb	r2, [r2, #1]
 800749c:	4618      	mov	r0, r3
 800749e:	e7c9      	b.n	8007434 <_strtod_l+0x1e4>
 80074a0:	4638      	mov	r0, r7
 80074a2:	e7d2      	b.n	800744a <_strtod_l+0x1fa>
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	dc04      	bgt.n	80074b2 <_strtod_l+0x262>
 80074a8:	9e07      	ldr	r6, [sp, #28]
 80074aa:	434e      	muls	r6, r1
 80074ac:	9607      	str	r6, [sp, #28]
 80074ae:	3301      	adds	r3, #1
 80074b0:	e7e2      	b.n	8007478 <_strtod_l+0x228>
 80074b2:	f103 0c01 	add.w	ip, r3, #1
 80074b6:	f1bc 0f10 	cmp.w	ip, #16
 80074ba:	bfd8      	it	le
 80074bc:	fb01 f909 	mulle.w	r9, r1, r9
 80074c0:	e7f5      	b.n	80074ae <_strtod_l+0x25e>
 80074c2:	2d10      	cmp	r5, #16
 80074c4:	bfdc      	itt	le
 80074c6:	230a      	movle	r3, #10
 80074c8:	fb03 2909 	mlale	r9, r3, r9, r2
 80074cc:	e7e1      	b.n	8007492 <_strtod_l+0x242>
 80074ce:	2300      	movs	r3, #0
 80074d0:	9305      	str	r3, [sp, #20]
 80074d2:	2301      	movs	r3, #1
 80074d4:	e77c      	b.n	80073d0 <_strtod_l+0x180>
 80074d6:	f04f 0c00 	mov.w	ip, #0
 80074da:	f108 0202 	add.w	r2, r8, #2
 80074de:	9217      	str	r2, [sp, #92]	; 0x5c
 80074e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80074e4:	e785      	b.n	80073f2 <_strtod_l+0x1a2>
 80074e6:	f04f 0c01 	mov.w	ip, #1
 80074ea:	e7f6      	b.n	80074da <_strtod_l+0x28a>
 80074ec:	0800b0a0 	.word	0x0800b0a0
 80074f0:	0800ae58 	.word	0x0800ae58
 80074f4:	7ff00000 	.word	0x7ff00000
 80074f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074fa:	1c51      	adds	r1, r2, #1
 80074fc:	9117      	str	r1, [sp, #92]	; 0x5c
 80074fe:	7852      	ldrb	r2, [r2, #1]
 8007500:	2a30      	cmp	r2, #48	; 0x30
 8007502:	d0f9      	beq.n	80074f8 <_strtod_l+0x2a8>
 8007504:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007508:	2908      	cmp	r1, #8
 800750a:	f63f af79 	bhi.w	8007400 <_strtod_l+0x1b0>
 800750e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007512:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007514:	9206      	str	r2, [sp, #24]
 8007516:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007518:	1c51      	adds	r1, r2, #1
 800751a:	9117      	str	r1, [sp, #92]	; 0x5c
 800751c:	7852      	ldrb	r2, [r2, #1]
 800751e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007522:	2e09      	cmp	r6, #9
 8007524:	d937      	bls.n	8007596 <_strtod_l+0x346>
 8007526:	9e06      	ldr	r6, [sp, #24]
 8007528:	1b89      	subs	r1, r1, r6
 800752a:	2908      	cmp	r1, #8
 800752c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007530:	dc02      	bgt.n	8007538 <_strtod_l+0x2e8>
 8007532:	4576      	cmp	r6, lr
 8007534:	bfa8      	it	ge
 8007536:	4676      	movge	r6, lr
 8007538:	f1bc 0f00 	cmp.w	ip, #0
 800753c:	d000      	beq.n	8007540 <_strtod_l+0x2f0>
 800753e:	4276      	negs	r6, r6
 8007540:	2d00      	cmp	r5, #0
 8007542:	d14d      	bne.n	80075e0 <_strtod_l+0x390>
 8007544:	9904      	ldr	r1, [sp, #16]
 8007546:	4301      	orrs	r1, r0
 8007548:	f47f aec6 	bne.w	80072d8 <_strtod_l+0x88>
 800754c:	2b00      	cmp	r3, #0
 800754e:	f47f aee1 	bne.w	8007314 <_strtod_l+0xc4>
 8007552:	2a69      	cmp	r2, #105	; 0x69
 8007554:	d027      	beq.n	80075a6 <_strtod_l+0x356>
 8007556:	dc24      	bgt.n	80075a2 <_strtod_l+0x352>
 8007558:	2a49      	cmp	r2, #73	; 0x49
 800755a:	d024      	beq.n	80075a6 <_strtod_l+0x356>
 800755c:	2a4e      	cmp	r2, #78	; 0x4e
 800755e:	f47f aed9 	bne.w	8007314 <_strtod_l+0xc4>
 8007562:	499f      	ldr	r1, [pc, #636]	; (80077e0 <_strtod_l+0x590>)
 8007564:	a817      	add	r0, sp, #92	; 0x5c
 8007566:	f001 fe3d 	bl	80091e4 <__match>
 800756a:	2800      	cmp	r0, #0
 800756c:	f43f aed2 	beq.w	8007314 <_strtod_l+0xc4>
 8007570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b28      	cmp	r3, #40	; 0x28
 8007576:	d12d      	bne.n	80075d4 <_strtod_l+0x384>
 8007578:	499a      	ldr	r1, [pc, #616]	; (80077e4 <_strtod_l+0x594>)
 800757a:	aa1a      	add	r2, sp, #104	; 0x68
 800757c:	a817      	add	r0, sp, #92	; 0x5c
 800757e:	f001 fe45 	bl	800920c <__hexnan>
 8007582:	2805      	cmp	r0, #5
 8007584:	d126      	bne.n	80075d4 <_strtod_l+0x384>
 8007586:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007588:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800758c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007590:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007594:	e6a0      	b.n	80072d8 <_strtod_l+0x88>
 8007596:	210a      	movs	r1, #10
 8007598:	fb01 2e0e 	mla	lr, r1, lr, r2
 800759c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80075a0:	e7b9      	b.n	8007516 <_strtod_l+0x2c6>
 80075a2:	2a6e      	cmp	r2, #110	; 0x6e
 80075a4:	e7db      	b.n	800755e <_strtod_l+0x30e>
 80075a6:	4990      	ldr	r1, [pc, #576]	; (80077e8 <_strtod_l+0x598>)
 80075a8:	a817      	add	r0, sp, #92	; 0x5c
 80075aa:	f001 fe1b 	bl	80091e4 <__match>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	f43f aeb0 	beq.w	8007314 <_strtod_l+0xc4>
 80075b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075b6:	498d      	ldr	r1, [pc, #564]	; (80077ec <_strtod_l+0x59c>)
 80075b8:	3b01      	subs	r3, #1
 80075ba:	a817      	add	r0, sp, #92	; 0x5c
 80075bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80075be:	f001 fe11 	bl	80091e4 <__match>
 80075c2:	b910      	cbnz	r0, 80075ca <_strtod_l+0x37a>
 80075c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075c6:	3301      	adds	r3, #1
 80075c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80075ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 80077fc <_strtod_l+0x5ac>
 80075ce:	f04f 0a00 	mov.w	sl, #0
 80075d2:	e681      	b.n	80072d8 <_strtod_l+0x88>
 80075d4:	4886      	ldr	r0, [pc, #536]	; (80077f0 <_strtod_l+0x5a0>)
 80075d6:	f002 fdf7 	bl	800a1c8 <nan>
 80075da:	ec5b ab10 	vmov	sl, fp, d0
 80075de:	e67b      	b.n	80072d8 <_strtod_l+0x88>
 80075e0:	9b05      	ldr	r3, [sp, #20]
 80075e2:	9807      	ldr	r0, [sp, #28]
 80075e4:	1af3      	subs	r3, r6, r3
 80075e6:	2f00      	cmp	r7, #0
 80075e8:	bf08      	it	eq
 80075ea:	462f      	moveq	r7, r5
 80075ec:	2d10      	cmp	r5, #16
 80075ee:	9306      	str	r3, [sp, #24]
 80075f0:	46a8      	mov	r8, r5
 80075f2:	bfa8      	it	ge
 80075f4:	f04f 0810 	movge.w	r8, #16
 80075f8:	f7f8 ff94 	bl	8000524 <__aeabi_ui2d>
 80075fc:	2d09      	cmp	r5, #9
 80075fe:	4682      	mov	sl, r0
 8007600:	468b      	mov	fp, r1
 8007602:	dd13      	ble.n	800762c <_strtod_l+0x3dc>
 8007604:	4b7b      	ldr	r3, [pc, #492]	; (80077f4 <_strtod_l+0x5a4>)
 8007606:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800760a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800760e:	f7f9 f803 	bl	8000618 <__aeabi_dmul>
 8007612:	4682      	mov	sl, r0
 8007614:	4648      	mov	r0, r9
 8007616:	468b      	mov	fp, r1
 8007618:	f7f8 ff84 	bl	8000524 <__aeabi_ui2d>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4650      	mov	r0, sl
 8007622:	4659      	mov	r1, fp
 8007624:	f7f8 fe42 	bl	80002ac <__adddf3>
 8007628:	4682      	mov	sl, r0
 800762a:	468b      	mov	fp, r1
 800762c:	2d0f      	cmp	r5, #15
 800762e:	dc38      	bgt.n	80076a2 <_strtod_l+0x452>
 8007630:	9b06      	ldr	r3, [sp, #24]
 8007632:	2b00      	cmp	r3, #0
 8007634:	f43f ae50 	beq.w	80072d8 <_strtod_l+0x88>
 8007638:	dd24      	ble.n	8007684 <_strtod_l+0x434>
 800763a:	2b16      	cmp	r3, #22
 800763c:	dc0b      	bgt.n	8007656 <_strtod_l+0x406>
 800763e:	496d      	ldr	r1, [pc, #436]	; (80077f4 <_strtod_l+0x5a4>)
 8007640:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007648:	4652      	mov	r2, sl
 800764a:	465b      	mov	r3, fp
 800764c:	f7f8 ffe4 	bl	8000618 <__aeabi_dmul>
 8007650:	4682      	mov	sl, r0
 8007652:	468b      	mov	fp, r1
 8007654:	e640      	b.n	80072d8 <_strtod_l+0x88>
 8007656:	9a06      	ldr	r2, [sp, #24]
 8007658:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800765c:	4293      	cmp	r3, r2
 800765e:	db20      	blt.n	80076a2 <_strtod_l+0x452>
 8007660:	4c64      	ldr	r4, [pc, #400]	; (80077f4 <_strtod_l+0x5a4>)
 8007662:	f1c5 050f 	rsb	r5, r5, #15
 8007666:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800766a:	4652      	mov	r2, sl
 800766c:	465b      	mov	r3, fp
 800766e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007672:	f7f8 ffd1 	bl	8000618 <__aeabi_dmul>
 8007676:	9b06      	ldr	r3, [sp, #24]
 8007678:	1b5d      	subs	r5, r3, r5
 800767a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800767e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007682:	e7e3      	b.n	800764c <_strtod_l+0x3fc>
 8007684:	9b06      	ldr	r3, [sp, #24]
 8007686:	3316      	adds	r3, #22
 8007688:	db0b      	blt.n	80076a2 <_strtod_l+0x452>
 800768a:	9b05      	ldr	r3, [sp, #20]
 800768c:	1b9e      	subs	r6, r3, r6
 800768e:	4b59      	ldr	r3, [pc, #356]	; (80077f4 <_strtod_l+0x5a4>)
 8007690:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007694:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007698:	4650      	mov	r0, sl
 800769a:	4659      	mov	r1, fp
 800769c:	f7f9 f8e6 	bl	800086c <__aeabi_ddiv>
 80076a0:	e7d6      	b.n	8007650 <_strtod_l+0x400>
 80076a2:	9b06      	ldr	r3, [sp, #24]
 80076a4:	eba5 0808 	sub.w	r8, r5, r8
 80076a8:	4498      	add	r8, r3
 80076aa:	f1b8 0f00 	cmp.w	r8, #0
 80076ae:	dd74      	ble.n	800779a <_strtod_l+0x54a>
 80076b0:	f018 030f 	ands.w	r3, r8, #15
 80076b4:	d00a      	beq.n	80076cc <_strtod_l+0x47c>
 80076b6:	494f      	ldr	r1, [pc, #316]	; (80077f4 <_strtod_l+0x5a4>)
 80076b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076bc:	4652      	mov	r2, sl
 80076be:	465b      	mov	r3, fp
 80076c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076c4:	f7f8 ffa8 	bl	8000618 <__aeabi_dmul>
 80076c8:	4682      	mov	sl, r0
 80076ca:	468b      	mov	fp, r1
 80076cc:	f038 080f 	bics.w	r8, r8, #15
 80076d0:	d04f      	beq.n	8007772 <_strtod_l+0x522>
 80076d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80076d6:	dd22      	ble.n	800771e <_strtod_l+0x4ce>
 80076d8:	2500      	movs	r5, #0
 80076da:	462e      	mov	r6, r5
 80076dc:	9507      	str	r5, [sp, #28]
 80076de:	9505      	str	r5, [sp, #20]
 80076e0:	2322      	movs	r3, #34	; 0x22
 80076e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80077fc <_strtod_l+0x5ac>
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	f04f 0a00 	mov.w	sl, #0
 80076ec:	9b07      	ldr	r3, [sp, #28]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f43f adf2 	beq.w	80072d8 <_strtod_l+0x88>
 80076f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076f6:	4620      	mov	r0, r4
 80076f8:	f001 fe90 	bl	800941c <_Bfree>
 80076fc:	9905      	ldr	r1, [sp, #20]
 80076fe:	4620      	mov	r0, r4
 8007700:	f001 fe8c 	bl	800941c <_Bfree>
 8007704:	4631      	mov	r1, r6
 8007706:	4620      	mov	r0, r4
 8007708:	f001 fe88 	bl	800941c <_Bfree>
 800770c:	9907      	ldr	r1, [sp, #28]
 800770e:	4620      	mov	r0, r4
 8007710:	f001 fe84 	bl	800941c <_Bfree>
 8007714:	4629      	mov	r1, r5
 8007716:	4620      	mov	r0, r4
 8007718:	f001 fe80 	bl	800941c <_Bfree>
 800771c:	e5dc      	b.n	80072d8 <_strtod_l+0x88>
 800771e:	4b36      	ldr	r3, [pc, #216]	; (80077f8 <_strtod_l+0x5a8>)
 8007720:	9304      	str	r3, [sp, #16]
 8007722:	2300      	movs	r3, #0
 8007724:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007728:	4650      	mov	r0, sl
 800772a:	4659      	mov	r1, fp
 800772c:	4699      	mov	r9, r3
 800772e:	f1b8 0f01 	cmp.w	r8, #1
 8007732:	dc21      	bgt.n	8007778 <_strtod_l+0x528>
 8007734:	b10b      	cbz	r3, 800773a <_strtod_l+0x4ea>
 8007736:	4682      	mov	sl, r0
 8007738:	468b      	mov	fp, r1
 800773a:	4b2f      	ldr	r3, [pc, #188]	; (80077f8 <_strtod_l+0x5a8>)
 800773c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007740:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007744:	4652      	mov	r2, sl
 8007746:	465b      	mov	r3, fp
 8007748:	e9d9 0100 	ldrd	r0, r1, [r9]
 800774c:	f7f8 ff64 	bl	8000618 <__aeabi_dmul>
 8007750:	4b2a      	ldr	r3, [pc, #168]	; (80077fc <_strtod_l+0x5ac>)
 8007752:	460a      	mov	r2, r1
 8007754:	400b      	ands	r3, r1
 8007756:	492a      	ldr	r1, [pc, #168]	; (8007800 <_strtod_l+0x5b0>)
 8007758:	428b      	cmp	r3, r1
 800775a:	4682      	mov	sl, r0
 800775c:	d8bc      	bhi.n	80076d8 <_strtod_l+0x488>
 800775e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007762:	428b      	cmp	r3, r1
 8007764:	bf86      	itte	hi
 8007766:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007804 <_strtod_l+0x5b4>
 800776a:	f04f 3aff 	movhi.w	sl, #4294967295
 800776e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007772:	2300      	movs	r3, #0
 8007774:	9304      	str	r3, [sp, #16]
 8007776:	e084      	b.n	8007882 <_strtod_l+0x632>
 8007778:	f018 0f01 	tst.w	r8, #1
 800777c:	d005      	beq.n	800778a <_strtod_l+0x53a>
 800777e:	9b04      	ldr	r3, [sp, #16]
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f7f8 ff48 	bl	8000618 <__aeabi_dmul>
 8007788:	2301      	movs	r3, #1
 800778a:	9a04      	ldr	r2, [sp, #16]
 800778c:	3208      	adds	r2, #8
 800778e:	f109 0901 	add.w	r9, r9, #1
 8007792:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007796:	9204      	str	r2, [sp, #16]
 8007798:	e7c9      	b.n	800772e <_strtod_l+0x4de>
 800779a:	d0ea      	beq.n	8007772 <_strtod_l+0x522>
 800779c:	f1c8 0800 	rsb	r8, r8, #0
 80077a0:	f018 020f 	ands.w	r2, r8, #15
 80077a4:	d00a      	beq.n	80077bc <_strtod_l+0x56c>
 80077a6:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <_strtod_l+0x5a4>)
 80077a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077ac:	4650      	mov	r0, sl
 80077ae:	4659      	mov	r1, fp
 80077b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b4:	f7f9 f85a 	bl	800086c <__aeabi_ddiv>
 80077b8:	4682      	mov	sl, r0
 80077ba:	468b      	mov	fp, r1
 80077bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80077c0:	d0d7      	beq.n	8007772 <_strtod_l+0x522>
 80077c2:	f1b8 0f1f 	cmp.w	r8, #31
 80077c6:	dd1f      	ble.n	8007808 <_strtod_l+0x5b8>
 80077c8:	2500      	movs	r5, #0
 80077ca:	462e      	mov	r6, r5
 80077cc:	9507      	str	r5, [sp, #28]
 80077ce:	9505      	str	r5, [sp, #20]
 80077d0:	2322      	movs	r3, #34	; 0x22
 80077d2:	f04f 0a00 	mov.w	sl, #0
 80077d6:	f04f 0b00 	mov.w	fp, #0
 80077da:	6023      	str	r3, [r4, #0]
 80077dc:	e786      	b.n	80076ec <_strtod_l+0x49c>
 80077de:	bf00      	nop
 80077e0:	0800ae29 	.word	0x0800ae29
 80077e4:	0800ae6c 	.word	0x0800ae6c
 80077e8:	0800ae21 	.word	0x0800ae21
 80077ec:	0800afac 	.word	0x0800afac
 80077f0:	0800b258 	.word	0x0800b258
 80077f4:	0800b138 	.word	0x0800b138
 80077f8:	0800b110 	.word	0x0800b110
 80077fc:	7ff00000 	.word	0x7ff00000
 8007800:	7ca00000 	.word	0x7ca00000
 8007804:	7fefffff 	.word	0x7fefffff
 8007808:	f018 0310 	ands.w	r3, r8, #16
 800780c:	bf18      	it	ne
 800780e:	236a      	movne	r3, #106	; 0x6a
 8007810:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007bc0 <_strtod_l+0x970>
 8007814:	9304      	str	r3, [sp, #16]
 8007816:	4650      	mov	r0, sl
 8007818:	4659      	mov	r1, fp
 800781a:	2300      	movs	r3, #0
 800781c:	f018 0f01 	tst.w	r8, #1
 8007820:	d004      	beq.n	800782c <_strtod_l+0x5dc>
 8007822:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007826:	f7f8 fef7 	bl	8000618 <__aeabi_dmul>
 800782a:	2301      	movs	r3, #1
 800782c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007830:	f109 0908 	add.w	r9, r9, #8
 8007834:	d1f2      	bne.n	800781c <_strtod_l+0x5cc>
 8007836:	b10b      	cbz	r3, 800783c <_strtod_l+0x5ec>
 8007838:	4682      	mov	sl, r0
 800783a:	468b      	mov	fp, r1
 800783c:	9b04      	ldr	r3, [sp, #16]
 800783e:	b1c3      	cbz	r3, 8007872 <_strtod_l+0x622>
 8007840:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007844:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007848:	2b00      	cmp	r3, #0
 800784a:	4659      	mov	r1, fp
 800784c:	dd11      	ble.n	8007872 <_strtod_l+0x622>
 800784e:	2b1f      	cmp	r3, #31
 8007850:	f340 8124 	ble.w	8007a9c <_strtod_l+0x84c>
 8007854:	2b34      	cmp	r3, #52	; 0x34
 8007856:	bfde      	ittt	le
 8007858:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800785c:	f04f 33ff 	movle.w	r3, #4294967295
 8007860:	fa03 f202 	lslle.w	r2, r3, r2
 8007864:	f04f 0a00 	mov.w	sl, #0
 8007868:	bfcc      	ite	gt
 800786a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800786e:	ea02 0b01 	andle.w	fp, r2, r1
 8007872:	2200      	movs	r2, #0
 8007874:	2300      	movs	r3, #0
 8007876:	4650      	mov	r0, sl
 8007878:	4659      	mov	r1, fp
 800787a:	f7f9 f935 	bl	8000ae8 <__aeabi_dcmpeq>
 800787e:	2800      	cmp	r0, #0
 8007880:	d1a2      	bne.n	80077c8 <_strtod_l+0x578>
 8007882:	9b07      	ldr	r3, [sp, #28]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	9908      	ldr	r1, [sp, #32]
 8007888:	462b      	mov	r3, r5
 800788a:	463a      	mov	r2, r7
 800788c:	4620      	mov	r0, r4
 800788e:	f001 fe2d 	bl	80094ec <__s2b>
 8007892:	9007      	str	r0, [sp, #28]
 8007894:	2800      	cmp	r0, #0
 8007896:	f43f af1f 	beq.w	80076d8 <_strtod_l+0x488>
 800789a:	9b05      	ldr	r3, [sp, #20]
 800789c:	1b9e      	subs	r6, r3, r6
 800789e:	9b06      	ldr	r3, [sp, #24]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	bfb4      	ite	lt
 80078a4:	4633      	movlt	r3, r6
 80078a6:	2300      	movge	r3, #0
 80078a8:	930c      	str	r3, [sp, #48]	; 0x30
 80078aa:	9b06      	ldr	r3, [sp, #24]
 80078ac:	2500      	movs	r5, #0
 80078ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80078b2:	9312      	str	r3, [sp, #72]	; 0x48
 80078b4:	462e      	mov	r6, r5
 80078b6:	9b07      	ldr	r3, [sp, #28]
 80078b8:	4620      	mov	r0, r4
 80078ba:	6859      	ldr	r1, [r3, #4]
 80078bc:	f001 fd6e 	bl	800939c <_Balloc>
 80078c0:	9005      	str	r0, [sp, #20]
 80078c2:	2800      	cmp	r0, #0
 80078c4:	f43f af0c 	beq.w	80076e0 <_strtod_l+0x490>
 80078c8:	9b07      	ldr	r3, [sp, #28]
 80078ca:	691a      	ldr	r2, [r3, #16]
 80078cc:	3202      	adds	r2, #2
 80078ce:	f103 010c 	add.w	r1, r3, #12
 80078d2:	0092      	lsls	r2, r2, #2
 80078d4:	300c      	adds	r0, #12
 80078d6:	f001 fd53 	bl	8009380 <memcpy>
 80078da:	ec4b ab10 	vmov	d0, sl, fp
 80078de:	aa1a      	add	r2, sp, #104	; 0x68
 80078e0:	a919      	add	r1, sp, #100	; 0x64
 80078e2:	4620      	mov	r0, r4
 80078e4:	f002 f948 	bl	8009b78 <__d2b>
 80078e8:	ec4b ab18 	vmov	d8, sl, fp
 80078ec:	9018      	str	r0, [sp, #96]	; 0x60
 80078ee:	2800      	cmp	r0, #0
 80078f0:	f43f aef6 	beq.w	80076e0 <_strtod_l+0x490>
 80078f4:	2101      	movs	r1, #1
 80078f6:	4620      	mov	r0, r4
 80078f8:	f001 fe92 	bl	8009620 <__i2b>
 80078fc:	4606      	mov	r6, r0
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f aeee 	beq.w	80076e0 <_strtod_l+0x490>
 8007904:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007906:	9904      	ldr	r1, [sp, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	bfab      	itete	ge
 800790c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800790e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007910:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007912:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007916:	bfac      	ite	ge
 8007918:	eb03 0902 	addge.w	r9, r3, r2
 800791c:	1ad7      	sublt	r7, r2, r3
 800791e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007920:	eba3 0801 	sub.w	r8, r3, r1
 8007924:	4490      	add	r8, r2
 8007926:	4ba1      	ldr	r3, [pc, #644]	; (8007bac <_strtod_l+0x95c>)
 8007928:	f108 38ff 	add.w	r8, r8, #4294967295
 800792c:	4598      	cmp	r8, r3
 800792e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007932:	f280 80c7 	bge.w	8007ac4 <_strtod_l+0x874>
 8007936:	eba3 0308 	sub.w	r3, r3, r8
 800793a:	2b1f      	cmp	r3, #31
 800793c:	eba2 0203 	sub.w	r2, r2, r3
 8007940:	f04f 0101 	mov.w	r1, #1
 8007944:	f300 80b1 	bgt.w	8007aaa <_strtod_l+0x85a>
 8007948:	fa01 f303 	lsl.w	r3, r1, r3
 800794c:	930d      	str	r3, [sp, #52]	; 0x34
 800794e:	2300      	movs	r3, #0
 8007950:	9308      	str	r3, [sp, #32]
 8007952:	eb09 0802 	add.w	r8, r9, r2
 8007956:	9b04      	ldr	r3, [sp, #16]
 8007958:	45c1      	cmp	r9, r8
 800795a:	4417      	add	r7, r2
 800795c:	441f      	add	r7, r3
 800795e:	464b      	mov	r3, r9
 8007960:	bfa8      	it	ge
 8007962:	4643      	movge	r3, r8
 8007964:	42bb      	cmp	r3, r7
 8007966:	bfa8      	it	ge
 8007968:	463b      	movge	r3, r7
 800796a:	2b00      	cmp	r3, #0
 800796c:	bfc2      	ittt	gt
 800796e:	eba8 0803 	subgt.w	r8, r8, r3
 8007972:	1aff      	subgt	r7, r7, r3
 8007974:	eba9 0903 	subgt.w	r9, r9, r3
 8007978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800797a:	2b00      	cmp	r3, #0
 800797c:	dd17      	ble.n	80079ae <_strtod_l+0x75e>
 800797e:	4631      	mov	r1, r6
 8007980:	461a      	mov	r2, r3
 8007982:	4620      	mov	r0, r4
 8007984:	f001 ff0c 	bl	80097a0 <__pow5mult>
 8007988:	4606      	mov	r6, r0
 800798a:	2800      	cmp	r0, #0
 800798c:	f43f aea8 	beq.w	80076e0 <_strtod_l+0x490>
 8007990:	4601      	mov	r1, r0
 8007992:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007994:	4620      	mov	r0, r4
 8007996:	f001 fe59 	bl	800964c <__multiply>
 800799a:	900b      	str	r0, [sp, #44]	; 0x2c
 800799c:	2800      	cmp	r0, #0
 800799e:	f43f ae9f 	beq.w	80076e0 <_strtod_l+0x490>
 80079a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80079a4:	4620      	mov	r0, r4
 80079a6:	f001 fd39 	bl	800941c <_Bfree>
 80079aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ac:	9318      	str	r3, [sp, #96]	; 0x60
 80079ae:	f1b8 0f00 	cmp.w	r8, #0
 80079b2:	f300 808c 	bgt.w	8007ace <_strtod_l+0x87e>
 80079b6:	9b06      	ldr	r3, [sp, #24]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	dd08      	ble.n	80079ce <_strtod_l+0x77e>
 80079bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079be:	9905      	ldr	r1, [sp, #20]
 80079c0:	4620      	mov	r0, r4
 80079c2:	f001 feed 	bl	80097a0 <__pow5mult>
 80079c6:	9005      	str	r0, [sp, #20]
 80079c8:	2800      	cmp	r0, #0
 80079ca:	f43f ae89 	beq.w	80076e0 <_strtod_l+0x490>
 80079ce:	2f00      	cmp	r7, #0
 80079d0:	dd08      	ble.n	80079e4 <_strtod_l+0x794>
 80079d2:	9905      	ldr	r1, [sp, #20]
 80079d4:	463a      	mov	r2, r7
 80079d6:	4620      	mov	r0, r4
 80079d8:	f001 ff3c 	bl	8009854 <__lshift>
 80079dc:	9005      	str	r0, [sp, #20]
 80079de:	2800      	cmp	r0, #0
 80079e0:	f43f ae7e 	beq.w	80076e0 <_strtod_l+0x490>
 80079e4:	f1b9 0f00 	cmp.w	r9, #0
 80079e8:	dd08      	ble.n	80079fc <_strtod_l+0x7ac>
 80079ea:	4631      	mov	r1, r6
 80079ec:	464a      	mov	r2, r9
 80079ee:	4620      	mov	r0, r4
 80079f0:	f001 ff30 	bl	8009854 <__lshift>
 80079f4:	4606      	mov	r6, r0
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f43f ae72 	beq.w	80076e0 <_strtod_l+0x490>
 80079fc:	9a05      	ldr	r2, [sp, #20]
 80079fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a00:	4620      	mov	r0, r4
 8007a02:	f001 ffb3 	bl	800996c <__mdiff>
 8007a06:	4605      	mov	r5, r0
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	f43f ae69 	beq.w	80076e0 <_strtod_l+0x490>
 8007a0e:	68c3      	ldr	r3, [r0, #12]
 8007a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a12:	2300      	movs	r3, #0
 8007a14:	60c3      	str	r3, [r0, #12]
 8007a16:	4631      	mov	r1, r6
 8007a18:	f001 ff8c 	bl	8009934 <__mcmp>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	da60      	bge.n	8007ae2 <_strtod_l+0x892>
 8007a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a22:	ea53 030a 	orrs.w	r3, r3, sl
 8007a26:	f040 8082 	bne.w	8007b2e <_strtod_l+0x8de>
 8007a2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d17d      	bne.n	8007b2e <_strtod_l+0x8de>
 8007a32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a36:	0d1b      	lsrs	r3, r3, #20
 8007a38:	051b      	lsls	r3, r3, #20
 8007a3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007a3e:	d976      	bls.n	8007b2e <_strtod_l+0x8de>
 8007a40:	696b      	ldr	r3, [r5, #20]
 8007a42:	b913      	cbnz	r3, 8007a4a <_strtod_l+0x7fa>
 8007a44:	692b      	ldr	r3, [r5, #16]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	dd71      	ble.n	8007b2e <_strtod_l+0x8de>
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f001 ff00 	bl	8009854 <__lshift>
 8007a54:	4631      	mov	r1, r6
 8007a56:	4605      	mov	r5, r0
 8007a58:	f001 ff6c 	bl	8009934 <__mcmp>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	dd66      	ble.n	8007b2e <_strtod_l+0x8de>
 8007a60:	9904      	ldr	r1, [sp, #16]
 8007a62:	4a53      	ldr	r2, [pc, #332]	; (8007bb0 <_strtod_l+0x960>)
 8007a64:	465b      	mov	r3, fp
 8007a66:	2900      	cmp	r1, #0
 8007a68:	f000 8081 	beq.w	8007b6e <_strtod_l+0x91e>
 8007a6c:	ea02 010b 	and.w	r1, r2, fp
 8007a70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007a74:	dc7b      	bgt.n	8007b6e <_strtod_l+0x91e>
 8007a76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007a7a:	f77f aea9 	ble.w	80077d0 <_strtod_l+0x580>
 8007a7e:	4b4d      	ldr	r3, [pc, #308]	; (8007bb4 <_strtod_l+0x964>)
 8007a80:	4650      	mov	r0, sl
 8007a82:	4659      	mov	r1, fp
 8007a84:	2200      	movs	r2, #0
 8007a86:	f7f8 fdc7 	bl	8000618 <__aeabi_dmul>
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4303      	orrs	r3, r0
 8007a8e:	bf08      	it	eq
 8007a90:	2322      	moveq	r3, #34	; 0x22
 8007a92:	4682      	mov	sl, r0
 8007a94:	468b      	mov	fp, r1
 8007a96:	bf08      	it	eq
 8007a98:	6023      	streq	r3, [r4, #0]
 8007a9a:	e62b      	b.n	80076f4 <_strtod_l+0x4a4>
 8007a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa4:	ea03 0a0a 	and.w	sl, r3, sl
 8007aa8:	e6e3      	b.n	8007872 <_strtod_l+0x622>
 8007aaa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007aae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007ab2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007ab6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007aba:	fa01 f308 	lsl.w	r3, r1, r8
 8007abe:	9308      	str	r3, [sp, #32]
 8007ac0:	910d      	str	r1, [sp, #52]	; 0x34
 8007ac2:	e746      	b.n	8007952 <_strtod_l+0x702>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9308      	str	r3, [sp, #32]
 8007ac8:	2301      	movs	r3, #1
 8007aca:	930d      	str	r3, [sp, #52]	; 0x34
 8007acc:	e741      	b.n	8007952 <_strtod_l+0x702>
 8007ace:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f001 febe 	bl	8009854 <__lshift>
 8007ad8:	9018      	str	r0, [sp, #96]	; 0x60
 8007ada:	2800      	cmp	r0, #0
 8007adc:	f47f af6b 	bne.w	80079b6 <_strtod_l+0x766>
 8007ae0:	e5fe      	b.n	80076e0 <_strtod_l+0x490>
 8007ae2:	465f      	mov	r7, fp
 8007ae4:	d16e      	bne.n	8007bc4 <_strtod_l+0x974>
 8007ae6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ae8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007aec:	b342      	cbz	r2, 8007b40 <_strtod_l+0x8f0>
 8007aee:	4a32      	ldr	r2, [pc, #200]	; (8007bb8 <_strtod_l+0x968>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d128      	bne.n	8007b46 <_strtod_l+0x8f6>
 8007af4:	9b04      	ldr	r3, [sp, #16]
 8007af6:	4651      	mov	r1, sl
 8007af8:	b1eb      	cbz	r3, 8007b36 <_strtod_l+0x8e6>
 8007afa:	4b2d      	ldr	r3, [pc, #180]	; (8007bb0 <_strtod_l+0x960>)
 8007afc:	403b      	ands	r3, r7
 8007afe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b02:	f04f 32ff 	mov.w	r2, #4294967295
 8007b06:	d819      	bhi.n	8007b3c <_strtod_l+0x8ec>
 8007b08:	0d1b      	lsrs	r3, r3, #20
 8007b0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b12:	4299      	cmp	r1, r3
 8007b14:	d117      	bne.n	8007b46 <_strtod_l+0x8f6>
 8007b16:	4b29      	ldr	r3, [pc, #164]	; (8007bbc <_strtod_l+0x96c>)
 8007b18:	429f      	cmp	r7, r3
 8007b1a:	d102      	bne.n	8007b22 <_strtod_l+0x8d2>
 8007b1c:	3101      	adds	r1, #1
 8007b1e:	f43f addf 	beq.w	80076e0 <_strtod_l+0x490>
 8007b22:	4b23      	ldr	r3, [pc, #140]	; (8007bb0 <_strtod_l+0x960>)
 8007b24:	403b      	ands	r3, r7
 8007b26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007b2a:	f04f 0a00 	mov.w	sl, #0
 8007b2e:	9b04      	ldr	r3, [sp, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1a4      	bne.n	8007a7e <_strtod_l+0x82e>
 8007b34:	e5de      	b.n	80076f4 <_strtod_l+0x4a4>
 8007b36:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3a:	e7ea      	b.n	8007b12 <_strtod_l+0x8c2>
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	e7e8      	b.n	8007b12 <_strtod_l+0x8c2>
 8007b40:	ea53 030a 	orrs.w	r3, r3, sl
 8007b44:	d08c      	beq.n	8007a60 <_strtod_l+0x810>
 8007b46:	9b08      	ldr	r3, [sp, #32]
 8007b48:	b1db      	cbz	r3, 8007b82 <_strtod_l+0x932>
 8007b4a:	423b      	tst	r3, r7
 8007b4c:	d0ef      	beq.n	8007b2e <_strtod_l+0x8de>
 8007b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b50:	9a04      	ldr	r2, [sp, #16]
 8007b52:	4650      	mov	r0, sl
 8007b54:	4659      	mov	r1, fp
 8007b56:	b1c3      	cbz	r3, 8007b8a <_strtod_l+0x93a>
 8007b58:	f7ff fb5c 	bl	8007214 <sulp>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	ec51 0b18 	vmov	r0, r1, d8
 8007b64:	f7f8 fba2 	bl	80002ac <__adddf3>
 8007b68:	4682      	mov	sl, r0
 8007b6a:	468b      	mov	fp, r1
 8007b6c:	e7df      	b.n	8007b2e <_strtod_l+0x8de>
 8007b6e:	4013      	ands	r3, r2
 8007b70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007b74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007b78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007b7c:	f04f 3aff 	mov.w	sl, #4294967295
 8007b80:	e7d5      	b.n	8007b2e <_strtod_l+0x8de>
 8007b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b84:	ea13 0f0a 	tst.w	r3, sl
 8007b88:	e7e0      	b.n	8007b4c <_strtod_l+0x8fc>
 8007b8a:	f7ff fb43 	bl	8007214 <sulp>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	ec51 0b18 	vmov	r0, r1, d8
 8007b96:	f7f8 fb87 	bl	80002a8 <__aeabi_dsub>
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	4682      	mov	sl, r0
 8007ba0:	468b      	mov	fp, r1
 8007ba2:	f7f8 ffa1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d0c1      	beq.n	8007b2e <_strtod_l+0x8de>
 8007baa:	e611      	b.n	80077d0 <_strtod_l+0x580>
 8007bac:	fffffc02 	.word	0xfffffc02
 8007bb0:	7ff00000 	.word	0x7ff00000
 8007bb4:	39500000 	.word	0x39500000
 8007bb8:	000fffff 	.word	0x000fffff
 8007bbc:	7fefffff 	.word	0x7fefffff
 8007bc0:	0800ae80 	.word	0x0800ae80
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f002 f832 	bl	8009c30 <__ratio>
 8007bcc:	ec59 8b10 	vmov	r8, r9, d0
 8007bd0:	ee10 0a10 	vmov	r0, s0
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bda:	4649      	mov	r1, r9
 8007bdc:	f7f8 ff98 	bl	8000b10 <__aeabi_dcmple>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d07a      	beq.n	8007cda <_strtod_l+0xa8a>
 8007be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d04a      	beq.n	8007c80 <_strtod_l+0xa30>
 8007bea:	4b95      	ldr	r3, [pc, #596]	; (8007e40 <_strtod_l+0xbf0>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007bf2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007e40 <_strtod_l+0xbf0>
 8007bf6:	f04f 0800 	mov.w	r8, #0
 8007bfa:	4b92      	ldr	r3, [pc, #584]	; (8007e44 <_strtod_l+0xbf4>)
 8007bfc:	403b      	ands	r3, r7
 8007bfe:	930d      	str	r3, [sp, #52]	; 0x34
 8007c00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c02:	4b91      	ldr	r3, [pc, #580]	; (8007e48 <_strtod_l+0xbf8>)
 8007c04:	429a      	cmp	r2, r3
 8007c06:	f040 80b0 	bne.w	8007d6a <_strtod_l+0xb1a>
 8007c0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007c12:	ec4b ab10 	vmov	d0, sl, fp
 8007c16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c1a:	f001 ff31 	bl	8009a80 <__ulp>
 8007c1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c22:	ec53 2b10 	vmov	r2, r3, d0
 8007c26:	f7f8 fcf7 	bl	8000618 <__aeabi_dmul>
 8007c2a:	4652      	mov	r2, sl
 8007c2c:	465b      	mov	r3, fp
 8007c2e:	f7f8 fb3d 	bl	80002ac <__adddf3>
 8007c32:	460b      	mov	r3, r1
 8007c34:	4983      	ldr	r1, [pc, #524]	; (8007e44 <_strtod_l+0xbf4>)
 8007c36:	4a85      	ldr	r2, [pc, #532]	; (8007e4c <_strtod_l+0xbfc>)
 8007c38:	4019      	ands	r1, r3
 8007c3a:	4291      	cmp	r1, r2
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	d960      	bls.n	8007d02 <_strtod_l+0xab2>
 8007c40:	ee18 3a90 	vmov	r3, s17
 8007c44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d104      	bne.n	8007c56 <_strtod_l+0xa06>
 8007c4c:	ee18 3a10 	vmov	r3, s16
 8007c50:	3301      	adds	r3, #1
 8007c52:	f43f ad45 	beq.w	80076e0 <_strtod_l+0x490>
 8007c56:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007e58 <_strtod_l+0xc08>
 8007c5a:	f04f 3aff 	mov.w	sl, #4294967295
 8007c5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c60:	4620      	mov	r0, r4
 8007c62:	f001 fbdb 	bl	800941c <_Bfree>
 8007c66:	9905      	ldr	r1, [sp, #20]
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f001 fbd7 	bl	800941c <_Bfree>
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4620      	mov	r0, r4
 8007c72:	f001 fbd3 	bl	800941c <_Bfree>
 8007c76:	4629      	mov	r1, r5
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f001 fbcf 	bl	800941c <_Bfree>
 8007c7e:	e61a      	b.n	80078b6 <_strtod_l+0x666>
 8007c80:	f1ba 0f00 	cmp.w	sl, #0
 8007c84:	d11b      	bne.n	8007cbe <_strtod_l+0xa6e>
 8007c86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c8a:	b9f3      	cbnz	r3, 8007cca <_strtod_l+0xa7a>
 8007c8c:	4b6c      	ldr	r3, [pc, #432]	; (8007e40 <_strtod_l+0xbf0>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	4640      	mov	r0, r8
 8007c92:	4649      	mov	r1, r9
 8007c94:	f7f8 ff32 	bl	8000afc <__aeabi_dcmplt>
 8007c98:	b9d0      	cbnz	r0, 8007cd0 <_strtod_l+0xa80>
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	4b6c      	ldr	r3, [pc, #432]	; (8007e50 <_strtod_l+0xc00>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f7f8 fcb9 	bl	8000618 <__aeabi_dmul>
 8007ca6:	4680      	mov	r8, r0
 8007ca8:	4689      	mov	r9, r1
 8007caa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007cae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007cb2:	9315      	str	r3, [sp, #84]	; 0x54
 8007cb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007cb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007cbc:	e79d      	b.n	8007bfa <_strtod_l+0x9aa>
 8007cbe:	f1ba 0f01 	cmp.w	sl, #1
 8007cc2:	d102      	bne.n	8007cca <_strtod_l+0xa7a>
 8007cc4:	2f00      	cmp	r7, #0
 8007cc6:	f43f ad83 	beq.w	80077d0 <_strtod_l+0x580>
 8007cca:	4b62      	ldr	r3, [pc, #392]	; (8007e54 <_strtod_l+0xc04>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	e78e      	b.n	8007bee <_strtod_l+0x99e>
 8007cd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007e50 <_strtod_l+0xc00>
 8007cd4:	f04f 0800 	mov.w	r8, #0
 8007cd8:	e7e7      	b.n	8007caa <_strtod_l+0xa5a>
 8007cda:	4b5d      	ldr	r3, [pc, #372]	; (8007e50 <_strtod_l+0xc00>)
 8007cdc:	4640      	mov	r0, r8
 8007cde:	4649      	mov	r1, r9
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f7f8 fc99 	bl	8000618 <__aeabi_dmul>
 8007ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce8:	4680      	mov	r8, r0
 8007cea:	4689      	mov	r9, r1
 8007cec:	b933      	cbnz	r3, 8007cfc <_strtod_l+0xaac>
 8007cee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cf2:	900e      	str	r0, [sp, #56]	; 0x38
 8007cf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007cfa:	e7dd      	b.n	8007cb8 <_strtod_l+0xa68>
 8007cfc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007d00:	e7f9      	b.n	8007cf6 <_strtod_l+0xaa6>
 8007d02:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007d06:	9b04      	ldr	r3, [sp, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1a8      	bne.n	8007c5e <_strtod_l+0xa0e>
 8007d0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d12:	0d1b      	lsrs	r3, r3, #20
 8007d14:	051b      	lsls	r3, r3, #20
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d1a1      	bne.n	8007c5e <_strtod_l+0xa0e>
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	f7f8 ffdb 	bl	8000cd8 <__aeabi_d2lz>
 8007d22:	f7f8 fc4b 	bl	80005bc <__aeabi_l2d>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	f7f8 fabb 	bl	80002a8 <__aeabi_dsub>
 8007d32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d38:	ea43 030a 	orr.w	r3, r3, sl
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	4680      	mov	r8, r0
 8007d40:	4689      	mov	r9, r1
 8007d42:	d055      	beq.n	8007df0 <_strtod_l+0xba0>
 8007d44:	a336      	add	r3, pc, #216	; (adr r3, 8007e20 <_strtod_l+0xbd0>)
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f7f8 fed7 	bl	8000afc <__aeabi_dcmplt>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	f47f acd0 	bne.w	80076f4 <_strtod_l+0x4a4>
 8007d54:	a334      	add	r3, pc, #208	; (adr r3, 8007e28 <_strtod_l+0xbd8>)
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	f7f8 feeb 	bl	8000b38 <__aeabi_dcmpgt>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	f43f af7b 	beq.w	8007c5e <_strtod_l+0xa0e>
 8007d68:	e4c4      	b.n	80076f4 <_strtod_l+0x4a4>
 8007d6a:	9b04      	ldr	r3, [sp, #16]
 8007d6c:	b333      	cbz	r3, 8007dbc <_strtod_l+0xb6c>
 8007d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d70:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d74:	d822      	bhi.n	8007dbc <_strtod_l+0xb6c>
 8007d76:	a32e      	add	r3, pc, #184	; (adr r3, 8007e30 <_strtod_l+0xbe0>)
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	4640      	mov	r0, r8
 8007d7e:	4649      	mov	r1, r9
 8007d80:	f7f8 fec6 	bl	8000b10 <__aeabi_dcmple>
 8007d84:	b1a0      	cbz	r0, 8007db0 <_strtod_l+0xb60>
 8007d86:	4649      	mov	r1, r9
 8007d88:	4640      	mov	r0, r8
 8007d8a:	f7f8 ff1d 	bl	8000bc8 <__aeabi_d2uiz>
 8007d8e:	2801      	cmp	r0, #1
 8007d90:	bf38      	it	cc
 8007d92:	2001      	movcc	r0, #1
 8007d94:	f7f8 fbc6 	bl	8000524 <__aeabi_ui2d>
 8007d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d9a:	4680      	mov	r8, r0
 8007d9c:	4689      	mov	r9, r1
 8007d9e:	bb23      	cbnz	r3, 8007dea <_strtod_l+0xb9a>
 8007da0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007da4:	9010      	str	r0, [sp, #64]	; 0x40
 8007da6:	9311      	str	r3, [sp, #68]	; 0x44
 8007da8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007dac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007db4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	9309      	str	r3, [sp, #36]	; 0x24
 8007dbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007dc0:	eeb0 0a48 	vmov.f32	s0, s16
 8007dc4:	eef0 0a68 	vmov.f32	s1, s17
 8007dc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007dcc:	f001 fe58 	bl	8009a80 <__ulp>
 8007dd0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007dd4:	ec53 2b10 	vmov	r2, r3, d0
 8007dd8:	f7f8 fc1e 	bl	8000618 <__aeabi_dmul>
 8007ddc:	ec53 2b18 	vmov	r2, r3, d8
 8007de0:	f7f8 fa64 	bl	80002ac <__adddf3>
 8007de4:	4682      	mov	sl, r0
 8007de6:	468b      	mov	fp, r1
 8007de8:	e78d      	b.n	8007d06 <_strtod_l+0xab6>
 8007dea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007dee:	e7db      	b.n	8007da8 <_strtod_l+0xb58>
 8007df0:	a311      	add	r3, pc, #68	; (adr r3, 8007e38 <_strtod_l+0xbe8>)
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	f7f8 fe81 	bl	8000afc <__aeabi_dcmplt>
 8007dfa:	e7b2      	b.n	8007d62 <_strtod_l+0xb12>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8007e00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e04:	6013      	str	r3, [r2, #0]
 8007e06:	f7ff ba6b 	b.w	80072e0 <_strtod_l+0x90>
 8007e0a:	2a65      	cmp	r2, #101	; 0x65
 8007e0c:	f43f ab5f 	beq.w	80074ce <_strtod_l+0x27e>
 8007e10:	2a45      	cmp	r2, #69	; 0x45
 8007e12:	f43f ab5c 	beq.w	80074ce <_strtod_l+0x27e>
 8007e16:	2301      	movs	r3, #1
 8007e18:	f7ff bb94 	b.w	8007544 <_strtod_l+0x2f4>
 8007e1c:	f3af 8000 	nop.w
 8007e20:	94a03595 	.word	0x94a03595
 8007e24:	3fdfffff 	.word	0x3fdfffff
 8007e28:	35afe535 	.word	0x35afe535
 8007e2c:	3fe00000 	.word	0x3fe00000
 8007e30:	ffc00000 	.word	0xffc00000
 8007e34:	41dfffff 	.word	0x41dfffff
 8007e38:	94a03595 	.word	0x94a03595
 8007e3c:	3fcfffff 	.word	0x3fcfffff
 8007e40:	3ff00000 	.word	0x3ff00000
 8007e44:	7ff00000 	.word	0x7ff00000
 8007e48:	7fe00000 	.word	0x7fe00000
 8007e4c:	7c9fffff 	.word	0x7c9fffff
 8007e50:	3fe00000 	.word	0x3fe00000
 8007e54:	bff00000 	.word	0xbff00000
 8007e58:	7fefffff 	.word	0x7fefffff

08007e5c <_strtod_r>:
 8007e5c:	4b01      	ldr	r3, [pc, #4]	; (8007e64 <_strtod_r+0x8>)
 8007e5e:	f7ff b9f7 	b.w	8007250 <_strtod_l>
 8007e62:	bf00      	nop
 8007e64:	20000088 	.word	0x20000088

08007e68 <_strtol_l.constprop.0>:
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e6e:	d001      	beq.n	8007e74 <_strtol_l.constprop.0+0xc>
 8007e70:	2b24      	cmp	r3, #36	; 0x24
 8007e72:	d906      	bls.n	8007e82 <_strtol_l.constprop.0+0x1a>
 8007e74:	f7fe fafc 	bl	8006470 <__errno>
 8007e78:	2316      	movs	r3, #22
 8007e7a:	6003      	str	r3, [r0, #0]
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007f68 <_strtol_l.constprop.0+0x100>
 8007e86:	460d      	mov	r5, r1
 8007e88:	462e      	mov	r6, r5
 8007e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007e92:	f017 0708 	ands.w	r7, r7, #8
 8007e96:	d1f7      	bne.n	8007e88 <_strtol_l.constprop.0+0x20>
 8007e98:	2c2d      	cmp	r4, #45	; 0x2d
 8007e9a:	d132      	bne.n	8007f02 <_strtol_l.constprop.0+0x9a>
 8007e9c:	782c      	ldrb	r4, [r5, #0]
 8007e9e:	2701      	movs	r7, #1
 8007ea0:	1cb5      	adds	r5, r6, #2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d05b      	beq.n	8007f5e <_strtol_l.constprop.0+0xf6>
 8007ea6:	2b10      	cmp	r3, #16
 8007ea8:	d109      	bne.n	8007ebe <_strtol_l.constprop.0+0x56>
 8007eaa:	2c30      	cmp	r4, #48	; 0x30
 8007eac:	d107      	bne.n	8007ebe <_strtol_l.constprop.0+0x56>
 8007eae:	782c      	ldrb	r4, [r5, #0]
 8007eb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007eb4:	2c58      	cmp	r4, #88	; 0x58
 8007eb6:	d14d      	bne.n	8007f54 <_strtol_l.constprop.0+0xec>
 8007eb8:	786c      	ldrb	r4, [r5, #1]
 8007eba:	2310      	movs	r3, #16
 8007ebc:	3502      	adds	r5, #2
 8007ebe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007ec2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ec6:	f04f 0c00 	mov.w	ip, #0
 8007eca:	fbb8 f9f3 	udiv	r9, r8, r3
 8007ece:	4666      	mov	r6, ip
 8007ed0:	fb03 8a19 	mls	sl, r3, r9, r8
 8007ed4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007ed8:	f1be 0f09 	cmp.w	lr, #9
 8007edc:	d816      	bhi.n	8007f0c <_strtol_l.constprop.0+0xa4>
 8007ede:	4674      	mov	r4, lr
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	dd24      	ble.n	8007f2e <_strtol_l.constprop.0+0xc6>
 8007ee4:	f1bc 0f00 	cmp.w	ip, #0
 8007ee8:	db1e      	blt.n	8007f28 <_strtol_l.constprop.0+0xc0>
 8007eea:	45b1      	cmp	r9, r6
 8007eec:	d31c      	bcc.n	8007f28 <_strtol_l.constprop.0+0xc0>
 8007eee:	d101      	bne.n	8007ef4 <_strtol_l.constprop.0+0x8c>
 8007ef0:	45a2      	cmp	sl, r4
 8007ef2:	db19      	blt.n	8007f28 <_strtol_l.constprop.0+0xc0>
 8007ef4:	fb06 4603 	mla	r6, r6, r3, r4
 8007ef8:	f04f 0c01 	mov.w	ip, #1
 8007efc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f00:	e7e8      	b.n	8007ed4 <_strtol_l.constprop.0+0x6c>
 8007f02:	2c2b      	cmp	r4, #43	; 0x2b
 8007f04:	bf04      	itt	eq
 8007f06:	782c      	ldrbeq	r4, [r5, #0]
 8007f08:	1cb5      	addeq	r5, r6, #2
 8007f0a:	e7ca      	b.n	8007ea2 <_strtol_l.constprop.0+0x3a>
 8007f0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007f10:	f1be 0f19 	cmp.w	lr, #25
 8007f14:	d801      	bhi.n	8007f1a <_strtol_l.constprop.0+0xb2>
 8007f16:	3c37      	subs	r4, #55	; 0x37
 8007f18:	e7e2      	b.n	8007ee0 <_strtol_l.constprop.0+0x78>
 8007f1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007f1e:	f1be 0f19 	cmp.w	lr, #25
 8007f22:	d804      	bhi.n	8007f2e <_strtol_l.constprop.0+0xc6>
 8007f24:	3c57      	subs	r4, #87	; 0x57
 8007f26:	e7db      	b.n	8007ee0 <_strtol_l.constprop.0+0x78>
 8007f28:	f04f 3cff 	mov.w	ip, #4294967295
 8007f2c:	e7e6      	b.n	8007efc <_strtol_l.constprop.0+0x94>
 8007f2e:	f1bc 0f00 	cmp.w	ip, #0
 8007f32:	da05      	bge.n	8007f40 <_strtol_l.constprop.0+0xd8>
 8007f34:	2322      	movs	r3, #34	; 0x22
 8007f36:	6003      	str	r3, [r0, #0]
 8007f38:	4646      	mov	r6, r8
 8007f3a:	b942      	cbnz	r2, 8007f4e <_strtol_l.constprop.0+0xe6>
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	e79e      	b.n	8007e7e <_strtol_l.constprop.0+0x16>
 8007f40:	b107      	cbz	r7, 8007f44 <_strtol_l.constprop.0+0xdc>
 8007f42:	4276      	negs	r6, r6
 8007f44:	2a00      	cmp	r2, #0
 8007f46:	d0f9      	beq.n	8007f3c <_strtol_l.constprop.0+0xd4>
 8007f48:	f1bc 0f00 	cmp.w	ip, #0
 8007f4c:	d000      	beq.n	8007f50 <_strtol_l.constprop.0+0xe8>
 8007f4e:	1e69      	subs	r1, r5, #1
 8007f50:	6011      	str	r1, [r2, #0]
 8007f52:	e7f3      	b.n	8007f3c <_strtol_l.constprop.0+0xd4>
 8007f54:	2430      	movs	r4, #48	; 0x30
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1b1      	bne.n	8007ebe <_strtol_l.constprop.0+0x56>
 8007f5a:	2308      	movs	r3, #8
 8007f5c:	e7af      	b.n	8007ebe <_strtol_l.constprop.0+0x56>
 8007f5e:	2c30      	cmp	r4, #48	; 0x30
 8007f60:	d0a5      	beq.n	8007eae <_strtol_l.constprop.0+0x46>
 8007f62:	230a      	movs	r3, #10
 8007f64:	e7ab      	b.n	8007ebe <_strtol_l.constprop.0+0x56>
 8007f66:	bf00      	nop
 8007f68:	0800aea9 	.word	0x0800aea9

08007f6c <_strtol_r>:
 8007f6c:	f7ff bf7c 	b.w	8007e68 <_strtol_l.constprop.0>

08007f70 <quorem>:
 8007f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f74:	6903      	ldr	r3, [r0, #16]
 8007f76:	690c      	ldr	r4, [r1, #16]
 8007f78:	42a3      	cmp	r3, r4
 8007f7a:	4607      	mov	r7, r0
 8007f7c:	f2c0 8081 	blt.w	8008082 <quorem+0x112>
 8007f80:	3c01      	subs	r4, #1
 8007f82:	f101 0814 	add.w	r8, r1, #20
 8007f86:	f100 0514 	add.w	r5, r0, #20
 8007f8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007fa0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fa4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fa8:	d331      	bcc.n	800800e <quorem+0x9e>
 8007faa:	f04f 0e00 	mov.w	lr, #0
 8007fae:	4640      	mov	r0, r8
 8007fb0:	46ac      	mov	ip, r5
 8007fb2:	46f2      	mov	sl, lr
 8007fb4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fb8:	b293      	uxth	r3, r2
 8007fba:	fb06 e303 	mla	r3, r6, r3, lr
 8007fbe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	ebaa 0303 	sub.w	r3, sl, r3
 8007fc8:	f8dc a000 	ldr.w	sl, [ip]
 8007fcc:	0c12      	lsrs	r2, r2, #16
 8007fce:	fa13 f38a 	uxtah	r3, r3, sl
 8007fd2:	fb06 e202 	mla	r2, r6, r2, lr
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	9b00      	ldr	r3, [sp, #0]
 8007fda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fde:	b292      	uxth	r2, r2
 8007fe0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007fe4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fe8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007fec:	4581      	cmp	r9, r0
 8007fee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ff2:	f84c 3b04 	str.w	r3, [ip], #4
 8007ff6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ffa:	d2db      	bcs.n	8007fb4 <quorem+0x44>
 8007ffc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008000:	b92b      	cbnz	r3, 800800e <quorem+0x9e>
 8008002:	9b01      	ldr	r3, [sp, #4]
 8008004:	3b04      	subs	r3, #4
 8008006:	429d      	cmp	r5, r3
 8008008:	461a      	mov	r2, r3
 800800a:	d32e      	bcc.n	800806a <quorem+0xfa>
 800800c:	613c      	str	r4, [r7, #16]
 800800e:	4638      	mov	r0, r7
 8008010:	f001 fc90 	bl	8009934 <__mcmp>
 8008014:	2800      	cmp	r0, #0
 8008016:	db24      	blt.n	8008062 <quorem+0xf2>
 8008018:	3601      	adds	r6, #1
 800801a:	4628      	mov	r0, r5
 800801c:	f04f 0c00 	mov.w	ip, #0
 8008020:	f858 2b04 	ldr.w	r2, [r8], #4
 8008024:	f8d0 e000 	ldr.w	lr, [r0]
 8008028:	b293      	uxth	r3, r2
 800802a:	ebac 0303 	sub.w	r3, ip, r3
 800802e:	0c12      	lsrs	r2, r2, #16
 8008030:	fa13 f38e 	uxtah	r3, r3, lr
 8008034:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008038:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800803c:	b29b      	uxth	r3, r3
 800803e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008042:	45c1      	cmp	r9, r8
 8008044:	f840 3b04 	str.w	r3, [r0], #4
 8008048:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800804c:	d2e8      	bcs.n	8008020 <quorem+0xb0>
 800804e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008052:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008056:	b922      	cbnz	r2, 8008062 <quorem+0xf2>
 8008058:	3b04      	subs	r3, #4
 800805a:	429d      	cmp	r5, r3
 800805c:	461a      	mov	r2, r3
 800805e:	d30a      	bcc.n	8008076 <quorem+0x106>
 8008060:	613c      	str	r4, [r7, #16]
 8008062:	4630      	mov	r0, r6
 8008064:	b003      	add	sp, #12
 8008066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806a:	6812      	ldr	r2, [r2, #0]
 800806c:	3b04      	subs	r3, #4
 800806e:	2a00      	cmp	r2, #0
 8008070:	d1cc      	bne.n	800800c <quorem+0x9c>
 8008072:	3c01      	subs	r4, #1
 8008074:	e7c7      	b.n	8008006 <quorem+0x96>
 8008076:	6812      	ldr	r2, [r2, #0]
 8008078:	3b04      	subs	r3, #4
 800807a:	2a00      	cmp	r2, #0
 800807c:	d1f0      	bne.n	8008060 <quorem+0xf0>
 800807e:	3c01      	subs	r4, #1
 8008080:	e7eb      	b.n	800805a <quorem+0xea>
 8008082:	2000      	movs	r0, #0
 8008084:	e7ee      	b.n	8008064 <quorem+0xf4>
	...

08008088 <_dtoa_r>:
 8008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	ed2d 8b04 	vpush	{d8-d9}
 8008090:	ec57 6b10 	vmov	r6, r7, d0
 8008094:	b093      	sub	sp, #76	; 0x4c
 8008096:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008098:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800809c:	9106      	str	r1, [sp, #24]
 800809e:	ee10 aa10 	vmov	sl, s0
 80080a2:	4604      	mov	r4, r0
 80080a4:	9209      	str	r2, [sp, #36]	; 0x24
 80080a6:	930c      	str	r3, [sp, #48]	; 0x30
 80080a8:	46bb      	mov	fp, r7
 80080aa:	b975      	cbnz	r5, 80080ca <_dtoa_r+0x42>
 80080ac:	2010      	movs	r0, #16
 80080ae:	f001 f94d 	bl	800934c <malloc>
 80080b2:	4602      	mov	r2, r0
 80080b4:	6260      	str	r0, [r4, #36]	; 0x24
 80080b6:	b920      	cbnz	r0, 80080c2 <_dtoa_r+0x3a>
 80080b8:	4ba7      	ldr	r3, [pc, #668]	; (8008358 <_dtoa_r+0x2d0>)
 80080ba:	21ea      	movs	r1, #234	; 0xea
 80080bc:	48a7      	ldr	r0, [pc, #668]	; (800835c <_dtoa_r+0x2d4>)
 80080be:	f002 f8bd 	bl	800a23c <__assert_func>
 80080c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080c6:	6005      	str	r5, [r0, #0]
 80080c8:	60c5      	str	r5, [r0, #12]
 80080ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080cc:	6819      	ldr	r1, [r3, #0]
 80080ce:	b151      	cbz	r1, 80080e6 <_dtoa_r+0x5e>
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	604a      	str	r2, [r1, #4]
 80080d4:	2301      	movs	r3, #1
 80080d6:	4093      	lsls	r3, r2
 80080d8:	608b      	str	r3, [r1, #8]
 80080da:	4620      	mov	r0, r4
 80080dc:	f001 f99e 	bl	800941c <_Bfree>
 80080e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080e2:	2200      	movs	r2, #0
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	1e3b      	subs	r3, r7, #0
 80080e8:	bfaa      	itet	ge
 80080ea:	2300      	movge	r3, #0
 80080ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80080f0:	f8c8 3000 	strge.w	r3, [r8]
 80080f4:	4b9a      	ldr	r3, [pc, #616]	; (8008360 <_dtoa_r+0x2d8>)
 80080f6:	bfbc      	itt	lt
 80080f8:	2201      	movlt	r2, #1
 80080fa:	f8c8 2000 	strlt.w	r2, [r8]
 80080fe:	ea33 030b 	bics.w	r3, r3, fp
 8008102:	d11b      	bne.n	800813c <_dtoa_r+0xb4>
 8008104:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008106:	f242 730f 	movw	r3, #9999	; 0x270f
 800810a:	6013      	str	r3, [r2, #0]
 800810c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008110:	4333      	orrs	r3, r6
 8008112:	f000 8592 	beq.w	8008c3a <_dtoa_r+0xbb2>
 8008116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008118:	b963      	cbnz	r3, 8008134 <_dtoa_r+0xac>
 800811a:	4b92      	ldr	r3, [pc, #584]	; (8008364 <_dtoa_r+0x2dc>)
 800811c:	e022      	b.n	8008164 <_dtoa_r+0xdc>
 800811e:	4b92      	ldr	r3, [pc, #584]	; (8008368 <_dtoa_r+0x2e0>)
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	3308      	adds	r3, #8
 8008124:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	9801      	ldr	r0, [sp, #4]
 800812a:	b013      	add	sp, #76	; 0x4c
 800812c:	ecbd 8b04 	vpop	{d8-d9}
 8008130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008134:	4b8b      	ldr	r3, [pc, #556]	; (8008364 <_dtoa_r+0x2dc>)
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	3303      	adds	r3, #3
 800813a:	e7f3      	b.n	8008124 <_dtoa_r+0x9c>
 800813c:	2200      	movs	r2, #0
 800813e:	2300      	movs	r3, #0
 8008140:	4650      	mov	r0, sl
 8008142:	4659      	mov	r1, fp
 8008144:	f7f8 fcd0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008148:	ec4b ab19 	vmov	d9, sl, fp
 800814c:	4680      	mov	r8, r0
 800814e:	b158      	cbz	r0, 8008168 <_dtoa_r+0xe0>
 8008150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008152:	2301      	movs	r3, #1
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 856b 	beq.w	8008c34 <_dtoa_r+0xbac>
 800815e:	4883      	ldr	r0, [pc, #524]	; (800836c <_dtoa_r+0x2e4>)
 8008160:	6018      	str	r0, [r3, #0]
 8008162:	1e43      	subs	r3, r0, #1
 8008164:	9301      	str	r3, [sp, #4]
 8008166:	e7df      	b.n	8008128 <_dtoa_r+0xa0>
 8008168:	ec4b ab10 	vmov	d0, sl, fp
 800816c:	aa10      	add	r2, sp, #64	; 0x40
 800816e:	a911      	add	r1, sp, #68	; 0x44
 8008170:	4620      	mov	r0, r4
 8008172:	f001 fd01 	bl	8009b78 <__d2b>
 8008176:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800817a:	ee08 0a10 	vmov	s16, r0
 800817e:	2d00      	cmp	r5, #0
 8008180:	f000 8084 	beq.w	800828c <_dtoa_r+0x204>
 8008184:	ee19 3a90 	vmov	r3, s19
 8008188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800818c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008190:	4656      	mov	r6, sl
 8008192:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008196:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800819a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800819e:	4b74      	ldr	r3, [pc, #464]	; (8008370 <_dtoa_r+0x2e8>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	4630      	mov	r0, r6
 80081a4:	4639      	mov	r1, r7
 80081a6:	f7f8 f87f 	bl	80002a8 <__aeabi_dsub>
 80081aa:	a365      	add	r3, pc, #404	; (adr r3, 8008340 <_dtoa_r+0x2b8>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f7f8 fa32 	bl	8000618 <__aeabi_dmul>
 80081b4:	a364      	add	r3, pc, #400	; (adr r3, 8008348 <_dtoa_r+0x2c0>)
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	f7f8 f877 	bl	80002ac <__adddf3>
 80081be:	4606      	mov	r6, r0
 80081c0:	4628      	mov	r0, r5
 80081c2:	460f      	mov	r7, r1
 80081c4:	f7f8 f9be 	bl	8000544 <__aeabi_i2d>
 80081c8:	a361      	add	r3, pc, #388	; (adr r3, 8008350 <_dtoa_r+0x2c8>)
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	f7f8 fa23 	bl	8000618 <__aeabi_dmul>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4630      	mov	r0, r6
 80081d8:	4639      	mov	r1, r7
 80081da:	f7f8 f867 	bl	80002ac <__adddf3>
 80081de:	4606      	mov	r6, r0
 80081e0:	460f      	mov	r7, r1
 80081e2:	f7f8 fcc9 	bl	8000b78 <__aeabi_d2iz>
 80081e6:	2200      	movs	r2, #0
 80081e8:	9000      	str	r0, [sp, #0]
 80081ea:	2300      	movs	r3, #0
 80081ec:	4630      	mov	r0, r6
 80081ee:	4639      	mov	r1, r7
 80081f0:	f7f8 fc84 	bl	8000afc <__aeabi_dcmplt>
 80081f4:	b150      	cbz	r0, 800820c <_dtoa_r+0x184>
 80081f6:	9800      	ldr	r0, [sp, #0]
 80081f8:	f7f8 f9a4 	bl	8000544 <__aeabi_i2d>
 80081fc:	4632      	mov	r2, r6
 80081fe:	463b      	mov	r3, r7
 8008200:	f7f8 fc72 	bl	8000ae8 <__aeabi_dcmpeq>
 8008204:	b910      	cbnz	r0, 800820c <_dtoa_r+0x184>
 8008206:	9b00      	ldr	r3, [sp, #0]
 8008208:	3b01      	subs	r3, #1
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	9b00      	ldr	r3, [sp, #0]
 800820e:	2b16      	cmp	r3, #22
 8008210:	d85a      	bhi.n	80082c8 <_dtoa_r+0x240>
 8008212:	9a00      	ldr	r2, [sp, #0]
 8008214:	4b57      	ldr	r3, [pc, #348]	; (8008374 <_dtoa_r+0x2ec>)
 8008216:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821e:	ec51 0b19 	vmov	r0, r1, d9
 8008222:	f7f8 fc6b 	bl	8000afc <__aeabi_dcmplt>
 8008226:	2800      	cmp	r0, #0
 8008228:	d050      	beq.n	80082cc <_dtoa_r+0x244>
 800822a:	9b00      	ldr	r3, [sp, #0]
 800822c:	3b01      	subs	r3, #1
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	2300      	movs	r3, #0
 8008232:	930b      	str	r3, [sp, #44]	; 0x2c
 8008234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008236:	1b5d      	subs	r5, r3, r5
 8008238:	1e6b      	subs	r3, r5, #1
 800823a:	9305      	str	r3, [sp, #20]
 800823c:	bf45      	ittet	mi
 800823e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008242:	9304      	strmi	r3, [sp, #16]
 8008244:	2300      	movpl	r3, #0
 8008246:	2300      	movmi	r3, #0
 8008248:	bf4c      	ite	mi
 800824a:	9305      	strmi	r3, [sp, #20]
 800824c:	9304      	strpl	r3, [sp, #16]
 800824e:	9b00      	ldr	r3, [sp, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	db3d      	blt.n	80082d0 <_dtoa_r+0x248>
 8008254:	9b05      	ldr	r3, [sp, #20]
 8008256:	9a00      	ldr	r2, [sp, #0]
 8008258:	920a      	str	r2, [sp, #40]	; 0x28
 800825a:	4413      	add	r3, r2
 800825c:	9305      	str	r3, [sp, #20]
 800825e:	2300      	movs	r3, #0
 8008260:	9307      	str	r3, [sp, #28]
 8008262:	9b06      	ldr	r3, [sp, #24]
 8008264:	2b09      	cmp	r3, #9
 8008266:	f200 8089 	bhi.w	800837c <_dtoa_r+0x2f4>
 800826a:	2b05      	cmp	r3, #5
 800826c:	bfc4      	itt	gt
 800826e:	3b04      	subgt	r3, #4
 8008270:	9306      	strgt	r3, [sp, #24]
 8008272:	9b06      	ldr	r3, [sp, #24]
 8008274:	f1a3 0302 	sub.w	r3, r3, #2
 8008278:	bfcc      	ite	gt
 800827a:	2500      	movgt	r5, #0
 800827c:	2501      	movle	r5, #1
 800827e:	2b03      	cmp	r3, #3
 8008280:	f200 8087 	bhi.w	8008392 <_dtoa_r+0x30a>
 8008284:	e8df f003 	tbb	[pc, r3]
 8008288:	59383a2d 	.word	0x59383a2d
 800828c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008290:	441d      	add	r5, r3
 8008292:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008296:	2b20      	cmp	r3, #32
 8008298:	bfc1      	itttt	gt
 800829a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800829e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80082a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80082a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80082aa:	bfda      	itte	le
 80082ac:	f1c3 0320 	rsble	r3, r3, #32
 80082b0:	fa06 f003 	lslle.w	r0, r6, r3
 80082b4:	4318      	orrgt	r0, r3
 80082b6:	f7f8 f935 	bl	8000524 <__aeabi_ui2d>
 80082ba:	2301      	movs	r3, #1
 80082bc:	4606      	mov	r6, r0
 80082be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80082c2:	3d01      	subs	r5, #1
 80082c4:	930e      	str	r3, [sp, #56]	; 0x38
 80082c6:	e76a      	b.n	800819e <_dtoa_r+0x116>
 80082c8:	2301      	movs	r3, #1
 80082ca:	e7b2      	b.n	8008232 <_dtoa_r+0x1aa>
 80082cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80082ce:	e7b1      	b.n	8008234 <_dtoa_r+0x1ac>
 80082d0:	9b04      	ldr	r3, [sp, #16]
 80082d2:	9a00      	ldr	r2, [sp, #0]
 80082d4:	1a9b      	subs	r3, r3, r2
 80082d6:	9304      	str	r3, [sp, #16]
 80082d8:	4253      	negs	r3, r2
 80082da:	9307      	str	r3, [sp, #28]
 80082dc:	2300      	movs	r3, #0
 80082de:	930a      	str	r3, [sp, #40]	; 0x28
 80082e0:	e7bf      	b.n	8008262 <_dtoa_r+0x1da>
 80082e2:	2300      	movs	r3, #0
 80082e4:	9308      	str	r3, [sp, #32]
 80082e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	dc55      	bgt.n	8008398 <_dtoa_r+0x310>
 80082ec:	2301      	movs	r3, #1
 80082ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082f2:	461a      	mov	r2, r3
 80082f4:	9209      	str	r2, [sp, #36]	; 0x24
 80082f6:	e00c      	b.n	8008312 <_dtoa_r+0x28a>
 80082f8:	2301      	movs	r3, #1
 80082fa:	e7f3      	b.n	80082e4 <_dtoa_r+0x25c>
 80082fc:	2300      	movs	r3, #0
 80082fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008300:	9308      	str	r3, [sp, #32]
 8008302:	9b00      	ldr	r3, [sp, #0]
 8008304:	4413      	add	r3, r2
 8008306:	9302      	str	r3, [sp, #8]
 8008308:	3301      	adds	r3, #1
 800830a:	2b01      	cmp	r3, #1
 800830c:	9303      	str	r3, [sp, #12]
 800830e:	bfb8      	it	lt
 8008310:	2301      	movlt	r3, #1
 8008312:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008314:	2200      	movs	r2, #0
 8008316:	6042      	str	r2, [r0, #4]
 8008318:	2204      	movs	r2, #4
 800831a:	f102 0614 	add.w	r6, r2, #20
 800831e:	429e      	cmp	r6, r3
 8008320:	6841      	ldr	r1, [r0, #4]
 8008322:	d93d      	bls.n	80083a0 <_dtoa_r+0x318>
 8008324:	4620      	mov	r0, r4
 8008326:	f001 f839 	bl	800939c <_Balloc>
 800832a:	9001      	str	r0, [sp, #4]
 800832c:	2800      	cmp	r0, #0
 800832e:	d13b      	bne.n	80083a8 <_dtoa_r+0x320>
 8008330:	4b11      	ldr	r3, [pc, #68]	; (8008378 <_dtoa_r+0x2f0>)
 8008332:	4602      	mov	r2, r0
 8008334:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008338:	e6c0      	b.n	80080bc <_dtoa_r+0x34>
 800833a:	2301      	movs	r3, #1
 800833c:	e7df      	b.n	80082fe <_dtoa_r+0x276>
 800833e:	bf00      	nop
 8008340:	636f4361 	.word	0x636f4361
 8008344:	3fd287a7 	.word	0x3fd287a7
 8008348:	8b60c8b3 	.word	0x8b60c8b3
 800834c:	3fc68a28 	.word	0x3fc68a28
 8008350:	509f79fb 	.word	0x509f79fb
 8008354:	3fd34413 	.word	0x3fd34413
 8008358:	0800afb6 	.word	0x0800afb6
 800835c:	0800afcd 	.word	0x0800afcd
 8008360:	7ff00000 	.word	0x7ff00000
 8008364:	0800afb2 	.word	0x0800afb2
 8008368:	0800afa9 	.word	0x0800afa9
 800836c:	0800ae2d 	.word	0x0800ae2d
 8008370:	3ff80000 	.word	0x3ff80000
 8008374:	0800b138 	.word	0x0800b138
 8008378:	0800b028 	.word	0x0800b028
 800837c:	2501      	movs	r5, #1
 800837e:	2300      	movs	r3, #0
 8008380:	9306      	str	r3, [sp, #24]
 8008382:	9508      	str	r5, [sp, #32]
 8008384:	f04f 33ff 	mov.w	r3, #4294967295
 8008388:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800838c:	2200      	movs	r2, #0
 800838e:	2312      	movs	r3, #18
 8008390:	e7b0      	b.n	80082f4 <_dtoa_r+0x26c>
 8008392:	2301      	movs	r3, #1
 8008394:	9308      	str	r3, [sp, #32]
 8008396:	e7f5      	b.n	8008384 <_dtoa_r+0x2fc>
 8008398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800839e:	e7b8      	b.n	8008312 <_dtoa_r+0x28a>
 80083a0:	3101      	adds	r1, #1
 80083a2:	6041      	str	r1, [r0, #4]
 80083a4:	0052      	lsls	r2, r2, #1
 80083a6:	e7b8      	b.n	800831a <_dtoa_r+0x292>
 80083a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083aa:	9a01      	ldr	r2, [sp, #4]
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	9b03      	ldr	r3, [sp, #12]
 80083b0:	2b0e      	cmp	r3, #14
 80083b2:	f200 809d 	bhi.w	80084f0 <_dtoa_r+0x468>
 80083b6:	2d00      	cmp	r5, #0
 80083b8:	f000 809a 	beq.w	80084f0 <_dtoa_r+0x468>
 80083bc:	9b00      	ldr	r3, [sp, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	dd32      	ble.n	8008428 <_dtoa_r+0x3a0>
 80083c2:	4ab7      	ldr	r2, [pc, #732]	; (80086a0 <_dtoa_r+0x618>)
 80083c4:	f003 030f 	and.w	r3, r3, #15
 80083c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80083cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083d0:	9b00      	ldr	r3, [sp, #0]
 80083d2:	05d8      	lsls	r0, r3, #23
 80083d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80083d8:	d516      	bpl.n	8008408 <_dtoa_r+0x380>
 80083da:	4bb2      	ldr	r3, [pc, #712]	; (80086a4 <_dtoa_r+0x61c>)
 80083dc:	ec51 0b19 	vmov	r0, r1, d9
 80083e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083e4:	f7f8 fa42 	bl	800086c <__aeabi_ddiv>
 80083e8:	f007 070f 	and.w	r7, r7, #15
 80083ec:	4682      	mov	sl, r0
 80083ee:	468b      	mov	fp, r1
 80083f0:	2503      	movs	r5, #3
 80083f2:	4eac      	ldr	r6, [pc, #688]	; (80086a4 <_dtoa_r+0x61c>)
 80083f4:	b957      	cbnz	r7, 800840c <_dtoa_r+0x384>
 80083f6:	4642      	mov	r2, r8
 80083f8:	464b      	mov	r3, r9
 80083fa:	4650      	mov	r0, sl
 80083fc:	4659      	mov	r1, fp
 80083fe:	f7f8 fa35 	bl	800086c <__aeabi_ddiv>
 8008402:	4682      	mov	sl, r0
 8008404:	468b      	mov	fp, r1
 8008406:	e028      	b.n	800845a <_dtoa_r+0x3d2>
 8008408:	2502      	movs	r5, #2
 800840a:	e7f2      	b.n	80083f2 <_dtoa_r+0x36a>
 800840c:	07f9      	lsls	r1, r7, #31
 800840e:	d508      	bpl.n	8008422 <_dtoa_r+0x39a>
 8008410:	4640      	mov	r0, r8
 8008412:	4649      	mov	r1, r9
 8008414:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008418:	f7f8 f8fe 	bl	8000618 <__aeabi_dmul>
 800841c:	3501      	adds	r5, #1
 800841e:	4680      	mov	r8, r0
 8008420:	4689      	mov	r9, r1
 8008422:	107f      	asrs	r7, r7, #1
 8008424:	3608      	adds	r6, #8
 8008426:	e7e5      	b.n	80083f4 <_dtoa_r+0x36c>
 8008428:	f000 809b 	beq.w	8008562 <_dtoa_r+0x4da>
 800842c:	9b00      	ldr	r3, [sp, #0]
 800842e:	4f9d      	ldr	r7, [pc, #628]	; (80086a4 <_dtoa_r+0x61c>)
 8008430:	425e      	negs	r6, r3
 8008432:	4b9b      	ldr	r3, [pc, #620]	; (80086a0 <_dtoa_r+0x618>)
 8008434:	f006 020f 	and.w	r2, r6, #15
 8008438:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	ec51 0b19 	vmov	r0, r1, d9
 8008444:	f7f8 f8e8 	bl	8000618 <__aeabi_dmul>
 8008448:	1136      	asrs	r6, r6, #4
 800844a:	4682      	mov	sl, r0
 800844c:	468b      	mov	fp, r1
 800844e:	2300      	movs	r3, #0
 8008450:	2502      	movs	r5, #2
 8008452:	2e00      	cmp	r6, #0
 8008454:	d17a      	bne.n	800854c <_dtoa_r+0x4c4>
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1d3      	bne.n	8008402 <_dtoa_r+0x37a>
 800845a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 8082 	beq.w	8008566 <_dtoa_r+0x4de>
 8008462:	4b91      	ldr	r3, [pc, #580]	; (80086a8 <_dtoa_r+0x620>)
 8008464:	2200      	movs	r2, #0
 8008466:	4650      	mov	r0, sl
 8008468:	4659      	mov	r1, fp
 800846a:	f7f8 fb47 	bl	8000afc <__aeabi_dcmplt>
 800846e:	2800      	cmp	r0, #0
 8008470:	d079      	beq.n	8008566 <_dtoa_r+0x4de>
 8008472:	9b03      	ldr	r3, [sp, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d076      	beq.n	8008566 <_dtoa_r+0x4de>
 8008478:	9b02      	ldr	r3, [sp, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	dd36      	ble.n	80084ec <_dtoa_r+0x464>
 800847e:	9b00      	ldr	r3, [sp, #0]
 8008480:	4650      	mov	r0, sl
 8008482:	4659      	mov	r1, fp
 8008484:	1e5f      	subs	r7, r3, #1
 8008486:	2200      	movs	r2, #0
 8008488:	4b88      	ldr	r3, [pc, #544]	; (80086ac <_dtoa_r+0x624>)
 800848a:	f7f8 f8c5 	bl	8000618 <__aeabi_dmul>
 800848e:	9e02      	ldr	r6, [sp, #8]
 8008490:	4682      	mov	sl, r0
 8008492:	468b      	mov	fp, r1
 8008494:	3501      	adds	r5, #1
 8008496:	4628      	mov	r0, r5
 8008498:	f7f8 f854 	bl	8000544 <__aeabi_i2d>
 800849c:	4652      	mov	r2, sl
 800849e:	465b      	mov	r3, fp
 80084a0:	f7f8 f8ba 	bl	8000618 <__aeabi_dmul>
 80084a4:	4b82      	ldr	r3, [pc, #520]	; (80086b0 <_dtoa_r+0x628>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	f7f7 ff00 	bl	80002ac <__adddf3>
 80084ac:	46d0      	mov	r8, sl
 80084ae:	46d9      	mov	r9, fp
 80084b0:	4682      	mov	sl, r0
 80084b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80084b6:	2e00      	cmp	r6, #0
 80084b8:	d158      	bne.n	800856c <_dtoa_r+0x4e4>
 80084ba:	4b7e      	ldr	r3, [pc, #504]	; (80086b4 <_dtoa_r+0x62c>)
 80084bc:	2200      	movs	r2, #0
 80084be:	4640      	mov	r0, r8
 80084c0:	4649      	mov	r1, r9
 80084c2:	f7f7 fef1 	bl	80002a8 <__aeabi_dsub>
 80084c6:	4652      	mov	r2, sl
 80084c8:	465b      	mov	r3, fp
 80084ca:	4680      	mov	r8, r0
 80084cc:	4689      	mov	r9, r1
 80084ce:	f7f8 fb33 	bl	8000b38 <__aeabi_dcmpgt>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	f040 8295 	bne.w	8008a02 <_dtoa_r+0x97a>
 80084d8:	4652      	mov	r2, sl
 80084da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80084de:	4640      	mov	r0, r8
 80084e0:	4649      	mov	r1, r9
 80084e2:	f7f8 fb0b 	bl	8000afc <__aeabi_dcmplt>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	f040 8289 	bne.w	80089fe <_dtoa_r+0x976>
 80084ec:	ec5b ab19 	vmov	sl, fp, d9
 80084f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f2c0 8148 	blt.w	8008788 <_dtoa_r+0x700>
 80084f8:	9a00      	ldr	r2, [sp, #0]
 80084fa:	2a0e      	cmp	r2, #14
 80084fc:	f300 8144 	bgt.w	8008788 <_dtoa_r+0x700>
 8008500:	4b67      	ldr	r3, [pc, #412]	; (80086a0 <_dtoa_r+0x618>)
 8008502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008506:	e9d3 8900 	ldrd	r8, r9, [r3]
 800850a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850c:	2b00      	cmp	r3, #0
 800850e:	f280 80d5 	bge.w	80086bc <_dtoa_r+0x634>
 8008512:	9b03      	ldr	r3, [sp, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	f300 80d1 	bgt.w	80086bc <_dtoa_r+0x634>
 800851a:	f040 826f 	bne.w	80089fc <_dtoa_r+0x974>
 800851e:	4b65      	ldr	r3, [pc, #404]	; (80086b4 <_dtoa_r+0x62c>)
 8008520:	2200      	movs	r2, #0
 8008522:	4640      	mov	r0, r8
 8008524:	4649      	mov	r1, r9
 8008526:	f7f8 f877 	bl	8000618 <__aeabi_dmul>
 800852a:	4652      	mov	r2, sl
 800852c:	465b      	mov	r3, fp
 800852e:	f7f8 faf9 	bl	8000b24 <__aeabi_dcmpge>
 8008532:	9e03      	ldr	r6, [sp, #12]
 8008534:	4637      	mov	r7, r6
 8008536:	2800      	cmp	r0, #0
 8008538:	f040 8245 	bne.w	80089c6 <_dtoa_r+0x93e>
 800853c:	9d01      	ldr	r5, [sp, #4]
 800853e:	2331      	movs	r3, #49	; 0x31
 8008540:	f805 3b01 	strb.w	r3, [r5], #1
 8008544:	9b00      	ldr	r3, [sp, #0]
 8008546:	3301      	adds	r3, #1
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	e240      	b.n	80089ce <_dtoa_r+0x946>
 800854c:	07f2      	lsls	r2, r6, #31
 800854e:	d505      	bpl.n	800855c <_dtoa_r+0x4d4>
 8008550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008554:	f7f8 f860 	bl	8000618 <__aeabi_dmul>
 8008558:	3501      	adds	r5, #1
 800855a:	2301      	movs	r3, #1
 800855c:	1076      	asrs	r6, r6, #1
 800855e:	3708      	adds	r7, #8
 8008560:	e777      	b.n	8008452 <_dtoa_r+0x3ca>
 8008562:	2502      	movs	r5, #2
 8008564:	e779      	b.n	800845a <_dtoa_r+0x3d2>
 8008566:	9f00      	ldr	r7, [sp, #0]
 8008568:	9e03      	ldr	r6, [sp, #12]
 800856a:	e794      	b.n	8008496 <_dtoa_r+0x40e>
 800856c:	9901      	ldr	r1, [sp, #4]
 800856e:	4b4c      	ldr	r3, [pc, #304]	; (80086a0 <_dtoa_r+0x618>)
 8008570:	4431      	add	r1, r6
 8008572:	910d      	str	r1, [sp, #52]	; 0x34
 8008574:	9908      	ldr	r1, [sp, #32]
 8008576:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800857a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800857e:	2900      	cmp	r1, #0
 8008580:	d043      	beq.n	800860a <_dtoa_r+0x582>
 8008582:	494d      	ldr	r1, [pc, #308]	; (80086b8 <_dtoa_r+0x630>)
 8008584:	2000      	movs	r0, #0
 8008586:	f7f8 f971 	bl	800086c <__aeabi_ddiv>
 800858a:	4652      	mov	r2, sl
 800858c:	465b      	mov	r3, fp
 800858e:	f7f7 fe8b 	bl	80002a8 <__aeabi_dsub>
 8008592:	9d01      	ldr	r5, [sp, #4]
 8008594:	4682      	mov	sl, r0
 8008596:	468b      	mov	fp, r1
 8008598:	4649      	mov	r1, r9
 800859a:	4640      	mov	r0, r8
 800859c:	f7f8 faec 	bl	8000b78 <__aeabi_d2iz>
 80085a0:	4606      	mov	r6, r0
 80085a2:	f7f7 ffcf 	bl	8000544 <__aeabi_i2d>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	4640      	mov	r0, r8
 80085ac:	4649      	mov	r1, r9
 80085ae:	f7f7 fe7b 	bl	80002a8 <__aeabi_dsub>
 80085b2:	3630      	adds	r6, #48	; 0x30
 80085b4:	f805 6b01 	strb.w	r6, [r5], #1
 80085b8:	4652      	mov	r2, sl
 80085ba:	465b      	mov	r3, fp
 80085bc:	4680      	mov	r8, r0
 80085be:	4689      	mov	r9, r1
 80085c0:	f7f8 fa9c 	bl	8000afc <__aeabi_dcmplt>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d163      	bne.n	8008690 <_dtoa_r+0x608>
 80085c8:	4642      	mov	r2, r8
 80085ca:	464b      	mov	r3, r9
 80085cc:	4936      	ldr	r1, [pc, #216]	; (80086a8 <_dtoa_r+0x620>)
 80085ce:	2000      	movs	r0, #0
 80085d0:	f7f7 fe6a 	bl	80002a8 <__aeabi_dsub>
 80085d4:	4652      	mov	r2, sl
 80085d6:	465b      	mov	r3, fp
 80085d8:	f7f8 fa90 	bl	8000afc <__aeabi_dcmplt>
 80085dc:	2800      	cmp	r0, #0
 80085de:	f040 80b5 	bne.w	800874c <_dtoa_r+0x6c4>
 80085e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085e4:	429d      	cmp	r5, r3
 80085e6:	d081      	beq.n	80084ec <_dtoa_r+0x464>
 80085e8:	4b30      	ldr	r3, [pc, #192]	; (80086ac <_dtoa_r+0x624>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	4650      	mov	r0, sl
 80085ee:	4659      	mov	r1, fp
 80085f0:	f7f8 f812 	bl	8000618 <__aeabi_dmul>
 80085f4:	4b2d      	ldr	r3, [pc, #180]	; (80086ac <_dtoa_r+0x624>)
 80085f6:	4682      	mov	sl, r0
 80085f8:	468b      	mov	fp, r1
 80085fa:	4640      	mov	r0, r8
 80085fc:	4649      	mov	r1, r9
 80085fe:	2200      	movs	r2, #0
 8008600:	f7f8 f80a 	bl	8000618 <__aeabi_dmul>
 8008604:	4680      	mov	r8, r0
 8008606:	4689      	mov	r9, r1
 8008608:	e7c6      	b.n	8008598 <_dtoa_r+0x510>
 800860a:	4650      	mov	r0, sl
 800860c:	4659      	mov	r1, fp
 800860e:	f7f8 f803 	bl	8000618 <__aeabi_dmul>
 8008612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008614:	9d01      	ldr	r5, [sp, #4]
 8008616:	930f      	str	r3, [sp, #60]	; 0x3c
 8008618:	4682      	mov	sl, r0
 800861a:	468b      	mov	fp, r1
 800861c:	4649      	mov	r1, r9
 800861e:	4640      	mov	r0, r8
 8008620:	f7f8 faaa 	bl	8000b78 <__aeabi_d2iz>
 8008624:	4606      	mov	r6, r0
 8008626:	f7f7 ff8d 	bl	8000544 <__aeabi_i2d>
 800862a:	3630      	adds	r6, #48	; 0x30
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4640      	mov	r0, r8
 8008632:	4649      	mov	r1, r9
 8008634:	f7f7 fe38 	bl	80002a8 <__aeabi_dsub>
 8008638:	f805 6b01 	strb.w	r6, [r5], #1
 800863c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800863e:	429d      	cmp	r5, r3
 8008640:	4680      	mov	r8, r0
 8008642:	4689      	mov	r9, r1
 8008644:	f04f 0200 	mov.w	r2, #0
 8008648:	d124      	bne.n	8008694 <_dtoa_r+0x60c>
 800864a:	4b1b      	ldr	r3, [pc, #108]	; (80086b8 <_dtoa_r+0x630>)
 800864c:	4650      	mov	r0, sl
 800864e:	4659      	mov	r1, fp
 8008650:	f7f7 fe2c 	bl	80002ac <__adddf3>
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	4640      	mov	r0, r8
 800865a:	4649      	mov	r1, r9
 800865c:	f7f8 fa6c 	bl	8000b38 <__aeabi_dcmpgt>
 8008660:	2800      	cmp	r0, #0
 8008662:	d173      	bne.n	800874c <_dtoa_r+0x6c4>
 8008664:	4652      	mov	r2, sl
 8008666:	465b      	mov	r3, fp
 8008668:	4913      	ldr	r1, [pc, #76]	; (80086b8 <_dtoa_r+0x630>)
 800866a:	2000      	movs	r0, #0
 800866c:	f7f7 fe1c 	bl	80002a8 <__aeabi_dsub>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4640      	mov	r0, r8
 8008676:	4649      	mov	r1, r9
 8008678:	f7f8 fa40 	bl	8000afc <__aeabi_dcmplt>
 800867c:	2800      	cmp	r0, #0
 800867e:	f43f af35 	beq.w	80084ec <_dtoa_r+0x464>
 8008682:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008684:	1e6b      	subs	r3, r5, #1
 8008686:	930f      	str	r3, [sp, #60]	; 0x3c
 8008688:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800868c:	2b30      	cmp	r3, #48	; 0x30
 800868e:	d0f8      	beq.n	8008682 <_dtoa_r+0x5fa>
 8008690:	9700      	str	r7, [sp, #0]
 8008692:	e049      	b.n	8008728 <_dtoa_r+0x6a0>
 8008694:	4b05      	ldr	r3, [pc, #20]	; (80086ac <_dtoa_r+0x624>)
 8008696:	f7f7 ffbf 	bl	8000618 <__aeabi_dmul>
 800869a:	4680      	mov	r8, r0
 800869c:	4689      	mov	r9, r1
 800869e:	e7bd      	b.n	800861c <_dtoa_r+0x594>
 80086a0:	0800b138 	.word	0x0800b138
 80086a4:	0800b110 	.word	0x0800b110
 80086a8:	3ff00000 	.word	0x3ff00000
 80086ac:	40240000 	.word	0x40240000
 80086b0:	401c0000 	.word	0x401c0000
 80086b4:	40140000 	.word	0x40140000
 80086b8:	3fe00000 	.word	0x3fe00000
 80086bc:	9d01      	ldr	r5, [sp, #4]
 80086be:	4656      	mov	r6, sl
 80086c0:	465f      	mov	r7, fp
 80086c2:	4642      	mov	r2, r8
 80086c4:	464b      	mov	r3, r9
 80086c6:	4630      	mov	r0, r6
 80086c8:	4639      	mov	r1, r7
 80086ca:	f7f8 f8cf 	bl	800086c <__aeabi_ddiv>
 80086ce:	f7f8 fa53 	bl	8000b78 <__aeabi_d2iz>
 80086d2:	4682      	mov	sl, r0
 80086d4:	f7f7 ff36 	bl	8000544 <__aeabi_i2d>
 80086d8:	4642      	mov	r2, r8
 80086da:	464b      	mov	r3, r9
 80086dc:	f7f7 ff9c 	bl	8000618 <__aeabi_dmul>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4630      	mov	r0, r6
 80086e6:	4639      	mov	r1, r7
 80086e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80086ec:	f7f7 fddc 	bl	80002a8 <__aeabi_dsub>
 80086f0:	f805 6b01 	strb.w	r6, [r5], #1
 80086f4:	9e01      	ldr	r6, [sp, #4]
 80086f6:	9f03      	ldr	r7, [sp, #12]
 80086f8:	1bae      	subs	r6, r5, r6
 80086fa:	42b7      	cmp	r7, r6
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	d135      	bne.n	800876e <_dtoa_r+0x6e6>
 8008702:	f7f7 fdd3 	bl	80002ac <__adddf3>
 8008706:	4642      	mov	r2, r8
 8008708:	464b      	mov	r3, r9
 800870a:	4606      	mov	r6, r0
 800870c:	460f      	mov	r7, r1
 800870e:	f7f8 fa13 	bl	8000b38 <__aeabi_dcmpgt>
 8008712:	b9d0      	cbnz	r0, 800874a <_dtoa_r+0x6c2>
 8008714:	4642      	mov	r2, r8
 8008716:	464b      	mov	r3, r9
 8008718:	4630      	mov	r0, r6
 800871a:	4639      	mov	r1, r7
 800871c:	f7f8 f9e4 	bl	8000ae8 <__aeabi_dcmpeq>
 8008720:	b110      	cbz	r0, 8008728 <_dtoa_r+0x6a0>
 8008722:	f01a 0f01 	tst.w	sl, #1
 8008726:	d110      	bne.n	800874a <_dtoa_r+0x6c2>
 8008728:	4620      	mov	r0, r4
 800872a:	ee18 1a10 	vmov	r1, s16
 800872e:	f000 fe75 	bl	800941c <_Bfree>
 8008732:	2300      	movs	r3, #0
 8008734:	9800      	ldr	r0, [sp, #0]
 8008736:	702b      	strb	r3, [r5, #0]
 8008738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800873a:	3001      	adds	r0, #1
 800873c:	6018      	str	r0, [r3, #0]
 800873e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008740:	2b00      	cmp	r3, #0
 8008742:	f43f acf1 	beq.w	8008128 <_dtoa_r+0xa0>
 8008746:	601d      	str	r5, [r3, #0]
 8008748:	e4ee      	b.n	8008128 <_dtoa_r+0xa0>
 800874a:	9f00      	ldr	r7, [sp, #0]
 800874c:	462b      	mov	r3, r5
 800874e:	461d      	mov	r5, r3
 8008750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008754:	2a39      	cmp	r2, #57	; 0x39
 8008756:	d106      	bne.n	8008766 <_dtoa_r+0x6de>
 8008758:	9a01      	ldr	r2, [sp, #4]
 800875a:	429a      	cmp	r2, r3
 800875c:	d1f7      	bne.n	800874e <_dtoa_r+0x6c6>
 800875e:	9901      	ldr	r1, [sp, #4]
 8008760:	2230      	movs	r2, #48	; 0x30
 8008762:	3701      	adds	r7, #1
 8008764:	700a      	strb	r2, [r1, #0]
 8008766:	781a      	ldrb	r2, [r3, #0]
 8008768:	3201      	adds	r2, #1
 800876a:	701a      	strb	r2, [r3, #0]
 800876c:	e790      	b.n	8008690 <_dtoa_r+0x608>
 800876e:	4ba6      	ldr	r3, [pc, #664]	; (8008a08 <_dtoa_r+0x980>)
 8008770:	2200      	movs	r2, #0
 8008772:	f7f7 ff51 	bl	8000618 <__aeabi_dmul>
 8008776:	2200      	movs	r2, #0
 8008778:	2300      	movs	r3, #0
 800877a:	4606      	mov	r6, r0
 800877c:	460f      	mov	r7, r1
 800877e:	f7f8 f9b3 	bl	8000ae8 <__aeabi_dcmpeq>
 8008782:	2800      	cmp	r0, #0
 8008784:	d09d      	beq.n	80086c2 <_dtoa_r+0x63a>
 8008786:	e7cf      	b.n	8008728 <_dtoa_r+0x6a0>
 8008788:	9a08      	ldr	r2, [sp, #32]
 800878a:	2a00      	cmp	r2, #0
 800878c:	f000 80d7 	beq.w	800893e <_dtoa_r+0x8b6>
 8008790:	9a06      	ldr	r2, [sp, #24]
 8008792:	2a01      	cmp	r2, #1
 8008794:	f300 80ba 	bgt.w	800890c <_dtoa_r+0x884>
 8008798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800879a:	2a00      	cmp	r2, #0
 800879c:	f000 80b2 	beq.w	8008904 <_dtoa_r+0x87c>
 80087a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087a4:	9e07      	ldr	r6, [sp, #28]
 80087a6:	9d04      	ldr	r5, [sp, #16]
 80087a8:	9a04      	ldr	r2, [sp, #16]
 80087aa:	441a      	add	r2, r3
 80087ac:	9204      	str	r2, [sp, #16]
 80087ae:	9a05      	ldr	r2, [sp, #20]
 80087b0:	2101      	movs	r1, #1
 80087b2:	441a      	add	r2, r3
 80087b4:	4620      	mov	r0, r4
 80087b6:	9205      	str	r2, [sp, #20]
 80087b8:	f000 ff32 	bl	8009620 <__i2b>
 80087bc:	4607      	mov	r7, r0
 80087be:	2d00      	cmp	r5, #0
 80087c0:	dd0c      	ble.n	80087dc <_dtoa_r+0x754>
 80087c2:	9b05      	ldr	r3, [sp, #20]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	dd09      	ble.n	80087dc <_dtoa_r+0x754>
 80087c8:	42ab      	cmp	r3, r5
 80087ca:	9a04      	ldr	r2, [sp, #16]
 80087cc:	bfa8      	it	ge
 80087ce:	462b      	movge	r3, r5
 80087d0:	1ad2      	subs	r2, r2, r3
 80087d2:	9204      	str	r2, [sp, #16]
 80087d4:	9a05      	ldr	r2, [sp, #20]
 80087d6:	1aed      	subs	r5, r5, r3
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	9305      	str	r3, [sp, #20]
 80087dc:	9b07      	ldr	r3, [sp, #28]
 80087de:	b31b      	cbz	r3, 8008828 <_dtoa_r+0x7a0>
 80087e0:	9b08      	ldr	r3, [sp, #32]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 80af 	beq.w	8008946 <_dtoa_r+0x8be>
 80087e8:	2e00      	cmp	r6, #0
 80087ea:	dd13      	ble.n	8008814 <_dtoa_r+0x78c>
 80087ec:	4639      	mov	r1, r7
 80087ee:	4632      	mov	r2, r6
 80087f0:	4620      	mov	r0, r4
 80087f2:	f000 ffd5 	bl	80097a0 <__pow5mult>
 80087f6:	ee18 2a10 	vmov	r2, s16
 80087fa:	4601      	mov	r1, r0
 80087fc:	4607      	mov	r7, r0
 80087fe:	4620      	mov	r0, r4
 8008800:	f000 ff24 	bl	800964c <__multiply>
 8008804:	ee18 1a10 	vmov	r1, s16
 8008808:	4680      	mov	r8, r0
 800880a:	4620      	mov	r0, r4
 800880c:	f000 fe06 	bl	800941c <_Bfree>
 8008810:	ee08 8a10 	vmov	s16, r8
 8008814:	9b07      	ldr	r3, [sp, #28]
 8008816:	1b9a      	subs	r2, r3, r6
 8008818:	d006      	beq.n	8008828 <_dtoa_r+0x7a0>
 800881a:	ee18 1a10 	vmov	r1, s16
 800881e:	4620      	mov	r0, r4
 8008820:	f000 ffbe 	bl	80097a0 <__pow5mult>
 8008824:	ee08 0a10 	vmov	s16, r0
 8008828:	2101      	movs	r1, #1
 800882a:	4620      	mov	r0, r4
 800882c:	f000 fef8 	bl	8009620 <__i2b>
 8008830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008832:	2b00      	cmp	r3, #0
 8008834:	4606      	mov	r6, r0
 8008836:	f340 8088 	ble.w	800894a <_dtoa_r+0x8c2>
 800883a:	461a      	mov	r2, r3
 800883c:	4601      	mov	r1, r0
 800883e:	4620      	mov	r0, r4
 8008840:	f000 ffae 	bl	80097a0 <__pow5mult>
 8008844:	9b06      	ldr	r3, [sp, #24]
 8008846:	2b01      	cmp	r3, #1
 8008848:	4606      	mov	r6, r0
 800884a:	f340 8081 	ble.w	8008950 <_dtoa_r+0x8c8>
 800884e:	f04f 0800 	mov.w	r8, #0
 8008852:	6933      	ldr	r3, [r6, #16]
 8008854:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008858:	6918      	ldr	r0, [r3, #16]
 800885a:	f000 fe91 	bl	8009580 <__hi0bits>
 800885e:	f1c0 0020 	rsb	r0, r0, #32
 8008862:	9b05      	ldr	r3, [sp, #20]
 8008864:	4418      	add	r0, r3
 8008866:	f010 001f 	ands.w	r0, r0, #31
 800886a:	f000 8092 	beq.w	8008992 <_dtoa_r+0x90a>
 800886e:	f1c0 0320 	rsb	r3, r0, #32
 8008872:	2b04      	cmp	r3, #4
 8008874:	f340 808a 	ble.w	800898c <_dtoa_r+0x904>
 8008878:	f1c0 001c 	rsb	r0, r0, #28
 800887c:	9b04      	ldr	r3, [sp, #16]
 800887e:	4403      	add	r3, r0
 8008880:	9304      	str	r3, [sp, #16]
 8008882:	9b05      	ldr	r3, [sp, #20]
 8008884:	4403      	add	r3, r0
 8008886:	4405      	add	r5, r0
 8008888:	9305      	str	r3, [sp, #20]
 800888a:	9b04      	ldr	r3, [sp, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	dd07      	ble.n	80088a0 <_dtoa_r+0x818>
 8008890:	ee18 1a10 	vmov	r1, s16
 8008894:	461a      	mov	r2, r3
 8008896:	4620      	mov	r0, r4
 8008898:	f000 ffdc 	bl	8009854 <__lshift>
 800889c:	ee08 0a10 	vmov	s16, r0
 80088a0:	9b05      	ldr	r3, [sp, #20]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	dd05      	ble.n	80088b2 <_dtoa_r+0x82a>
 80088a6:	4631      	mov	r1, r6
 80088a8:	461a      	mov	r2, r3
 80088aa:	4620      	mov	r0, r4
 80088ac:	f000 ffd2 	bl	8009854 <__lshift>
 80088b0:	4606      	mov	r6, r0
 80088b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d06e      	beq.n	8008996 <_dtoa_r+0x90e>
 80088b8:	ee18 0a10 	vmov	r0, s16
 80088bc:	4631      	mov	r1, r6
 80088be:	f001 f839 	bl	8009934 <__mcmp>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	da67      	bge.n	8008996 <_dtoa_r+0x90e>
 80088c6:	9b00      	ldr	r3, [sp, #0]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	ee18 1a10 	vmov	r1, s16
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	220a      	movs	r2, #10
 80088d2:	2300      	movs	r3, #0
 80088d4:	4620      	mov	r0, r4
 80088d6:	f000 fdc3 	bl	8009460 <__multadd>
 80088da:	9b08      	ldr	r3, [sp, #32]
 80088dc:	ee08 0a10 	vmov	s16, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 81b1 	beq.w	8008c48 <_dtoa_r+0xbc0>
 80088e6:	2300      	movs	r3, #0
 80088e8:	4639      	mov	r1, r7
 80088ea:	220a      	movs	r2, #10
 80088ec:	4620      	mov	r0, r4
 80088ee:	f000 fdb7 	bl	8009460 <__multadd>
 80088f2:	9b02      	ldr	r3, [sp, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	4607      	mov	r7, r0
 80088f8:	f300 808e 	bgt.w	8008a18 <_dtoa_r+0x990>
 80088fc:	9b06      	ldr	r3, [sp, #24]
 80088fe:	2b02      	cmp	r3, #2
 8008900:	dc51      	bgt.n	80089a6 <_dtoa_r+0x91e>
 8008902:	e089      	b.n	8008a18 <_dtoa_r+0x990>
 8008904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008906:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800890a:	e74b      	b.n	80087a4 <_dtoa_r+0x71c>
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	1e5e      	subs	r6, r3, #1
 8008910:	9b07      	ldr	r3, [sp, #28]
 8008912:	42b3      	cmp	r3, r6
 8008914:	bfbf      	itttt	lt
 8008916:	9b07      	ldrlt	r3, [sp, #28]
 8008918:	9607      	strlt	r6, [sp, #28]
 800891a:	1af2      	sublt	r2, r6, r3
 800891c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800891e:	bfb6      	itet	lt
 8008920:	189b      	addlt	r3, r3, r2
 8008922:	1b9e      	subge	r6, r3, r6
 8008924:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008926:	9b03      	ldr	r3, [sp, #12]
 8008928:	bfb8      	it	lt
 800892a:	2600      	movlt	r6, #0
 800892c:	2b00      	cmp	r3, #0
 800892e:	bfb7      	itett	lt
 8008930:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008934:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008938:	1a9d      	sublt	r5, r3, r2
 800893a:	2300      	movlt	r3, #0
 800893c:	e734      	b.n	80087a8 <_dtoa_r+0x720>
 800893e:	9e07      	ldr	r6, [sp, #28]
 8008940:	9d04      	ldr	r5, [sp, #16]
 8008942:	9f08      	ldr	r7, [sp, #32]
 8008944:	e73b      	b.n	80087be <_dtoa_r+0x736>
 8008946:	9a07      	ldr	r2, [sp, #28]
 8008948:	e767      	b.n	800881a <_dtoa_r+0x792>
 800894a:	9b06      	ldr	r3, [sp, #24]
 800894c:	2b01      	cmp	r3, #1
 800894e:	dc18      	bgt.n	8008982 <_dtoa_r+0x8fa>
 8008950:	f1ba 0f00 	cmp.w	sl, #0
 8008954:	d115      	bne.n	8008982 <_dtoa_r+0x8fa>
 8008956:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800895a:	b993      	cbnz	r3, 8008982 <_dtoa_r+0x8fa>
 800895c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008960:	0d1b      	lsrs	r3, r3, #20
 8008962:	051b      	lsls	r3, r3, #20
 8008964:	b183      	cbz	r3, 8008988 <_dtoa_r+0x900>
 8008966:	9b04      	ldr	r3, [sp, #16]
 8008968:	3301      	adds	r3, #1
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	9b05      	ldr	r3, [sp, #20]
 800896e:	3301      	adds	r3, #1
 8008970:	9305      	str	r3, [sp, #20]
 8008972:	f04f 0801 	mov.w	r8, #1
 8008976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008978:	2b00      	cmp	r3, #0
 800897a:	f47f af6a 	bne.w	8008852 <_dtoa_r+0x7ca>
 800897e:	2001      	movs	r0, #1
 8008980:	e76f      	b.n	8008862 <_dtoa_r+0x7da>
 8008982:	f04f 0800 	mov.w	r8, #0
 8008986:	e7f6      	b.n	8008976 <_dtoa_r+0x8ee>
 8008988:	4698      	mov	r8, r3
 800898a:	e7f4      	b.n	8008976 <_dtoa_r+0x8ee>
 800898c:	f43f af7d 	beq.w	800888a <_dtoa_r+0x802>
 8008990:	4618      	mov	r0, r3
 8008992:	301c      	adds	r0, #28
 8008994:	e772      	b.n	800887c <_dtoa_r+0x7f4>
 8008996:	9b03      	ldr	r3, [sp, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	dc37      	bgt.n	8008a0c <_dtoa_r+0x984>
 800899c:	9b06      	ldr	r3, [sp, #24]
 800899e:	2b02      	cmp	r3, #2
 80089a0:	dd34      	ble.n	8008a0c <_dtoa_r+0x984>
 80089a2:	9b03      	ldr	r3, [sp, #12]
 80089a4:	9302      	str	r3, [sp, #8]
 80089a6:	9b02      	ldr	r3, [sp, #8]
 80089a8:	b96b      	cbnz	r3, 80089c6 <_dtoa_r+0x93e>
 80089aa:	4631      	mov	r1, r6
 80089ac:	2205      	movs	r2, #5
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 fd56 	bl	8009460 <__multadd>
 80089b4:	4601      	mov	r1, r0
 80089b6:	4606      	mov	r6, r0
 80089b8:	ee18 0a10 	vmov	r0, s16
 80089bc:	f000 ffba 	bl	8009934 <__mcmp>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	f73f adbb 	bgt.w	800853c <_dtoa_r+0x4b4>
 80089c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c8:	9d01      	ldr	r5, [sp, #4]
 80089ca:	43db      	mvns	r3, r3
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	f04f 0800 	mov.w	r8, #0
 80089d2:	4631      	mov	r1, r6
 80089d4:	4620      	mov	r0, r4
 80089d6:	f000 fd21 	bl	800941c <_Bfree>
 80089da:	2f00      	cmp	r7, #0
 80089dc:	f43f aea4 	beq.w	8008728 <_dtoa_r+0x6a0>
 80089e0:	f1b8 0f00 	cmp.w	r8, #0
 80089e4:	d005      	beq.n	80089f2 <_dtoa_r+0x96a>
 80089e6:	45b8      	cmp	r8, r7
 80089e8:	d003      	beq.n	80089f2 <_dtoa_r+0x96a>
 80089ea:	4641      	mov	r1, r8
 80089ec:	4620      	mov	r0, r4
 80089ee:	f000 fd15 	bl	800941c <_Bfree>
 80089f2:	4639      	mov	r1, r7
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 fd11 	bl	800941c <_Bfree>
 80089fa:	e695      	b.n	8008728 <_dtoa_r+0x6a0>
 80089fc:	2600      	movs	r6, #0
 80089fe:	4637      	mov	r7, r6
 8008a00:	e7e1      	b.n	80089c6 <_dtoa_r+0x93e>
 8008a02:	9700      	str	r7, [sp, #0]
 8008a04:	4637      	mov	r7, r6
 8008a06:	e599      	b.n	800853c <_dtoa_r+0x4b4>
 8008a08:	40240000 	.word	0x40240000
 8008a0c:	9b08      	ldr	r3, [sp, #32]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f000 80ca 	beq.w	8008ba8 <_dtoa_r+0xb20>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	9302      	str	r3, [sp, #8]
 8008a18:	2d00      	cmp	r5, #0
 8008a1a:	dd05      	ble.n	8008a28 <_dtoa_r+0x9a0>
 8008a1c:	4639      	mov	r1, r7
 8008a1e:	462a      	mov	r2, r5
 8008a20:	4620      	mov	r0, r4
 8008a22:	f000 ff17 	bl	8009854 <__lshift>
 8008a26:	4607      	mov	r7, r0
 8008a28:	f1b8 0f00 	cmp.w	r8, #0
 8008a2c:	d05b      	beq.n	8008ae6 <_dtoa_r+0xa5e>
 8008a2e:	6879      	ldr	r1, [r7, #4]
 8008a30:	4620      	mov	r0, r4
 8008a32:	f000 fcb3 	bl	800939c <_Balloc>
 8008a36:	4605      	mov	r5, r0
 8008a38:	b928      	cbnz	r0, 8008a46 <_dtoa_r+0x9be>
 8008a3a:	4b87      	ldr	r3, [pc, #540]	; (8008c58 <_dtoa_r+0xbd0>)
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a42:	f7ff bb3b 	b.w	80080bc <_dtoa_r+0x34>
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	3202      	adds	r2, #2
 8008a4a:	0092      	lsls	r2, r2, #2
 8008a4c:	f107 010c 	add.w	r1, r7, #12
 8008a50:	300c      	adds	r0, #12
 8008a52:	f000 fc95 	bl	8009380 <memcpy>
 8008a56:	2201      	movs	r2, #1
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fefa 	bl	8009854 <__lshift>
 8008a60:	9b01      	ldr	r3, [sp, #4]
 8008a62:	f103 0901 	add.w	r9, r3, #1
 8008a66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	9305      	str	r3, [sp, #20]
 8008a6e:	f00a 0301 	and.w	r3, sl, #1
 8008a72:	46b8      	mov	r8, r7
 8008a74:	9304      	str	r3, [sp, #16]
 8008a76:	4607      	mov	r7, r0
 8008a78:	4631      	mov	r1, r6
 8008a7a:	ee18 0a10 	vmov	r0, s16
 8008a7e:	f7ff fa77 	bl	8007f70 <quorem>
 8008a82:	4641      	mov	r1, r8
 8008a84:	9002      	str	r0, [sp, #8]
 8008a86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a8a:	ee18 0a10 	vmov	r0, s16
 8008a8e:	f000 ff51 	bl	8009934 <__mcmp>
 8008a92:	463a      	mov	r2, r7
 8008a94:	9003      	str	r0, [sp, #12]
 8008a96:	4631      	mov	r1, r6
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f000 ff67 	bl	800996c <__mdiff>
 8008a9e:	68c2      	ldr	r2, [r0, #12]
 8008aa0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	bb02      	cbnz	r2, 8008aea <_dtoa_r+0xa62>
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	ee18 0a10 	vmov	r0, s16
 8008aae:	f000 ff41 	bl	8009934 <__mcmp>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	9207      	str	r2, [sp, #28]
 8008aba:	f000 fcaf 	bl	800941c <_Bfree>
 8008abe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008ac2:	ea43 0102 	orr.w	r1, r3, r2
 8008ac6:	9b04      	ldr	r3, [sp, #16]
 8008ac8:	430b      	orrs	r3, r1
 8008aca:	464d      	mov	r5, r9
 8008acc:	d10f      	bne.n	8008aee <_dtoa_r+0xa66>
 8008ace:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ad2:	d02a      	beq.n	8008b2a <_dtoa_r+0xaa2>
 8008ad4:	9b03      	ldr	r3, [sp, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	dd02      	ble.n	8008ae0 <_dtoa_r+0xa58>
 8008ada:	9b02      	ldr	r3, [sp, #8]
 8008adc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008ae0:	f88b a000 	strb.w	sl, [fp]
 8008ae4:	e775      	b.n	80089d2 <_dtoa_r+0x94a>
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	e7ba      	b.n	8008a60 <_dtoa_r+0x9d8>
 8008aea:	2201      	movs	r2, #1
 8008aec:	e7e2      	b.n	8008ab4 <_dtoa_r+0xa2c>
 8008aee:	9b03      	ldr	r3, [sp, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	db04      	blt.n	8008afe <_dtoa_r+0xa76>
 8008af4:	9906      	ldr	r1, [sp, #24]
 8008af6:	430b      	orrs	r3, r1
 8008af8:	9904      	ldr	r1, [sp, #16]
 8008afa:	430b      	orrs	r3, r1
 8008afc:	d122      	bne.n	8008b44 <_dtoa_r+0xabc>
 8008afe:	2a00      	cmp	r2, #0
 8008b00:	ddee      	ble.n	8008ae0 <_dtoa_r+0xa58>
 8008b02:	ee18 1a10 	vmov	r1, s16
 8008b06:	2201      	movs	r2, #1
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 fea3 	bl	8009854 <__lshift>
 8008b0e:	4631      	mov	r1, r6
 8008b10:	ee08 0a10 	vmov	s16, r0
 8008b14:	f000 ff0e 	bl	8009934 <__mcmp>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	dc03      	bgt.n	8008b24 <_dtoa_r+0xa9c>
 8008b1c:	d1e0      	bne.n	8008ae0 <_dtoa_r+0xa58>
 8008b1e:	f01a 0f01 	tst.w	sl, #1
 8008b22:	d0dd      	beq.n	8008ae0 <_dtoa_r+0xa58>
 8008b24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b28:	d1d7      	bne.n	8008ada <_dtoa_r+0xa52>
 8008b2a:	2339      	movs	r3, #57	; 0x39
 8008b2c:	f88b 3000 	strb.w	r3, [fp]
 8008b30:	462b      	mov	r3, r5
 8008b32:	461d      	mov	r5, r3
 8008b34:	3b01      	subs	r3, #1
 8008b36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b3a:	2a39      	cmp	r2, #57	; 0x39
 8008b3c:	d071      	beq.n	8008c22 <_dtoa_r+0xb9a>
 8008b3e:	3201      	adds	r2, #1
 8008b40:	701a      	strb	r2, [r3, #0]
 8008b42:	e746      	b.n	80089d2 <_dtoa_r+0x94a>
 8008b44:	2a00      	cmp	r2, #0
 8008b46:	dd07      	ble.n	8008b58 <_dtoa_r+0xad0>
 8008b48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b4c:	d0ed      	beq.n	8008b2a <_dtoa_r+0xaa2>
 8008b4e:	f10a 0301 	add.w	r3, sl, #1
 8008b52:	f88b 3000 	strb.w	r3, [fp]
 8008b56:	e73c      	b.n	80089d2 <_dtoa_r+0x94a>
 8008b58:	9b05      	ldr	r3, [sp, #20]
 8008b5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008b5e:	4599      	cmp	r9, r3
 8008b60:	d047      	beq.n	8008bf2 <_dtoa_r+0xb6a>
 8008b62:	ee18 1a10 	vmov	r1, s16
 8008b66:	2300      	movs	r3, #0
 8008b68:	220a      	movs	r2, #10
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 fc78 	bl	8009460 <__multadd>
 8008b70:	45b8      	cmp	r8, r7
 8008b72:	ee08 0a10 	vmov	s16, r0
 8008b76:	f04f 0300 	mov.w	r3, #0
 8008b7a:	f04f 020a 	mov.w	r2, #10
 8008b7e:	4641      	mov	r1, r8
 8008b80:	4620      	mov	r0, r4
 8008b82:	d106      	bne.n	8008b92 <_dtoa_r+0xb0a>
 8008b84:	f000 fc6c 	bl	8009460 <__multadd>
 8008b88:	4680      	mov	r8, r0
 8008b8a:	4607      	mov	r7, r0
 8008b8c:	f109 0901 	add.w	r9, r9, #1
 8008b90:	e772      	b.n	8008a78 <_dtoa_r+0x9f0>
 8008b92:	f000 fc65 	bl	8009460 <__multadd>
 8008b96:	4639      	mov	r1, r7
 8008b98:	4680      	mov	r8, r0
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	220a      	movs	r2, #10
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f000 fc5e 	bl	8009460 <__multadd>
 8008ba4:	4607      	mov	r7, r0
 8008ba6:	e7f1      	b.n	8008b8c <_dtoa_r+0xb04>
 8008ba8:	9b03      	ldr	r3, [sp, #12]
 8008baa:	9302      	str	r3, [sp, #8]
 8008bac:	9d01      	ldr	r5, [sp, #4]
 8008bae:	ee18 0a10 	vmov	r0, s16
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	f7ff f9dc 	bl	8007f70 <quorem>
 8008bb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008bbc:	9b01      	ldr	r3, [sp, #4]
 8008bbe:	f805 ab01 	strb.w	sl, [r5], #1
 8008bc2:	1aea      	subs	r2, r5, r3
 8008bc4:	9b02      	ldr	r3, [sp, #8]
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	dd09      	ble.n	8008bde <_dtoa_r+0xb56>
 8008bca:	ee18 1a10 	vmov	r1, s16
 8008bce:	2300      	movs	r3, #0
 8008bd0:	220a      	movs	r2, #10
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 fc44 	bl	8009460 <__multadd>
 8008bd8:	ee08 0a10 	vmov	s16, r0
 8008bdc:	e7e7      	b.n	8008bae <_dtoa_r+0xb26>
 8008bde:	9b02      	ldr	r3, [sp, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	bfc8      	it	gt
 8008be4:	461d      	movgt	r5, r3
 8008be6:	9b01      	ldr	r3, [sp, #4]
 8008be8:	bfd8      	it	le
 8008bea:	2501      	movle	r5, #1
 8008bec:	441d      	add	r5, r3
 8008bee:	f04f 0800 	mov.w	r8, #0
 8008bf2:	ee18 1a10 	vmov	r1, s16
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f000 fe2b 	bl	8009854 <__lshift>
 8008bfe:	4631      	mov	r1, r6
 8008c00:	ee08 0a10 	vmov	s16, r0
 8008c04:	f000 fe96 	bl	8009934 <__mcmp>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	dc91      	bgt.n	8008b30 <_dtoa_r+0xaa8>
 8008c0c:	d102      	bne.n	8008c14 <_dtoa_r+0xb8c>
 8008c0e:	f01a 0f01 	tst.w	sl, #1
 8008c12:	d18d      	bne.n	8008b30 <_dtoa_r+0xaa8>
 8008c14:	462b      	mov	r3, r5
 8008c16:	461d      	mov	r5, r3
 8008c18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c1c:	2a30      	cmp	r2, #48	; 0x30
 8008c1e:	d0fa      	beq.n	8008c16 <_dtoa_r+0xb8e>
 8008c20:	e6d7      	b.n	80089d2 <_dtoa_r+0x94a>
 8008c22:	9a01      	ldr	r2, [sp, #4]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d184      	bne.n	8008b32 <_dtoa_r+0xaaa>
 8008c28:	9b00      	ldr	r3, [sp, #0]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	2331      	movs	r3, #49	; 0x31
 8008c30:	7013      	strb	r3, [r2, #0]
 8008c32:	e6ce      	b.n	80089d2 <_dtoa_r+0x94a>
 8008c34:	4b09      	ldr	r3, [pc, #36]	; (8008c5c <_dtoa_r+0xbd4>)
 8008c36:	f7ff ba95 	b.w	8008164 <_dtoa_r+0xdc>
 8008c3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f47f aa6e 	bne.w	800811e <_dtoa_r+0x96>
 8008c42:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <_dtoa_r+0xbd8>)
 8008c44:	f7ff ba8e 	b.w	8008164 <_dtoa_r+0xdc>
 8008c48:	9b02      	ldr	r3, [sp, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	dcae      	bgt.n	8008bac <_dtoa_r+0xb24>
 8008c4e:	9b06      	ldr	r3, [sp, #24]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	f73f aea8 	bgt.w	80089a6 <_dtoa_r+0x91e>
 8008c56:	e7a9      	b.n	8008bac <_dtoa_r+0xb24>
 8008c58:	0800b028 	.word	0x0800b028
 8008c5c:	0800ae2c 	.word	0x0800ae2c
 8008c60:	0800afa9 	.word	0x0800afa9

08008c64 <rshift>:
 8008c64:	6903      	ldr	r3, [r0, #16]
 8008c66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c72:	f100 0414 	add.w	r4, r0, #20
 8008c76:	dd45      	ble.n	8008d04 <rshift+0xa0>
 8008c78:	f011 011f 	ands.w	r1, r1, #31
 8008c7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c84:	d10c      	bne.n	8008ca0 <rshift+0x3c>
 8008c86:	f100 0710 	add.w	r7, r0, #16
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	42b1      	cmp	r1, r6
 8008c8e:	d334      	bcc.n	8008cfa <rshift+0x96>
 8008c90:	1a9b      	subs	r3, r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	1eea      	subs	r2, r5, #3
 8008c96:	4296      	cmp	r6, r2
 8008c98:	bf38      	it	cc
 8008c9a:	2300      	movcc	r3, #0
 8008c9c:	4423      	add	r3, r4
 8008c9e:	e015      	b.n	8008ccc <rshift+0x68>
 8008ca0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ca4:	f1c1 0820 	rsb	r8, r1, #32
 8008ca8:	40cf      	lsrs	r7, r1
 8008caa:	f105 0e04 	add.w	lr, r5, #4
 8008cae:	46a1      	mov	r9, r4
 8008cb0:	4576      	cmp	r6, lr
 8008cb2:	46f4      	mov	ip, lr
 8008cb4:	d815      	bhi.n	8008ce2 <rshift+0x7e>
 8008cb6:	1a9a      	subs	r2, r3, r2
 8008cb8:	0092      	lsls	r2, r2, #2
 8008cba:	3a04      	subs	r2, #4
 8008cbc:	3501      	adds	r5, #1
 8008cbe:	42ae      	cmp	r6, r5
 8008cc0:	bf38      	it	cc
 8008cc2:	2200      	movcc	r2, #0
 8008cc4:	18a3      	adds	r3, r4, r2
 8008cc6:	50a7      	str	r7, [r4, r2]
 8008cc8:	b107      	cbz	r7, 8008ccc <rshift+0x68>
 8008cca:	3304      	adds	r3, #4
 8008ccc:	1b1a      	subs	r2, r3, r4
 8008cce:	42a3      	cmp	r3, r4
 8008cd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008cd4:	bf08      	it	eq
 8008cd6:	2300      	moveq	r3, #0
 8008cd8:	6102      	str	r2, [r0, #16]
 8008cda:	bf08      	it	eq
 8008cdc:	6143      	streq	r3, [r0, #20]
 8008cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ce2:	f8dc c000 	ldr.w	ip, [ip]
 8008ce6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008cea:	ea4c 0707 	orr.w	r7, ip, r7
 8008cee:	f849 7b04 	str.w	r7, [r9], #4
 8008cf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008cf6:	40cf      	lsrs	r7, r1
 8008cf8:	e7da      	b.n	8008cb0 <rshift+0x4c>
 8008cfa:	f851 cb04 	ldr.w	ip, [r1], #4
 8008cfe:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d02:	e7c3      	b.n	8008c8c <rshift+0x28>
 8008d04:	4623      	mov	r3, r4
 8008d06:	e7e1      	b.n	8008ccc <rshift+0x68>

08008d08 <__hexdig_fun>:
 8008d08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008d0c:	2b09      	cmp	r3, #9
 8008d0e:	d802      	bhi.n	8008d16 <__hexdig_fun+0xe>
 8008d10:	3820      	subs	r0, #32
 8008d12:	b2c0      	uxtb	r0, r0
 8008d14:	4770      	bx	lr
 8008d16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008d1a:	2b05      	cmp	r3, #5
 8008d1c:	d801      	bhi.n	8008d22 <__hexdig_fun+0x1a>
 8008d1e:	3847      	subs	r0, #71	; 0x47
 8008d20:	e7f7      	b.n	8008d12 <__hexdig_fun+0xa>
 8008d22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008d26:	2b05      	cmp	r3, #5
 8008d28:	d801      	bhi.n	8008d2e <__hexdig_fun+0x26>
 8008d2a:	3827      	subs	r0, #39	; 0x27
 8008d2c:	e7f1      	b.n	8008d12 <__hexdig_fun+0xa>
 8008d2e:	2000      	movs	r0, #0
 8008d30:	4770      	bx	lr
	...

08008d34 <__gethex>:
 8008d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d38:	ed2d 8b02 	vpush	{d8}
 8008d3c:	b089      	sub	sp, #36	; 0x24
 8008d3e:	ee08 0a10 	vmov	s16, r0
 8008d42:	9304      	str	r3, [sp, #16]
 8008d44:	4bb4      	ldr	r3, [pc, #720]	; (8009018 <__gethex+0x2e4>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	9301      	str	r3, [sp, #4]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	468b      	mov	fp, r1
 8008d4e:	4690      	mov	r8, r2
 8008d50:	f7f7 fa4e 	bl	80001f0 <strlen>
 8008d54:	9b01      	ldr	r3, [sp, #4]
 8008d56:	f8db 2000 	ldr.w	r2, [fp]
 8008d5a:	4403      	add	r3, r0
 8008d5c:	4682      	mov	sl, r0
 8008d5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008d62:	9305      	str	r3, [sp, #20]
 8008d64:	1c93      	adds	r3, r2, #2
 8008d66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008d6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008d6e:	32fe      	adds	r2, #254	; 0xfe
 8008d70:	18d1      	adds	r1, r2, r3
 8008d72:	461f      	mov	r7, r3
 8008d74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008d78:	9100      	str	r1, [sp, #0]
 8008d7a:	2830      	cmp	r0, #48	; 0x30
 8008d7c:	d0f8      	beq.n	8008d70 <__gethex+0x3c>
 8008d7e:	f7ff ffc3 	bl	8008d08 <__hexdig_fun>
 8008d82:	4604      	mov	r4, r0
 8008d84:	2800      	cmp	r0, #0
 8008d86:	d13a      	bne.n	8008dfe <__gethex+0xca>
 8008d88:	9901      	ldr	r1, [sp, #4]
 8008d8a:	4652      	mov	r2, sl
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	f001 fa33 	bl	800a1f8 <strncmp>
 8008d92:	4605      	mov	r5, r0
 8008d94:	2800      	cmp	r0, #0
 8008d96:	d168      	bne.n	8008e6a <__gethex+0x136>
 8008d98:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008d9c:	eb07 060a 	add.w	r6, r7, sl
 8008da0:	f7ff ffb2 	bl	8008d08 <__hexdig_fun>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d062      	beq.n	8008e6e <__gethex+0x13a>
 8008da8:	4633      	mov	r3, r6
 8008daa:	7818      	ldrb	r0, [r3, #0]
 8008dac:	2830      	cmp	r0, #48	; 0x30
 8008dae:	461f      	mov	r7, r3
 8008db0:	f103 0301 	add.w	r3, r3, #1
 8008db4:	d0f9      	beq.n	8008daa <__gethex+0x76>
 8008db6:	f7ff ffa7 	bl	8008d08 <__hexdig_fun>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	fab0 f480 	clz	r4, r0
 8008dc0:	0964      	lsrs	r4, r4, #5
 8008dc2:	4635      	mov	r5, r6
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	463a      	mov	r2, r7
 8008dc8:	4616      	mov	r6, r2
 8008dca:	3201      	adds	r2, #1
 8008dcc:	7830      	ldrb	r0, [r6, #0]
 8008dce:	f7ff ff9b 	bl	8008d08 <__hexdig_fun>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d1f8      	bne.n	8008dc8 <__gethex+0x94>
 8008dd6:	9901      	ldr	r1, [sp, #4]
 8008dd8:	4652      	mov	r2, sl
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f001 fa0c 	bl	800a1f8 <strncmp>
 8008de0:	b980      	cbnz	r0, 8008e04 <__gethex+0xd0>
 8008de2:	b94d      	cbnz	r5, 8008df8 <__gethex+0xc4>
 8008de4:	eb06 050a 	add.w	r5, r6, sl
 8008de8:	462a      	mov	r2, r5
 8008dea:	4616      	mov	r6, r2
 8008dec:	3201      	adds	r2, #1
 8008dee:	7830      	ldrb	r0, [r6, #0]
 8008df0:	f7ff ff8a 	bl	8008d08 <__hexdig_fun>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d1f8      	bne.n	8008dea <__gethex+0xb6>
 8008df8:	1bad      	subs	r5, r5, r6
 8008dfa:	00ad      	lsls	r5, r5, #2
 8008dfc:	e004      	b.n	8008e08 <__gethex+0xd4>
 8008dfe:	2400      	movs	r4, #0
 8008e00:	4625      	mov	r5, r4
 8008e02:	e7e0      	b.n	8008dc6 <__gethex+0x92>
 8008e04:	2d00      	cmp	r5, #0
 8008e06:	d1f7      	bne.n	8008df8 <__gethex+0xc4>
 8008e08:	7833      	ldrb	r3, [r6, #0]
 8008e0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e0e:	2b50      	cmp	r3, #80	; 0x50
 8008e10:	d13b      	bne.n	8008e8a <__gethex+0x156>
 8008e12:	7873      	ldrb	r3, [r6, #1]
 8008e14:	2b2b      	cmp	r3, #43	; 0x2b
 8008e16:	d02c      	beq.n	8008e72 <__gethex+0x13e>
 8008e18:	2b2d      	cmp	r3, #45	; 0x2d
 8008e1a:	d02e      	beq.n	8008e7a <__gethex+0x146>
 8008e1c:	1c71      	adds	r1, r6, #1
 8008e1e:	f04f 0900 	mov.w	r9, #0
 8008e22:	7808      	ldrb	r0, [r1, #0]
 8008e24:	f7ff ff70 	bl	8008d08 <__hexdig_fun>
 8008e28:	1e43      	subs	r3, r0, #1
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b18      	cmp	r3, #24
 8008e2e:	d82c      	bhi.n	8008e8a <__gethex+0x156>
 8008e30:	f1a0 0210 	sub.w	r2, r0, #16
 8008e34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e38:	f7ff ff66 	bl	8008d08 <__hexdig_fun>
 8008e3c:	1e43      	subs	r3, r0, #1
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b18      	cmp	r3, #24
 8008e42:	d91d      	bls.n	8008e80 <__gethex+0x14c>
 8008e44:	f1b9 0f00 	cmp.w	r9, #0
 8008e48:	d000      	beq.n	8008e4c <__gethex+0x118>
 8008e4a:	4252      	negs	r2, r2
 8008e4c:	4415      	add	r5, r2
 8008e4e:	f8cb 1000 	str.w	r1, [fp]
 8008e52:	b1e4      	cbz	r4, 8008e8e <__gethex+0x15a>
 8008e54:	9b00      	ldr	r3, [sp, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	bf14      	ite	ne
 8008e5a:	2700      	movne	r7, #0
 8008e5c:	2706      	moveq	r7, #6
 8008e5e:	4638      	mov	r0, r7
 8008e60:	b009      	add	sp, #36	; 0x24
 8008e62:	ecbd 8b02 	vpop	{d8}
 8008e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6a:	463e      	mov	r6, r7
 8008e6c:	4625      	mov	r5, r4
 8008e6e:	2401      	movs	r4, #1
 8008e70:	e7ca      	b.n	8008e08 <__gethex+0xd4>
 8008e72:	f04f 0900 	mov.w	r9, #0
 8008e76:	1cb1      	adds	r1, r6, #2
 8008e78:	e7d3      	b.n	8008e22 <__gethex+0xee>
 8008e7a:	f04f 0901 	mov.w	r9, #1
 8008e7e:	e7fa      	b.n	8008e76 <__gethex+0x142>
 8008e80:	230a      	movs	r3, #10
 8008e82:	fb03 0202 	mla	r2, r3, r2, r0
 8008e86:	3a10      	subs	r2, #16
 8008e88:	e7d4      	b.n	8008e34 <__gethex+0x100>
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	e7df      	b.n	8008e4e <__gethex+0x11a>
 8008e8e:	1bf3      	subs	r3, r6, r7
 8008e90:	3b01      	subs	r3, #1
 8008e92:	4621      	mov	r1, r4
 8008e94:	2b07      	cmp	r3, #7
 8008e96:	dc0b      	bgt.n	8008eb0 <__gethex+0x17c>
 8008e98:	ee18 0a10 	vmov	r0, s16
 8008e9c:	f000 fa7e 	bl	800939c <_Balloc>
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	b940      	cbnz	r0, 8008eb6 <__gethex+0x182>
 8008ea4:	4b5d      	ldr	r3, [pc, #372]	; (800901c <__gethex+0x2e8>)
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	21de      	movs	r1, #222	; 0xde
 8008eaa:	485d      	ldr	r0, [pc, #372]	; (8009020 <__gethex+0x2ec>)
 8008eac:	f001 f9c6 	bl	800a23c <__assert_func>
 8008eb0:	3101      	adds	r1, #1
 8008eb2:	105b      	asrs	r3, r3, #1
 8008eb4:	e7ee      	b.n	8008e94 <__gethex+0x160>
 8008eb6:	f100 0914 	add.w	r9, r0, #20
 8008eba:	f04f 0b00 	mov.w	fp, #0
 8008ebe:	f1ca 0301 	rsb	r3, sl, #1
 8008ec2:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ec6:	f8cd b000 	str.w	fp, [sp]
 8008eca:	9306      	str	r3, [sp, #24]
 8008ecc:	42b7      	cmp	r7, r6
 8008ece:	d340      	bcc.n	8008f52 <__gethex+0x21e>
 8008ed0:	9802      	ldr	r0, [sp, #8]
 8008ed2:	9b00      	ldr	r3, [sp, #0]
 8008ed4:	f840 3b04 	str.w	r3, [r0], #4
 8008ed8:	eba0 0009 	sub.w	r0, r0, r9
 8008edc:	1080      	asrs	r0, r0, #2
 8008ede:	0146      	lsls	r6, r0, #5
 8008ee0:	6120      	str	r0, [r4, #16]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 fb4c 	bl	8009580 <__hi0bits>
 8008ee8:	1a30      	subs	r0, r6, r0
 8008eea:	f8d8 6000 	ldr.w	r6, [r8]
 8008eee:	42b0      	cmp	r0, r6
 8008ef0:	dd63      	ble.n	8008fba <__gethex+0x286>
 8008ef2:	1b87      	subs	r7, r0, r6
 8008ef4:	4639      	mov	r1, r7
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f000 fef0 	bl	8009cdc <__any_on>
 8008efc:	4682      	mov	sl, r0
 8008efe:	b1a8      	cbz	r0, 8008f2c <__gethex+0x1f8>
 8008f00:	1e7b      	subs	r3, r7, #1
 8008f02:	1159      	asrs	r1, r3, #5
 8008f04:	f003 021f 	and.w	r2, r3, #31
 8008f08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008f0c:	f04f 0a01 	mov.w	sl, #1
 8008f10:	fa0a f202 	lsl.w	r2, sl, r2
 8008f14:	420a      	tst	r2, r1
 8008f16:	d009      	beq.n	8008f2c <__gethex+0x1f8>
 8008f18:	4553      	cmp	r3, sl
 8008f1a:	dd05      	ble.n	8008f28 <__gethex+0x1f4>
 8008f1c:	1eb9      	subs	r1, r7, #2
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f000 fedc 	bl	8009cdc <__any_on>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d145      	bne.n	8008fb4 <__gethex+0x280>
 8008f28:	f04f 0a02 	mov.w	sl, #2
 8008f2c:	4639      	mov	r1, r7
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f7ff fe98 	bl	8008c64 <rshift>
 8008f34:	443d      	add	r5, r7
 8008f36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f3a:	42ab      	cmp	r3, r5
 8008f3c:	da4c      	bge.n	8008fd8 <__gethex+0x2a4>
 8008f3e:	ee18 0a10 	vmov	r0, s16
 8008f42:	4621      	mov	r1, r4
 8008f44:	f000 fa6a 	bl	800941c <_Bfree>
 8008f48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	6013      	str	r3, [r2, #0]
 8008f4e:	27a3      	movs	r7, #163	; 0xa3
 8008f50:	e785      	b.n	8008e5e <__gethex+0x12a>
 8008f52:	1e73      	subs	r3, r6, #1
 8008f54:	9a05      	ldr	r2, [sp, #20]
 8008f56:	9303      	str	r3, [sp, #12]
 8008f58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d019      	beq.n	8008f94 <__gethex+0x260>
 8008f60:	f1bb 0f20 	cmp.w	fp, #32
 8008f64:	d107      	bne.n	8008f76 <__gethex+0x242>
 8008f66:	9b02      	ldr	r3, [sp, #8]
 8008f68:	9a00      	ldr	r2, [sp, #0]
 8008f6a:	f843 2b04 	str.w	r2, [r3], #4
 8008f6e:	9302      	str	r3, [sp, #8]
 8008f70:	2300      	movs	r3, #0
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	469b      	mov	fp, r3
 8008f76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008f7a:	f7ff fec5 	bl	8008d08 <__hexdig_fun>
 8008f7e:	9b00      	ldr	r3, [sp, #0]
 8008f80:	f000 000f 	and.w	r0, r0, #15
 8008f84:	fa00 f00b 	lsl.w	r0, r0, fp
 8008f88:	4303      	orrs	r3, r0
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	f10b 0b04 	add.w	fp, fp, #4
 8008f90:	9b03      	ldr	r3, [sp, #12]
 8008f92:	e00d      	b.n	8008fb0 <__gethex+0x27c>
 8008f94:	9b03      	ldr	r3, [sp, #12]
 8008f96:	9a06      	ldr	r2, [sp, #24]
 8008f98:	4413      	add	r3, r2
 8008f9a:	42bb      	cmp	r3, r7
 8008f9c:	d3e0      	bcc.n	8008f60 <__gethex+0x22c>
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	9901      	ldr	r1, [sp, #4]
 8008fa2:	9307      	str	r3, [sp, #28]
 8008fa4:	4652      	mov	r2, sl
 8008fa6:	f001 f927 	bl	800a1f8 <strncmp>
 8008faa:	9b07      	ldr	r3, [sp, #28]
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d1d7      	bne.n	8008f60 <__gethex+0x22c>
 8008fb0:	461e      	mov	r6, r3
 8008fb2:	e78b      	b.n	8008ecc <__gethex+0x198>
 8008fb4:	f04f 0a03 	mov.w	sl, #3
 8008fb8:	e7b8      	b.n	8008f2c <__gethex+0x1f8>
 8008fba:	da0a      	bge.n	8008fd2 <__gethex+0x29e>
 8008fbc:	1a37      	subs	r7, r6, r0
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	ee18 0a10 	vmov	r0, s16
 8008fc4:	463a      	mov	r2, r7
 8008fc6:	f000 fc45 	bl	8009854 <__lshift>
 8008fca:	1bed      	subs	r5, r5, r7
 8008fcc:	4604      	mov	r4, r0
 8008fce:	f100 0914 	add.w	r9, r0, #20
 8008fd2:	f04f 0a00 	mov.w	sl, #0
 8008fd6:	e7ae      	b.n	8008f36 <__gethex+0x202>
 8008fd8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008fdc:	42a8      	cmp	r0, r5
 8008fde:	dd72      	ble.n	80090c6 <__gethex+0x392>
 8008fe0:	1b45      	subs	r5, r0, r5
 8008fe2:	42ae      	cmp	r6, r5
 8008fe4:	dc36      	bgt.n	8009054 <__gethex+0x320>
 8008fe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d02a      	beq.n	8009044 <__gethex+0x310>
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d02c      	beq.n	800904c <__gethex+0x318>
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d11c      	bne.n	8009030 <__gethex+0x2fc>
 8008ff6:	42ae      	cmp	r6, r5
 8008ff8:	d11a      	bne.n	8009030 <__gethex+0x2fc>
 8008ffa:	2e01      	cmp	r6, #1
 8008ffc:	d112      	bne.n	8009024 <__gethex+0x2f0>
 8008ffe:	9a04      	ldr	r2, [sp, #16]
 8009000:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009004:	6013      	str	r3, [r2, #0]
 8009006:	2301      	movs	r3, #1
 8009008:	6123      	str	r3, [r4, #16]
 800900a:	f8c9 3000 	str.w	r3, [r9]
 800900e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009010:	2762      	movs	r7, #98	; 0x62
 8009012:	601c      	str	r4, [r3, #0]
 8009014:	e723      	b.n	8008e5e <__gethex+0x12a>
 8009016:	bf00      	nop
 8009018:	0800b0a0 	.word	0x0800b0a0
 800901c:	0800b028 	.word	0x0800b028
 8009020:	0800b039 	.word	0x0800b039
 8009024:	1e71      	subs	r1, r6, #1
 8009026:	4620      	mov	r0, r4
 8009028:	f000 fe58 	bl	8009cdc <__any_on>
 800902c:	2800      	cmp	r0, #0
 800902e:	d1e6      	bne.n	8008ffe <__gethex+0x2ca>
 8009030:	ee18 0a10 	vmov	r0, s16
 8009034:	4621      	mov	r1, r4
 8009036:	f000 f9f1 	bl	800941c <_Bfree>
 800903a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800903c:	2300      	movs	r3, #0
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	2750      	movs	r7, #80	; 0x50
 8009042:	e70c      	b.n	8008e5e <__gethex+0x12a>
 8009044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1f2      	bne.n	8009030 <__gethex+0x2fc>
 800904a:	e7d8      	b.n	8008ffe <__gethex+0x2ca>
 800904c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1d5      	bne.n	8008ffe <__gethex+0x2ca>
 8009052:	e7ed      	b.n	8009030 <__gethex+0x2fc>
 8009054:	1e6f      	subs	r7, r5, #1
 8009056:	f1ba 0f00 	cmp.w	sl, #0
 800905a:	d131      	bne.n	80090c0 <__gethex+0x38c>
 800905c:	b127      	cbz	r7, 8009068 <__gethex+0x334>
 800905e:	4639      	mov	r1, r7
 8009060:	4620      	mov	r0, r4
 8009062:	f000 fe3b 	bl	8009cdc <__any_on>
 8009066:	4682      	mov	sl, r0
 8009068:	117b      	asrs	r3, r7, #5
 800906a:	2101      	movs	r1, #1
 800906c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009070:	f007 071f 	and.w	r7, r7, #31
 8009074:	fa01 f707 	lsl.w	r7, r1, r7
 8009078:	421f      	tst	r7, r3
 800907a:	4629      	mov	r1, r5
 800907c:	4620      	mov	r0, r4
 800907e:	bf18      	it	ne
 8009080:	f04a 0a02 	orrne.w	sl, sl, #2
 8009084:	1b76      	subs	r6, r6, r5
 8009086:	f7ff fded 	bl	8008c64 <rshift>
 800908a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800908e:	2702      	movs	r7, #2
 8009090:	f1ba 0f00 	cmp.w	sl, #0
 8009094:	d048      	beq.n	8009128 <__gethex+0x3f4>
 8009096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800909a:	2b02      	cmp	r3, #2
 800909c:	d015      	beq.n	80090ca <__gethex+0x396>
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d017      	beq.n	80090d2 <__gethex+0x39e>
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d109      	bne.n	80090ba <__gethex+0x386>
 80090a6:	f01a 0f02 	tst.w	sl, #2
 80090aa:	d006      	beq.n	80090ba <__gethex+0x386>
 80090ac:	f8d9 0000 	ldr.w	r0, [r9]
 80090b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80090b4:	f01a 0f01 	tst.w	sl, #1
 80090b8:	d10e      	bne.n	80090d8 <__gethex+0x3a4>
 80090ba:	f047 0710 	orr.w	r7, r7, #16
 80090be:	e033      	b.n	8009128 <__gethex+0x3f4>
 80090c0:	f04f 0a01 	mov.w	sl, #1
 80090c4:	e7d0      	b.n	8009068 <__gethex+0x334>
 80090c6:	2701      	movs	r7, #1
 80090c8:	e7e2      	b.n	8009090 <__gethex+0x35c>
 80090ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090cc:	f1c3 0301 	rsb	r3, r3, #1
 80090d0:	9315      	str	r3, [sp, #84]	; 0x54
 80090d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d0f0      	beq.n	80090ba <__gethex+0x386>
 80090d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80090dc:	f104 0314 	add.w	r3, r4, #20
 80090e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80090e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80090e8:	f04f 0c00 	mov.w	ip, #0
 80090ec:	4618      	mov	r0, r3
 80090ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80090f6:	d01c      	beq.n	8009132 <__gethex+0x3fe>
 80090f8:	3201      	adds	r2, #1
 80090fa:	6002      	str	r2, [r0, #0]
 80090fc:	2f02      	cmp	r7, #2
 80090fe:	f104 0314 	add.w	r3, r4, #20
 8009102:	d13f      	bne.n	8009184 <__gethex+0x450>
 8009104:	f8d8 2000 	ldr.w	r2, [r8]
 8009108:	3a01      	subs	r2, #1
 800910a:	42b2      	cmp	r2, r6
 800910c:	d10a      	bne.n	8009124 <__gethex+0x3f0>
 800910e:	1171      	asrs	r1, r6, #5
 8009110:	2201      	movs	r2, #1
 8009112:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009116:	f006 061f 	and.w	r6, r6, #31
 800911a:	fa02 f606 	lsl.w	r6, r2, r6
 800911e:	421e      	tst	r6, r3
 8009120:	bf18      	it	ne
 8009122:	4617      	movne	r7, r2
 8009124:	f047 0720 	orr.w	r7, r7, #32
 8009128:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800912a:	601c      	str	r4, [r3, #0]
 800912c:	9b04      	ldr	r3, [sp, #16]
 800912e:	601d      	str	r5, [r3, #0]
 8009130:	e695      	b.n	8008e5e <__gethex+0x12a>
 8009132:	4299      	cmp	r1, r3
 8009134:	f843 cc04 	str.w	ip, [r3, #-4]
 8009138:	d8d8      	bhi.n	80090ec <__gethex+0x3b8>
 800913a:	68a3      	ldr	r3, [r4, #8]
 800913c:	459b      	cmp	fp, r3
 800913e:	db19      	blt.n	8009174 <__gethex+0x440>
 8009140:	6861      	ldr	r1, [r4, #4]
 8009142:	ee18 0a10 	vmov	r0, s16
 8009146:	3101      	adds	r1, #1
 8009148:	f000 f928 	bl	800939c <_Balloc>
 800914c:	4681      	mov	r9, r0
 800914e:	b918      	cbnz	r0, 8009158 <__gethex+0x424>
 8009150:	4b1a      	ldr	r3, [pc, #104]	; (80091bc <__gethex+0x488>)
 8009152:	4602      	mov	r2, r0
 8009154:	2184      	movs	r1, #132	; 0x84
 8009156:	e6a8      	b.n	8008eaa <__gethex+0x176>
 8009158:	6922      	ldr	r2, [r4, #16]
 800915a:	3202      	adds	r2, #2
 800915c:	f104 010c 	add.w	r1, r4, #12
 8009160:	0092      	lsls	r2, r2, #2
 8009162:	300c      	adds	r0, #12
 8009164:	f000 f90c 	bl	8009380 <memcpy>
 8009168:	4621      	mov	r1, r4
 800916a:	ee18 0a10 	vmov	r0, s16
 800916e:	f000 f955 	bl	800941c <_Bfree>
 8009172:	464c      	mov	r4, r9
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	1c5a      	adds	r2, r3, #1
 8009178:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800917c:	6122      	str	r2, [r4, #16]
 800917e:	2201      	movs	r2, #1
 8009180:	615a      	str	r2, [r3, #20]
 8009182:	e7bb      	b.n	80090fc <__gethex+0x3c8>
 8009184:	6922      	ldr	r2, [r4, #16]
 8009186:	455a      	cmp	r2, fp
 8009188:	dd0b      	ble.n	80091a2 <__gethex+0x46e>
 800918a:	2101      	movs	r1, #1
 800918c:	4620      	mov	r0, r4
 800918e:	f7ff fd69 	bl	8008c64 <rshift>
 8009192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009196:	3501      	adds	r5, #1
 8009198:	42ab      	cmp	r3, r5
 800919a:	f6ff aed0 	blt.w	8008f3e <__gethex+0x20a>
 800919e:	2701      	movs	r7, #1
 80091a0:	e7c0      	b.n	8009124 <__gethex+0x3f0>
 80091a2:	f016 061f 	ands.w	r6, r6, #31
 80091a6:	d0fa      	beq.n	800919e <__gethex+0x46a>
 80091a8:	4453      	add	r3, sl
 80091aa:	f1c6 0620 	rsb	r6, r6, #32
 80091ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80091b2:	f000 f9e5 	bl	8009580 <__hi0bits>
 80091b6:	42b0      	cmp	r0, r6
 80091b8:	dbe7      	blt.n	800918a <__gethex+0x456>
 80091ba:	e7f0      	b.n	800919e <__gethex+0x46a>
 80091bc:	0800b028 	.word	0x0800b028

080091c0 <L_shift>:
 80091c0:	f1c2 0208 	rsb	r2, r2, #8
 80091c4:	0092      	lsls	r2, r2, #2
 80091c6:	b570      	push	{r4, r5, r6, lr}
 80091c8:	f1c2 0620 	rsb	r6, r2, #32
 80091cc:	6843      	ldr	r3, [r0, #4]
 80091ce:	6804      	ldr	r4, [r0, #0]
 80091d0:	fa03 f506 	lsl.w	r5, r3, r6
 80091d4:	432c      	orrs	r4, r5
 80091d6:	40d3      	lsrs	r3, r2
 80091d8:	6004      	str	r4, [r0, #0]
 80091da:	f840 3f04 	str.w	r3, [r0, #4]!
 80091de:	4288      	cmp	r0, r1
 80091e0:	d3f4      	bcc.n	80091cc <L_shift+0xc>
 80091e2:	bd70      	pop	{r4, r5, r6, pc}

080091e4 <__match>:
 80091e4:	b530      	push	{r4, r5, lr}
 80091e6:	6803      	ldr	r3, [r0, #0]
 80091e8:	3301      	adds	r3, #1
 80091ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ee:	b914      	cbnz	r4, 80091f6 <__match+0x12>
 80091f0:	6003      	str	r3, [r0, #0]
 80091f2:	2001      	movs	r0, #1
 80091f4:	bd30      	pop	{r4, r5, pc}
 80091f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80091fe:	2d19      	cmp	r5, #25
 8009200:	bf98      	it	ls
 8009202:	3220      	addls	r2, #32
 8009204:	42a2      	cmp	r2, r4
 8009206:	d0f0      	beq.n	80091ea <__match+0x6>
 8009208:	2000      	movs	r0, #0
 800920a:	e7f3      	b.n	80091f4 <__match+0x10>

0800920c <__hexnan>:
 800920c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009210:	680b      	ldr	r3, [r1, #0]
 8009212:	115e      	asrs	r6, r3, #5
 8009214:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009218:	f013 031f 	ands.w	r3, r3, #31
 800921c:	b087      	sub	sp, #28
 800921e:	bf18      	it	ne
 8009220:	3604      	addne	r6, #4
 8009222:	2500      	movs	r5, #0
 8009224:	1f37      	subs	r7, r6, #4
 8009226:	4690      	mov	r8, r2
 8009228:	6802      	ldr	r2, [r0, #0]
 800922a:	9301      	str	r3, [sp, #4]
 800922c:	4682      	mov	sl, r0
 800922e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009232:	46b9      	mov	r9, r7
 8009234:	463c      	mov	r4, r7
 8009236:	9502      	str	r5, [sp, #8]
 8009238:	46ab      	mov	fp, r5
 800923a:	7851      	ldrb	r1, [r2, #1]
 800923c:	1c53      	adds	r3, r2, #1
 800923e:	9303      	str	r3, [sp, #12]
 8009240:	b341      	cbz	r1, 8009294 <__hexnan+0x88>
 8009242:	4608      	mov	r0, r1
 8009244:	9205      	str	r2, [sp, #20]
 8009246:	9104      	str	r1, [sp, #16]
 8009248:	f7ff fd5e 	bl	8008d08 <__hexdig_fun>
 800924c:	2800      	cmp	r0, #0
 800924e:	d14f      	bne.n	80092f0 <__hexnan+0xe4>
 8009250:	9904      	ldr	r1, [sp, #16]
 8009252:	9a05      	ldr	r2, [sp, #20]
 8009254:	2920      	cmp	r1, #32
 8009256:	d818      	bhi.n	800928a <__hexnan+0x7e>
 8009258:	9b02      	ldr	r3, [sp, #8]
 800925a:	459b      	cmp	fp, r3
 800925c:	dd13      	ble.n	8009286 <__hexnan+0x7a>
 800925e:	454c      	cmp	r4, r9
 8009260:	d206      	bcs.n	8009270 <__hexnan+0x64>
 8009262:	2d07      	cmp	r5, #7
 8009264:	dc04      	bgt.n	8009270 <__hexnan+0x64>
 8009266:	462a      	mov	r2, r5
 8009268:	4649      	mov	r1, r9
 800926a:	4620      	mov	r0, r4
 800926c:	f7ff ffa8 	bl	80091c0 <L_shift>
 8009270:	4544      	cmp	r4, r8
 8009272:	d950      	bls.n	8009316 <__hexnan+0x10a>
 8009274:	2300      	movs	r3, #0
 8009276:	f1a4 0904 	sub.w	r9, r4, #4
 800927a:	f844 3c04 	str.w	r3, [r4, #-4]
 800927e:	f8cd b008 	str.w	fp, [sp, #8]
 8009282:	464c      	mov	r4, r9
 8009284:	461d      	mov	r5, r3
 8009286:	9a03      	ldr	r2, [sp, #12]
 8009288:	e7d7      	b.n	800923a <__hexnan+0x2e>
 800928a:	2929      	cmp	r1, #41	; 0x29
 800928c:	d156      	bne.n	800933c <__hexnan+0x130>
 800928e:	3202      	adds	r2, #2
 8009290:	f8ca 2000 	str.w	r2, [sl]
 8009294:	f1bb 0f00 	cmp.w	fp, #0
 8009298:	d050      	beq.n	800933c <__hexnan+0x130>
 800929a:	454c      	cmp	r4, r9
 800929c:	d206      	bcs.n	80092ac <__hexnan+0xa0>
 800929e:	2d07      	cmp	r5, #7
 80092a0:	dc04      	bgt.n	80092ac <__hexnan+0xa0>
 80092a2:	462a      	mov	r2, r5
 80092a4:	4649      	mov	r1, r9
 80092a6:	4620      	mov	r0, r4
 80092a8:	f7ff ff8a 	bl	80091c0 <L_shift>
 80092ac:	4544      	cmp	r4, r8
 80092ae:	d934      	bls.n	800931a <__hexnan+0x10e>
 80092b0:	f1a8 0204 	sub.w	r2, r8, #4
 80092b4:	4623      	mov	r3, r4
 80092b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80092ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80092be:	429f      	cmp	r7, r3
 80092c0:	d2f9      	bcs.n	80092b6 <__hexnan+0xaa>
 80092c2:	1b3b      	subs	r3, r7, r4
 80092c4:	f023 0303 	bic.w	r3, r3, #3
 80092c8:	3304      	adds	r3, #4
 80092ca:	3401      	adds	r4, #1
 80092cc:	3e03      	subs	r6, #3
 80092ce:	42b4      	cmp	r4, r6
 80092d0:	bf88      	it	hi
 80092d2:	2304      	movhi	r3, #4
 80092d4:	4443      	add	r3, r8
 80092d6:	2200      	movs	r2, #0
 80092d8:	f843 2b04 	str.w	r2, [r3], #4
 80092dc:	429f      	cmp	r7, r3
 80092de:	d2fb      	bcs.n	80092d8 <__hexnan+0xcc>
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	b91b      	cbnz	r3, 80092ec <__hexnan+0xe0>
 80092e4:	4547      	cmp	r7, r8
 80092e6:	d127      	bne.n	8009338 <__hexnan+0x12c>
 80092e8:	2301      	movs	r3, #1
 80092ea:	603b      	str	r3, [r7, #0]
 80092ec:	2005      	movs	r0, #5
 80092ee:	e026      	b.n	800933e <__hexnan+0x132>
 80092f0:	3501      	adds	r5, #1
 80092f2:	2d08      	cmp	r5, #8
 80092f4:	f10b 0b01 	add.w	fp, fp, #1
 80092f8:	dd06      	ble.n	8009308 <__hexnan+0xfc>
 80092fa:	4544      	cmp	r4, r8
 80092fc:	d9c3      	bls.n	8009286 <__hexnan+0x7a>
 80092fe:	2300      	movs	r3, #0
 8009300:	f844 3c04 	str.w	r3, [r4, #-4]
 8009304:	2501      	movs	r5, #1
 8009306:	3c04      	subs	r4, #4
 8009308:	6822      	ldr	r2, [r4, #0]
 800930a:	f000 000f 	and.w	r0, r0, #15
 800930e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009312:	6022      	str	r2, [r4, #0]
 8009314:	e7b7      	b.n	8009286 <__hexnan+0x7a>
 8009316:	2508      	movs	r5, #8
 8009318:	e7b5      	b.n	8009286 <__hexnan+0x7a>
 800931a:	9b01      	ldr	r3, [sp, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d0df      	beq.n	80092e0 <__hexnan+0xd4>
 8009320:	f04f 32ff 	mov.w	r2, #4294967295
 8009324:	f1c3 0320 	rsb	r3, r3, #32
 8009328:	fa22 f303 	lsr.w	r3, r2, r3
 800932c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009330:	401a      	ands	r2, r3
 8009332:	f846 2c04 	str.w	r2, [r6, #-4]
 8009336:	e7d3      	b.n	80092e0 <__hexnan+0xd4>
 8009338:	3f04      	subs	r7, #4
 800933a:	e7d1      	b.n	80092e0 <__hexnan+0xd4>
 800933c:	2004      	movs	r0, #4
 800933e:	b007      	add	sp, #28
 8009340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009344 <_localeconv_r>:
 8009344:	4800      	ldr	r0, [pc, #0]	; (8009348 <_localeconv_r+0x4>)
 8009346:	4770      	bx	lr
 8009348:	20000178 	.word	0x20000178

0800934c <malloc>:
 800934c:	4b02      	ldr	r3, [pc, #8]	; (8009358 <malloc+0xc>)
 800934e:	4601      	mov	r1, r0
 8009350:	6818      	ldr	r0, [r3, #0]
 8009352:	f000 bd67 	b.w	8009e24 <_malloc_r>
 8009356:	bf00      	nop
 8009358:	20000020 	.word	0x20000020

0800935c <__ascii_mbtowc>:
 800935c:	b082      	sub	sp, #8
 800935e:	b901      	cbnz	r1, 8009362 <__ascii_mbtowc+0x6>
 8009360:	a901      	add	r1, sp, #4
 8009362:	b142      	cbz	r2, 8009376 <__ascii_mbtowc+0x1a>
 8009364:	b14b      	cbz	r3, 800937a <__ascii_mbtowc+0x1e>
 8009366:	7813      	ldrb	r3, [r2, #0]
 8009368:	600b      	str	r3, [r1, #0]
 800936a:	7812      	ldrb	r2, [r2, #0]
 800936c:	1e10      	subs	r0, r2, #0
 800936e:	bf18      	it	ne
 8009370:	2001      	movne	r0, #1
 8009372:	b002      	add	sp, #8
 8009374:	4770      	bx	lr
 8009376:	4610      	mov	r0, r2
 8009378:	e7fb      	b.n	8009372 <__ascii_mbtowc+0x16>
 800937a:	f06f 0001 	mvn.w	r0, #1
 800937e:	e7f8      	b.n	8009372 <__ascii_mbtowc+0x16>

08009380 <memcpy>:
 8009380:	440a      	add	r2, r1
 8009382:	4291      	cmp	r1, r2
 8009384:	f100 33ff 	add.w	r3, r0, #4294967295
 8009388:	d100      	bne.n	800938c <memcpy+0xc>
 800938a:	4770      	bx	lr
 800938c:	b510      	push	{r4, lr}
 800938e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009396:	4291      	cmp	r1, r2
 8009398:	d1f9      	bne.n	800938e <memcpy+0xe>
 800939a:	bd10      	pop	{r4, pc}

0800939c <_Balloc>:
 800939c:	b570      	push	{r4, r5, r6, lr}
 800939e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093a0:	4604      	mov	r4, r0
 80093a2:	460d      	mov	r5, r1
 80093a4:	b976      	cbnz	r6, 80093c4 <_Balloc+0x28>
 80093a6:	2010      	movs	r0, #16
 80093a8:	f7ff ffd0 	bl	800934c <malloc>
 80093ac:	4602      	mov	r2, r0
 80093ae:	6260      	str	r0, [r4, #36]	; 0x24
 80093b0:	b920      	cbnz	r0, 80093bc <_Balloc+0x20>
 80093b2:	4b18      	ldr	r3, [pc, #96]	; (8009414 <_Balloc+0x78>)
 80093b4:	4818      	ldr	r0, [pc, #96]	; (8009418 <_Balloc+0x7c>)
 80093b6:	2166      	movs	r1, #102	; 0x66
 80093b8:	f000 ff40 	bl	800a23c <__assert_func>
 80093bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093c0:	6006      	str	r6, [r0, #0]
 80093c2:	60c6      	str	r6, [r0, #12]
 80093c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80093c6:	68f3      	ldr	r3, [r6, #12]
 80093c8:	b183      	cbz	r3, 80093ec <_Balloc+0x50>
 80093ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093d2:	b9b8      	cbnz	r0, 8009404 <_Balloc+0x68>
 80093d4:	2101      	movs	r1, #1
 80093d6:	fa01 f605 	lsl.w	r6, r1, r5
 80093da:	1d72      	adds	r2, r6, #5
 80093dc:	0092      	lsls	r2, r2, #2
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 fc9d 	bl	8009d1e <_calloc_r>
 80093e4:	b160      	cbz	r0, 8009400 <_Balloc+0x64>
 80093e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093ea:	e00e      	b.n	800940a <_Balloc+0x6e>
 80093ec:	2221      	movs	r2, #33	; 0x21
 80093ee:	2104      	movs	r1, #4
 80093f0:	4620      	mov	r0, r4
 80093f2:	f000 fc94 	bl	8009d1e <_calloc_r>
 80093f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093f8:	60f0      	str	r0, [r6, #12]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e4      	bne.n	80093ca <_Balloc+0x2e>
 8009400:	2000      	movs	r0, #0
 8009402:	bd70      	pop	{r4, r5, r6, pc}
 8009404:	6802      	ldr	r2, [r0, #0]
 8009406:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800940a:	2300      	movs	r3, #0
 800940c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009410:	e7f7      	b.n	8009402 <_Balloc+0x66>
 8009412:	bf00      	nop
 8009414:	0800afb6 	.word	0x0800afb6
 8009418:	0800b0b4 	.word	0x0800b0b4

0800941c <_Bfree>:
 800941c:	b570      	push	{r4, r5, r6, lr}
 800941e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009420:	4605      	mov	r5, r0
 8009422:	460c      	mov	r4, r1
 8009424:	b976      	cbnz	r6, 8009444 <_Bfree+0x28>
 8009426:	2010      	movs	r0, #16
 8009428:	f7ff ff90 	bl	800934c <malloc>
 800942c:	4602      	mov	r2, r0
 800942e:	6268      	str	r0, [r5, #36]	; 0x24
 8009430:	b920      	cbnz	r0, 800943c <_Bfree+0x20>
 8009432:	4b09      	ldr	r3, [pc, #36]	; (8009458 <_Bfree+0x3c>)
 8009434:	4809      	ldr	r0, [pc, #36]	; (800945c <_Bfree+0x40>)
 8009436:	218a      	movs	r1, #138	; 0x8a
 8009438:	f000 ff00 	bl	800a23c <__assert_func>
 800943c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009440:	6006      	str	r6, [r0, #0]
 8009442:	60c6      	str	r6, [r0, #12]
 8009444:	b13c      	cbz	r4, 8009456 <_Bfree+0x3a>
 8009446:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009448:	6862      	ldr	r2, [r4, #4]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009450:	6021      	str	r1, [r4, #0]
 8009452:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009456:	bd70      	pop	{r4, r5, r6, pc}
 8009458:	0800afb6 	.word	0x0800afb6
 800945c:	0800b0b4 	.word	0x0800b0b4

08009460 <__multadd>:
 8009460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009464:	690d      	ldr	r5, [r1, #16]
 8009466:	4607      	mov	r7, r0
 8009468:	460c      	mov	r4, r1
 800946a:	461e      	mov	r6, r3
 800946c:	f101 0c14 	add.w	ip, r1, #20
 8009470:	2000      	movs	r0, #0
 8009472:	f8dc 3000 	ldr.w	r3, [ip]
 8009476:	b299      	uxth	r1, r3
 8009478:	fb02 6101 	mla	r1, r2, r1, r6
 800947c:	0c1e      	lsrs	r6, r3, #16
 800947e:	0c0b      	lsrs	r3, r1, #16
 8009480:	fb02 3306 	mla	r3, r2, r6, r3
 8009484:	b289      	uxth	r1, r1
 8009486:	3001      	adds	r0, #1
 8009488:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800948c:	4285      	cmp	r5, r0
 800948e:	f84c 1b04 	str.w	r1, [ip], #4
 8009492:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009496:	dcec      	bgt.n	8009472 <__multadd+0x12>
 8009498:	b30e      	cbz	r6, 80094de <__multadd+0x7e>
 800949a:	68a3      	ldr	r3, [r4, #8]
 800949c:	42ab      	cmp	r3, r5
 800949e:	dc19      	bgt.n	80094d4 <__multadd+0x74>
 80094a0:	6861      	ldr	r1, [r4, #4]
 80094a2:	4638      	mov	r0, r7
 80094a4:	3101      	adds	r1, #1
 80094a6:	f7ff ff79 	bl	800939c <_Balloc>
 80094aa:	4680      	mov	r8, r0
 80094ac:	b928      	cbnz	r0, 80094ba <__multadd+0x5a>
 80094ae:	4602      	mov	r2, r0
 80094b0:	4b0c      	ldr	r3, [pc, #48]	; (80094e4 <__multadd+0x84>)
 80094b2:	480d      	ldr	r0, [pc, #52]	; (80094e8 <__multadd+0x88>)
 80094b4:	21b5      	movs	r1, #181	; 0xb5
 80094b6:	f000 fec1 	bl	800a23c <__assert_func>
 80094ba:	6922      	ldr	r2, [r4, #16]
 80094bc:	3202      	adds	r2, #2
 80094be:	f104 010c 	add.w	r1, r4, #12
 80094c2:	0092      	lsls	r2, r2, #2
 80094c4:	300c      	adds	r0, #12
 80094c6:	f7ff ff5b 	bl	8009380 <memcpy>
 80094ca:	4621      	mov	r1, r4
 80094cc:	4638      	mov	r0, r7
 80094ce:	f7ff ffa5 	bl	800941c <_Bfree>
 80094d2:	4644      	mov	r4, r8
 80094d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094d8:	3501      	adds	r5, #1
 80094da:	615e      	str	r6, [r3, #20]
 80094dc:	6125      	str	r5, [r4, #16]
 80094de:	4620      	mov	r0, r4
 80094e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e4:	0800b028 	.word	0x0800b028
 80094e8:	0800b0b4 	.word	0x0800b0b4

080094ec <__s2b>:
 80094ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094f0:	460c      	mov	r4, r1
 80094f2:	4615      	mov	r5, r2
 80094f4:	461f      	mov	r7, r3
 80094f6:	2209      	movs	r2, #9
 80094f8:	3308      	adds	r3, #8
 80094fa:	4606      	mov	r6, r0
 80094fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009500:	2100      	movs	r1, #0
 8009502:	2201      	movs	r2, #1
 8009504:	429a      	cmp	r2, r3
 8009506:	db09      	blt.n	800951c <__s2b+0x30>
 8009508:	4630      	mov	r0, r6
 800950a:	f7ff ff47 	bl	800939c <_Balloc>
 800950e:	b940      	cbnz	r0, 8009522 <__s2b+0x36>
 8009510:	4602      	mov	r2, r0
 8009512:	4b19      	ldr	r3, [pc, #100]	; (8009578 <__s2b+0x8c>)
 8009514:	4819      	ldr	r0, [pc, #100]	; (800957c <__s2b+0x90>)
 8009516:	21ce      	movs	r1, #206	; 0xce
 8009518:	f000 fe90 	bl	800a23c <__assert_func>
 800951c:	0052      	lsls	r2, r2, #1
 800951e:	3101      	adds	r1, #1
 8009520:	e7f0      	b.n	8009504 <__s2b+0x18>
 8009522:	9b08      	ldr	r3, [sp, #32]
 8009524:	6143      	str	r3, [r0, #20]
 8009526:	2d09      	cmp	r5, #9
 8009528:	f04f 0301 	mov.w	r3, #1
 800952c:	6103      	str	r3, [r0, #16]
 800952e:	dd16      	ble.n	800955e <__s2b+0x72>
 8009530:	f104 0909 	add.w	r9, r4, #9
 8009534:	46c8      	mov	r8, r9
 8009536:	442c      	add	r4, r5
 8009538:	f818 3b01 	ldrb.w	r3, [r8], #1
 800953c:	4601      	mov	r1, r0
 800953e:	3b30      	subs	r3, #48	; 0x30
 8009540:	220a      	movs	r2, #10
 8009542:	4630      	mov	r0, r6
 8009544:	f7ff ff8c 	bl	8009460 <__multadd>
 8009548:	45a0      	cmp	r8, r4
 800954a:	d1f5      	bne.n	8009538 <__s2b+0x4c>
 800954c:	f1a5 0408 	sub.w	r4, r5, #8
 8009550:	444c      	add	r4, r9
 8009552:	1b2d      	subs	r5, r5, r4
 8009554:	1963      	adds	r3, r4, r5
 8009556:	42bb      	cmp	r3, r7
 8009558:	db04      	blt.n	8009564 <__s2b+0x78>
 800955a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800955e:	340a      	adds	r4, #10
 8009560:	2509      	movs	r5, #9
 8009562:	e7f6      	b.n	8009552 <__s2b+0x66>
 8009564:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009568:	4601      	mov	r1, r0
 800956a:	3b30      	subs	r3, #48	; 0x30
 800956c:	220a      	movs	r2, #10
 800956e:	4630      	mov	r0, r6
 8009570:	f7ff ff76 	bl	8009460 <__multadd>
 8009574:	e7ee      	b.n	8009554 <__s2b+0x68>
 8009576:	bf00      	nop
 8009578:	0800b028 	.word	0x0800b028
 800957c:	0800b0b4 	.word	0x0800b0b4

08009580 <__hi0bits>:
 8009580:	0c03      	lsrs	r3, r0, #16
 8009582:	041b      	lsls	r3, r3, #16
 8009584:	b9d3      	cbnz	r3, 80095bc <__hi0bits+0x3c>
 8009586:	0400      	lsls	r0, r0, #16
 8009588:	2310      	movs	r3, #16
 800958a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800958e:	bf04      	itt	eq
 8009590:	0200      	lsleq	r0, r0, #8
 8009592:	3308      	addeq	r3, #8
 8009594:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009598:	bf04      	itt	eq
 800959a:	0100      	lsleq	r0, r0, #4
 800959c:	3304      	addeq	r3, #4
 800959e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80095a2:	bf04      	itt	eq
 80095a4:	0080      	lsleq	r0, r0, #2
 80095a6:	3302      	addeq	r3, #2
 80095a8:	2800      	cmp	r0, #0
 80095aa:	db05      	blt.n	80095b8 <__hi0bits+0x38>
 80095ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80095b0:	f103 0301 	add.w	r3, r3, #1
 80095b4:	bf08      	it	eq
 80095b6:	2320      	moveq	r3, #32
 80095b8:	4618      	mov	r0, r3
 80095ba:	4770      	bx	lr
 80095bc:	2300      	movs	r3, #0
 80095be:	e7e4      	b.n	800958a <__hi0bits+0xa>

080095c0 <__lo0bits>:
 80095c0:	6803      	ldr	r3, [r0, #0]
 80095c2:	f013 0207 	ands.w	r2, r3, #7
 80095c6:	4601      	mov	r1, r0
 80095c8:	d00b      	beq.n	80095e2 <__lo0bits+0x22>
 80095ca:	07da      	lsls	r2, r3, #31
 80095cc:	d423      	bmi.n	8009616 <__lo0bits+0x56>
 80095ce:	0798      	lsls	r0, r3, #30
 80095d0:	bf49      	itett	mi
 80095d2:	085b      	lsrmi	r3, r3, #1
 80095d4:	089b      	lsrpl	r3, r3, #2
 80095d6:	2001      	movmi	r0, #1
 80095d8:	600b      	strmi	r3, [r1, #0]
 80095da:	bf5c      	itt	pl
 80095dc:	600b      	strpl	r3, [r1, #0]
 80095de:	2002      	movpl	r0, #2
 80095e0:	4770      	bx	lr
 80095e2:	b298      	uxth	r0, r3
 80095e4:	b9a8      	cbnz	r0, 8009612 <__lo0bits+0x52>
 80095e6:	0c1b      	lsrs	r3, r3, #16
 80095e8:	2010      	movs	r0, #16
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	b90a      	cbnz	r2, 80095f2 <__lo0bits+0x32>
 80095ee:	3008      	adds	r0, #8
 80095f0:	0a1b      	lsrs	r3, r3, #8
 80095f2:	071a      	lsls	r2, r3, #28
 80095f4:	bf04      	itt	eq
 80095f6:	091b      	lsreq	r3, r3, #4
 80095f8:	3004      	addeq	r0, #4
 80095fa:	079a      	lsls	r2, r3, #30
 80095fc:	bf04      	itt	eq
 80095fe:	089b      	lsreq	r3, r3, #2
 8009600:	3002      	addeq	r0, #2
 8009602:	07da      	lsls	r2, r3, #31
 8009604:	d403      	bmi.n	800960e <__lo0bits+0x4e>
 8009606:	085b      	lsrs	r3, r3, #1
 8009608:	f100 0001 	add.w	r0, r0, #1
 800960c:	d005      	beq.n	800961a <__lo0bits+0x5a>
 800960e:	600b      	str	r3, [r1, #0]
 8009610:	4770      	bx	lr
 8009612:	4610      	mov	r0, r2
 8009614:	e7e9      	b.n	80095ea <__lo0bits+0x2a>
 8009616:	2000      	movs	r0, #0
 8009618:	4770      	bx	lr
 800961a:	2020      	movs	r0, #32
 800961c:	4770      	bx	lr
	...

08009620 <__i2b>:
 8009620:	b510      	push	{r4, lr}
 8009622:	460c      	mov	r4, r1
 8009624:	2101      	movs	r1, #1
 8009626:	f7ff feb9 	bl	800939c <_Balloc>
 800962a:	4602      	mov	r2, r0
 800962c:	b928      	cbnz	r0, 800963a <__i2b+0x1a>
 800962e:	4b05      	ldr	r3, [pc, #20]	; (8009644 <__i2b+0x24>)
 8009630:	4805      	ldr	r0, [pc, #20]	; (8009648 <__i2b+0x28>)
 8009632:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009636:	f000 fe01 	bl	800a23c <__assert_func>
 800963a:	2301      	movs	r3, #1
 800963c:	6144      	str	r4, [r0, #20]
 800963e:	6103      	str	r3, [r0, #16]
 8009640:	bd10      	pop	{r4, pc}
 8009642:	bf00      	nop
 8009644:	0800b028 	.word	0x0800b028
 8009648:	0800b0b4 	.word	0x0800b0b4

0800964c <__multiply>:
 800964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	4691      	mov	r9, r2
 8009652:	690a      	ldr	r2, [r1, #16]
 8009654:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009658:	429a      	cmp	r2, r3
 800965a:	bfb8      	it	lt
 800965c:	460b      	movlt	r3, r1
 800965e:	460c      	mov	r4, r1
 8009660:	bfbc      	itt	lt
 8009662:	464c      	movlt	r4, r9
 8009664:	4699      	movlt	r9, r3
 8009666:	6927      	ldr	r7, [r4, #16]
 8009668:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800966c:	68a3      	ldr	r3, [r4, #8]
 800966e:	6861      	ldr	r1, [r4, #4]
 8009670:	eb07 060a 	add.w	r6, r7, sl
 8009674:	42b3      	cmp	r3, r6
 8009676:	b085      	sub	sp, #20
 8009678:	bfb8      	it	lt
 800967a:	3101      	addlt	r1, #1
 800967c:	f7ff fe8e 	bl	800939c <_Balloc>
 8009680:	b930      	cbnz	r0, 8009690 <__multiply+0x44>
 8009682:	4602      	mov	r2, r0
 8009684:	4b44      	ldr	r3, [pc, #272]	; (8009798 <__multiply+0x14c>)
 8009686:	4845      	ldr	r0, [pc, #276]	; (800979c <__multiply+0x150>)
 8009688:	f240 115d 	movw	r1, #349	; 0x15d
 800968c:	f000 fdd6 	bl	800a23c <__assert_func>
 8009690:	f100 0514 	add.w	r5, r0, #20
 8009694:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009698:	462b      	mov	r3, r5
 800969a:	2200      	movs	r2, #0
 800969c:	4543      	cmp	r3, r8
 800969e:	d321      	bcc.n	80096e4 <__multiply+0x98>
 80096a0:	f104 0314 	add.w	r3, r4, #20
 80096a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80096a8:	f109 0314 	add.w	r3, r9, #20
 80096ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80096b0:	9202      	str	r2, [sp, #8]
 80096b2:	1b3a      	subs	r2, r7, r4
 80096b4:	3a15      	subs	r2, #21
 80096b6:	f022 0203 	bic.w	r2, r2, #3
 80096ba:	3204      	adds	r2, #4
 80096bc:	f104 0115 	add.w	r1, r4, #21
 80096c0:	428f      	cmp	r7, r1
 80096c2:	bf38      	it	cc
 80096c4:	2204      	movcc	r2, #4
 80096c6:	9201      	str	r2, [sp, #4]
 80096c8:	9a02      	ldr	r2, [sp, #8]
 80096ca:	9303      	str	r3, [sp, #12]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d80c      	bhi.n	80096ea <__multiply+0x9e>
 80096d0:	2e00      	cmp	r6, #0
 80096d2:	dd03      	ble.n	80096dc <__multiply+0x90>
 80096d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d05a      	beq.n	8009792 <__multiply+0x146>
 80096dc:	6106      	str	r6, [r0, #16]
 80096de:	b005      	add	sp, #20
 80096e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e4:	f843 2b04 	str.w	r2, [r3], #4
 80096e8:	e7d8      	b.n	800969c <__multiply+0x50>
 80096ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80096ee:	f1ba 0f00 	cmp.w	sl, #0
 80096f2:	d024      	beq.n	800973e <__multiply+0xf2>
 80096f4:	f104 0e14 	add.w	lr, r4, #20
 80096f8:	46a9      	mov	r9, r5
 80096fa:	f04f 0c00 	mov.w	ip, #0
 80096fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009702:	f8d9 1000 	ldr.w	r1, [r9]
 8009706:	fa1f fb82 	uxth.w	fp, r2
 800970a:	b289      	uxth	r1, r1
 800970c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009710:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009714:	f8d9 2000 	ldr.w	r2, [r9]
 8009718:	4461      	add	r1, ip
 800971a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800971e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009722:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009726:	b289      	uxth	r1, r1
 8009728:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800972c:	4577      	cmp	r7, lr
 800972e:	f849 1b04 	str.w	r1, [r9], #4
 8009732:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009736:	d8e2      	bhi.n	80096fe <__multiply+0xb2>
 8009738:	9a01      	ldr	r2, [sp, #4]
 800973a:	f845 c002 	str.w	ip, [r5, r2]
 800973e:	9a03      	ldr	r2, [sp, #12]
 8009740:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009744:	3304      	adds	r3, #4
 8009746:	f1b9 0f00 	cmp.w	r9, #0
 800974a:	d020      	beq.n	800978e <__multiply+0x142>
 800974c:	6829      	ldr	r1, [r5, #0]
 800974e:	f104 0c14 	add.w	ip, r4, #20
 8009752:	46ae      	mov	lr, r5
 8009754:	f04f 0a00 	mov.w	sl, #0
 8009758:	f8bc b000 	ldrh.w	fp, [ip]
 800975c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009760:	fb09 220b 	mla	r2, r9, fp, r2
 8009764:	4492      	add	sl, r2
 8009766:	b289      	uxth	r1, r1
 8009768:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800976c:	f84e 1b04 	str.w	r1, [lr], #4
 8009770:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009774:	f8be 1000 	ldrh.w	r1, [lr]
 8009778:	0c12      	lsrs	r2, r2, #16
 800977a:	fb09 1102 	mla	r1, r9, r2, r1
 800977e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009782:	4567      	cmp	r7, ip
 8009784:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009788:	d8e6      	bhi.n	8009758 <__multiply+0x10c>
 800978a:	9a01      	ldr	r2, [sp, #4]
 800978c:	50a9      	str	r1, [r5, r2]
 800978e:	3504      	adds	r5, #4
 8009790:	e79a      	b.n	80096c8 <__multiply+0x7c>
 8009792:	3e01      	subs	r6, #1
 8009794:	e79c      	b.n	80096d0 <__multiply+0x84>
 8009796:	bf00      	nop
 8009798:	0800b028 	.word	0x0800b028
 800979c:	0800b0b4 	.word	0x0800b0b4

080097a0 <__pow5mult>:
 80097a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a4:	4615      	mov	r5, r2
 80097a6:	f012 0203 	ands.w	r2, r2, #3
 80097aa:	4606      	mov	r6, r0
 80097ac:	460f      	mov	r7, r1
 80097ae:	d007      	beq.n	80097c0 <__pow5mult+0x20>
 80097b0:	4c25      	ldr	r4, [pc, #148]	; (8009848 <__pow5mult+0xa8>)
 80097b2:	3a01      	subs	r2, #1
 80097b4:	2300      	movs	r3, #0
 80097b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097ba:	f7ff fe51 	bl	8009460 <__multadd>
 80097be:	4607      	mov	r7, r0
 80097c0:	10ad      	asrs	r5, r5, #2
 80097c2:	d03d      	beq.n	8009840 <__pow5mult+0xa0>
 80097c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80097c6:	b97c      	cbnz	r4, 80097e8 <__pow5mult+0x48>
 80097c8:	2010      	movs	r0, #16
 80097ca:	f7ff fdbf 	bl	800934c <malloc>
 80097ce:	4602      	mov	r2, r0
 80097d0:	6270      	str	r0, [r6, #36]	; 0x24
 80097d2:	b928      	cbnz	r0, 80097e0 <__pow5mult+0x40>
 80097d4:	4b1d      	ldr	r3, [pc, #116]	; (800984c <__pow5mult+0xac>)
 80097d6:	481e      	ldr	r0, [pc, #120]	; (8009850 <__pow5mult+0xb0>)
 80097d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097dc:	f000 fd2e 	bl	800a23c <__assert_func>
 80097e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097e4:	6004      	str	r4, [r0, #0]
 80097e6:	60c4      	str	r4, [r0, #12]
 80097e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097f0:	b94c      	cbnz	r4, 8009806 <__pow5mult+0x66>
 80097f2:	f240 2171 	movw	r1, #625	; 0x271
 80097f6:	4630      	mov	r0, r6
 80097f8:	f7ff ff12 	bl	8009620 <__i2b>
 80097fc:	2300      	movs	r3, #0
 80097fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009802:	4604      	mov	r4, r0
 8009804:	6003      	str	r3, [r0, #0]
 8009806:	f04f 0900 	mov.w	r9, #0
 800980a:	07eb      	lsls	r3, r5, #31
 800980c:	d50a      	bpl.n	8009824 <__pow5mult+0x84>
 800980e:	4639      	mov	r1, r7
 8009810:	4622      	mov	r2, r4
 8009812:	4630      	mov	r0, r6
 8009814:	f7ff ff1a 	bl	800964c <__multiply>
 8009818:	4639      	mov	r1, r7
 800981a:	4680      	mov	r8, r0
 800981c:	4630      	mov	r0, r6
 800981e:	f7ff fdfd 	bl	800941c <_Bfree>
 8009822:	4647      	mov	r7, r8
 8009824:	106d      	asrs	r5, r5, #1
 8009826:	d00b      	beq.n	8009840 <__pow5mult+0xa0>
 8009828:	6820      	ldr	r0, [r4, #0]
 800982a:	b938      	cbnz	r0, 800983c <__pow5mult+0x9c>
 800982c:	4622      	mov	r2, r4
 800982e:	4621      	mov	r1, r4
 8009830:	4630      	mov	r0, r6
 8009832:	f7ff ff0b 	bl	800964c <__multiply>
 8009836:	6020      	str	r0, [r4, #0]
 8009838:	f8c0 9000 	str.w	r9, [r0]
 800983c:	4604      	mov	r4, r0
 800983e:	e7e4      	b.n	800980a <__pow5mult+0x6a>
 8009840:	4638      	mov	r0, r7
 8009842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009846:	bf00      	nop
 8009848:	0800b200 	.word	0x0800b200
 800984c:	0800afb6 	.word	0x0800afb6
 8009850:	0800b0b4 	.word	0x0800b0b4

08009854 <__lshift>:
 8009854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009858:	460c      	mov	r4, r1
 800985a:	6849      	ldr	r1, [r1, #4]
 800985c:	6923      	ldr	r3, [r4, #16]
 800985e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009862:	68a3      	ldr	r3, [r4, #8]
 8009864:	4607      	mov	r7, r0
 8009866:	4691      	mov	r9, r2
 8009868:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800986c:	f108 0601 	add.w	r6, r8, #1
 8009870:	42b3      	cmp	r3, r6
 8009872:	db0b      	blt.n	800988c <__lshift+0x38>
 8009874:	4638      	mov	r0, r7
 8009876:	f7ff fd91 	bl	800939c <_Balloc>
 800987a:	4605      	mov	r5, r0
 800987c:	b948      	cbnz	r0, 8009892 <__lshift+0x3e>
 800987e:	4602      	mov	r2, r0
 8009880:	4b2a      	ldr	r3, [pc, #168]	; (800992c <__lshift+0xd8>)
 8009882:	482b      	ldr	r0, [pc, #172]	; (8009930 <__lshift+0xdc>)
 8009884:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009888:	f000 fcd8 	bl	800a23c <__assert_func>
 800988c:	3101      	adds	r1, #1
 800988e:	005b      	lsls	r3, r3, #1
 8009890:	e7ee      	b.n	8009870 <__lshift+0x1c>
 8009892:	2300      	movs	r3, #0
 8009894:	f100 0114 	add.w	r1, r0, #20
 8009898:	f100 0210 	add.w	r2, r0, #16
 800989c:	4618      	mov	r0, r3
 800989e:	4553      	cmp	r3, sl
 80098a0:	db37      	blt.n	8009912 <__lshift+0xbe>
 80098a2:	6920      	ldr	r0, [r4, #16]
 80098a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098a8:	f104 0314 	add.w	r3, r4, #20
 80098ac:	f019 091f 	ands.w	r9, r9, #31
 80098b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80098b8:	d02f      	beq.n	800991a <__lshift+0xc6>
 80098ba:	f1c9 0e20 	rsb	lr, r9, #32
 80098be:	468a      	mov	sl, r1
 80098c0:	f04f 0c00 	mov.w	ip, #0
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	fa02 f209 	lsl.w	r2, r2, r9
 80098ca:	ea42 020c 	orr.w	r2, r2, ip
 80098ce:	f84a 2b04 	str.w	r2, [sl], #4
 80098d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80098d6:	4298      	cmp	r0, r3
 80098d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80098dc:	d8f2      	bhi.n	80098c4 <__lshift+0x70>
 80098de:	1b03      	subs	r3, r0, r4
 80098e0:	3b15      	subs	r3, #21
 80098e2:	f023 0303 	bic.w	r3, r3, #3
 80098e6:	3304      	adds	r3, #4
 80098e8:	f104 0215 	add.w	r2, r4, #21
 80098ec:	4290      	cmp	r0, r2
 80098ee:	bf38      	it	cc
 80098f0:	2304      	movcc	r3, #4
 80098f2:	f841 c003 	str.w	ip, [r1, r3]
 80098f6:	f1bc 0f00 	cmp.w	ip, #0
 80098fa:	d001      	beq.n	8009900 <__lshift+0xac>
 80098fc:	f108 0602 	add.w	r6, r8, #2
 8009900:	3e01      	subs	r6, #1
 8009902:	4638      	mov	r0, r7
 8009904:	612e      	str	r6, [r5, #16]
 8009906:	4621      	mov	r1, r4
 8009908:	f7ff fd88 	bl	800941c <_Bfree>
 800990c:	4628      	mov	r0, r5
 800990e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009912:	f842 0f04 	str.w	r0, [r2, #4]!
 8009916:	3301      	adds	r3, #1
 8009918:	e7c1      	b.n	800989e <__lshift+0x4a>
 800991a:	3904      	subs	r1, #4
 800991c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009920:	f841 2f04 	str.w	r2, [r1, #4]!
 8009924:	4298      	cmp	r0, r3
 8009926:	d8f9      	bhi.n	800991c <__lshift+0xc8>
 8009928:	e7ea      	b.n	8009900 <__lshift+0xac>
 800992a:	bf00      	nop
 800992c:	0800b028 	.word	0x0800b028
 8009930:	0800b0b4 	.word	0x0800b0b4

08009934 <__mcmp>:
 8009934:	b530      	push	{r4, r5, lr}
 8009936:	6902      	ldr	r2, [r0, #16]
 8009938:	690c      	ldr	r4, [r1, #16]
 800993a:	1b12      	subs	r2, r2, r4
 800993c:	d10e      	bne.n	800995c <__mcmp+0x28>
 800993e:	f100 0314 	add.w	r3, r0, #20
 8009942:	3114      	adds	r1, #20
 8009944:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009948:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800994c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009950:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009954:	42a5      	cmp	r5, r4
 8009956:	d003      	beq.n	8009960 <__mcmp+0x2c>
 8009958:	d305      	bcc.n	8009966 <__mcmp+0x32>
 800995a:	2201      	movs	r2, #1
 800995c:	4610      	mov	r0, r2
 800995e:	bd30      	pop	{r4, r5, pc}
 8009960:	4283      	cmp	r3, r0
 8009962:	d3f3      	bcc.n	800994c <__mcmp+0x18>
 8009964:	e7fa      	b.n	800995c <__mcmp+0x28>
 8009966:	f04f 32ff 	mov.w	r2, #4294967295
 800996a:	e7f7      	b.n	800995c <__mcmp+0x28>

0800996c <__mdiff>:
 800996c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009970:	460c      	mov	r4, r1
 8009972:	4606      	mov	r6, r0
 8009974:	4611      	mov	r1, r2
 8009976:	4620      	mov	r0, r4
 8009978:	4690      	mov	r8, r2
 800997a:	f7ff ffdb 	bl	8009934 <__mcmp>
 800997e:	1e05      	subs	r5, r0, #0
 8009980:	d110      	bne.n	80099a4 <__mdiff+0x38>
 8009982:	4629      	mov	r1, r5
 8009984:	4630      	mov	r0, r6
 8009986:	f7ff fd09 	bl	800939c <_Balloc>
 800998a:	b930      	cbnz	r0, 800999a <__mdiff+0x2e>
 800998c:	4b3a      	ldr	r3, [pc, #232]	; (8009a78 <__mdiff+0x10c>)
 800998e:	4602      	mov	r2, r0
 8009990:	f240 2132 	movw	r1, #562	; 0x232
 8009994:	4839      	ldr	r0, [pc, #228]	; (8009a7c <__mdiff+0x110>)
 8009996:	f000 fc51 	bl	800a23c <__assert_func>
 800999a:	2301      	movs	r3, #1
 800999c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a4:	bfa4      	itt	ge
 80099a6:	4643      	movge	r3, r8
 80099a8:	46a0      	movge	r8, r4
 80099aa:	4630      	mov	r0, r6
 80099ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80099b0:	bfa6      	itte	ge
 80099b2:	461c      	movge	r4, r3
 80099b4:	2500      	movge	r5, #0
 80099b6:	2501      	movlt	r5, #1
 80099b8:	f7ff fcf0 	bl	800939c <_Balloc>
 80099bc:	b920      	cbnz	r0, 80099c8 <__mdiff+0x5c>
 80099be:	4b2e      	ldr	r3, [pc, #184]	; (8009a78 <__mdiff+0x10c>)
 80099c0:	4602      	mov	r2, r0
 80099c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80099c6:	e7e5      	b.n	8009994 <__mdiff+0x28>
 80099c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80099cc:	6926      	ldr	r6, [r4, #16]
 80099ce:	60c5      	str	r5, [r0, #12]
 80099d0:	f104 0914 	add.w	r9, r4, #20
 80099d4:	f108 0514 	add.w	r5, r8, #20
 80099d8:	f100 0e14 	add.w	lr, r0, #20
 80099dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80099e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80099e4:	f108 0210 	add.w	r2, r8, #16
 80099e8:	46f2      	mov	sl, lr
 80099ea:	2100      	movs	r1, #0
 80099ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80099f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099f4:	fa1f f883 	uxth.w	r8, r3
 80099f8:	fa11 f18b 	uxtah	r1, r1, fp
 80099fc:	0c1b      	lsrs	r3, r3, #16
 80099fe:	eba1 0808 	sub.w	r8, r1, r8
 8009a02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a0a:	fa1f f888 	uxth.w	r8, r8
 8009a0e:	1419      	asrs	r1, r3, #16
 8009a10:	454e      	cmp	r6, r9
 8009a12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a16:	f84a 3b04 	str.w	r3, [sl], #4
 8009a1a:	d8e7      	bhi.n	80099ec <__mdiff+0x80>
 8009a1c:	1b33      	subs	r3, r6, r4
 8009a1e:	3b15      	subs	r3, #21
 8009a20:	f023 0303 	bic.w	r3, r3, #3
 8009a24:	3304      	adds	r3, #4
 8009a26:	3415      	adds	r4, #21
 8009a28:	42a6      	cmp	r6, r4
 8009a2a:	bf38      	it	cc
 8009a2c:	2304      	movcc	r3, #4
 8009a2e:	441d      	add	r5, r3
 8009a30:	4473      	add	r3, lr
 8009a32:	469e      	mov	lr, r3
 8009a34:	462e      	mov	r6, r5
 8009a36:	4566      	cmp	r6, ip
 8009a38:	d30e      	bcc.n	8009a58 <__mdiff+0xec>
 8009a3a:	f10c 0203 	add.w	r2, ip, #3
 8009a3e:	1b52      	subs	r2, r2, r5
 8009a40:	f022 0203 	bic.w	r2, r2, #3
 8009a44:	3d03      	subs	r5, #3
 8009a46:	45ac      	cmp	ip, r5
 8009a48:	bf38      	it	cc
 8009a4a:	2200      	movcc	r2, #0
 8009a4c:	441a      	add	r2, r3
 8009a4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a52:	b17b      	cbz	r3, 8009a74 <__mdiff+0x108>
 8009a54:	6107      	str	r7, [r0, #16]
 8009a56:	e7a3      	b.n	80099a0 <__mdiff+0x34>
 8009a58:	f856 8b04 	ldr.w	r8, [r6], #4
 8009a5c:	fa11 f288 	uxtah	r2, r1, r8
 8009a60:	1414      	asrs	r4, r2, #16
 8009a62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a66:	b292      	uxth	r2, r2
 8009a68:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a6c:	f84e 2b04 	str.w	r2, [lr], #4
 8009a70:	1421      	asrs	r1, r4, #16
 8009a72:	e7e0      	b.n	8009a36 <__mdiff+0xca>
 8009a74:	3f01      	subs	r7, #1
 8009a76:	e7ea      	b.n	8009a4e <__mdiff+0xe2>
 8009a78:	0800b028 	.word	0x0800b028
 8009a7c:	0800b0b4 	.word	0x0800b0b4

08009a80 <__ulp>:
 8009a80:	b082      	sub	sp, #8
 8009a82:	ed8d 0b00 	vstr	d0, [sp]
 8009a86:	9b01      	ldr	r3, [sp, #4]
 8009a88:	4912      	ldr	r1, [pc, #72]	; (8009ad4 <__ulp+0x54>)
 8009a8a:	4019      	ands	r1, r3
 8009a8c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009a90:	2900      	cmp	r1, #0
 8009a92:	dd05      	ble.n	8009aa0 <__ulp+0x20>
 8009a94:	2200      	movs	r2, #0
 8009a96:	460b      	mov	r3, r1
 8009a98:	ec43 2b10 	vmov	d0, r2, r3
 8009a9c:	b002      	add	sp, #8
 8009a9e:	4770      	bx	lr
 8009aa0:	4249      	negs	r1, r1
 8009aa2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009aa6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009aaa:	f04f 0200 	mov.w	r2, #0
 8009aae:	f04f 0300 	mov.w	r3, #0
 8009ab2:	da04      	bge.n	8009abe <__ulp+0x3e>
 8009ab4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009ab8:	fa41 f300 	asr.w	r3, r1, r0
 8009abc:	e7ec      	b.n	8009a98 <__ulp+0x18>
 8009abe:	f1a0 0114 	sub.w	r1, r0, #20
 8009ac2:	291e      	cmp	r1, #30
 8009ac4:	bfda      	itte	le
 8009ac6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009aca:	fa20 f101 	lsrle.w	r1, r0, r1
 8009ace:	2101      	movgt	r1, #1
 8009ad0:	460a      	mov	r2, r1
 8009ad2:	e7e1      	b.n	8009a98 <__ulp+0x18>
 8009ad4:	7ff00000 	.word	0x7ff00000

08009ad8 <__b2d>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	6905      	ldr	r5, [r0, #16]
 8009adc:	f100 0714 	add.w	r7, r0, #20
 8009ae0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009ae4:	1f2e      	subs	r6, r5, #4
 8009ae6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009aea:	4620      	mov	r0, r4
 8009aec:	f7ff fd48 	bl	8009580 <__hi0bits>
 8009af0:	f1c0 0320 	rsb	r3, r0, #32
 8009af4:	280a      	cmp	r0, #10
 8009af6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009b74 <__b2d+0x9c>
 8009afa:	600b      	str	r3, [r1, #0]
 8009afc:	dc14      	bgt.n	8009b28 <__b2d+0x50>
 8009afe:	f1c0 0e0b 	rsb	lr, r0, #11
 8009b02:	fa24 f10e 	lsr.w	r1, r4, lr
 8009b06:	42b7      	cmp	r7, r6
 8009b08:	ea41 030c 	orr.w	r3, r1, ip
 8009b0c:	bf34      	ite	cc
 8009b0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b12:	2100      	movcs	r1, #0
 8009b14:	3015      	adds	r0, #21
 8009b16:	fa04 f000 	lsl.w	r0, r4, r0
 8009b1a:	fa21 f10e 	lsr.w	r1, r1, lr
 8009b1e:	ea40 0201 	orr.w	r2, r0, r1
 8009b22:	ec43 2b10 	vmov	d0, r2, r3
 8009b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b28:	42b7      	cmp	r7, r6
 8009b2a:	bf3a      	itte	cc
 8009b2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b30:	f1a5 0608 	subcc.w	r6, r5, #8
 8009b34:	2100      	movcs	r1, #0
 8009b36:	380b      	subs	r0, #11
 8009b38:	d017      	beq.n	8009b6a <__b2d+0x92>
 8009b3a:	f1c0 0c20 	rsb	ip, r0, #32
 8009b3e:	fa04 f500 	lsl.w	r5, r4, r0
 8009b42:	42be      	cmp	r6, r7
 8009b44:	fa21 f40c 	lsr.w	r4, r1, ip
 8009b48:	ea45 0504 	orr.w	r5, r5, r4
 8009b4c:	bf8c      	ite	hi
 8009b4e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009b52:	2400      	movls	r4, #0
 8009b54:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009b58:	fa01 f000 	lsl.w	r0, r1, r0
 8009b5c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009b60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009b64:	ea40 0204 	orr.w	r2, r0, r4
 8009b68:	e7db      	b.n	8009b22 <__b2d+0x4a>
 8009b6a:	ea44 030c 	orr.w	r3, r4, ip
 8009b6e:	460a      	mov	r2, r1
 8009b70:	e7d7      	b.n	8009b22 <__b2d+0x4a>
 8009b72:	bf00      	nop
 8009b74:	3ff00000 	.word	0x3ff00000

08009b78 <__d2b>:
 8009b78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b7c:	4689      	mov	r9, r1
 8009b7e:	2101      	movs	r1, #1
 8009b80:	ec57 6b10 	vmov	r6, r7, d0
 8009b84:	4690      	mov	r8, r2
 8009b86:	f7ff fc09 	bl	800939c <_Balloc>
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	b930      	cbnz	r0, 8009b9c <__d2b+0x24>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	4b25      	ldr	r3, [pc, #148]	; (8009c28 <__d2b+0xb0>)
 8009b92:	4826      	ldr	r0, [pc, #152]	; (8009c2c <__d2b+0xb4>)
 8009b94:	f240 310a 	movw	r1, #778	; 0x30a
 8009b98:	f000 fb50 	bl	800a23c <__assert_func>
 8009b9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ba0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ba4:	bb35      	cbnz	r5, 8009bf4 <__d2b+0x7c>
 8009ba6:	2e00      	cmp	r6, #0
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	d028      	beq.n	8009bfe <__d2b+0x86>
 8009bac:	4668      	mov	r0, sp
 8009bae:	9600      	str	r6, [sp, #0]
 8009bb0:	f7ff fd06 	bl	80095c0 <__lo0bits>
 8009bb4:	9900      	ldr	r1, [sp, #0]
 8009bb6:	b300      	cbz	r0, 8009bfa <__d2b+0x82>
 8009bb8:	9a01      	ldr	r2, [sp, #4]
 8009bba:	f1c0 0320 	rsb	r3, r0, #32
 8009bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc2:	430b      	orrs	r3, r1
 8009bc4:	40c2      	lsrs	r2, r0
 8009bc6:	6163      	str	r3, [r4, #20]
 8009bc8:	9201      	str	r2, [sp, #4]
 8009bca:	9b01      	ldr	r3, [sp, #4]
 8009bcc:	61a3      	str	r3, [r4, #24]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	bf14      	ite	ne
 8009bd2:	2202      	movne	r2, #2
 8009bd4:	2201      	moveq	r2, #1
 8009bd6:	6122      	str	r2, [r4, #16]
 8009bd8:	b1d5      	cbz	r5, 8009c10 <__d2b+0x98>
 8009bda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009bde:	4405      	add	r5, r0
 8009be0:	f8c9 5000 	str.w	r5, [r9]
 8009be4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009be8:	f8c8 0000 	str.w	r0, [r8]
 8009bec:	4620      	mov	r0, r4
 8009bee:	b003      	add	sp, #12
 8009bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bf8:	e7d5      	b.n	8009ba6 <__d2b+0x2e>
 8009bfa:	6161      	str	r1, [r4, #20]
 8009bfc:	e7e5      	b.n	8009bca <__d2b+0x52>
 8009bfe:	a801      	add	r0, sp, #4
 8009c00:	f7ff fcde 	bl	80095c0 <__lo0bits>
 8009c04:	9b01      	ldr	r3, [sp, #4]
 8009c06:	6163      	str	r3, [r4, #20]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	6122      	str	r2, [r4, #16]
 8009c0c:	3020      	adds	r0, #32
 8009c0e:	e7e3      	b.n	8009bd8 <__d2b+0x60>
 8009c10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c18:	f8c9 0000 	str.w	r0, [r9]
 8009c1c:	6918      	ldr	r0, [r3, #16]
 8009c1e:	f7ff fcaf 	bl	8009580 <__hi0bits>
 8009c22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c26:	e7df      	b.n	8009be8 <__d2b+0x70>
 8009c28:	0800b028 	.word	0x0800b028
 8009c2c:	0800b0b4 	.word	0x0800b0b4

08009c30 <__ratio>:
 8009c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c34:	4688      	mov	r8, r1
 8009c36:	4669      	mov	r1, sp
 8009c38:	4681      	mov	r9, r0
 8009c3a:	f7ff ff4d 	bl	8009ad8 <__b2d>
 8009c3e:	a901      	add	r1, sp, #4
 8009c40:	4640      	mov	r0, r8
 8009c42:	ec55 4b10 	vmov	r4, r5, d0
 8009c46:	f7ff ff47 	bl	8009ad8 <__b2d>
 8009c4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009c52:	eba3 0c02 	sub.w	ip, r3, r2
 8009c56:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c5a:	1a9b      	subs	r3, r3, r2
 8009c5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009c60:	ec51 0b10 	vmov	r0, r1, d0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bfd6      	itet	le
 8009c68:	460a      	movle	r2, r1
 8009c6a:	462a      	movgt	r2, r5
 8009c6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c70:	468b      	mov	fp, r1
 8009c72:	462f      	mov	r7, r5
 8009c74:	bfd4      	ite	le
 8009c76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009c7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009c7e:	4620      	mov	r0, r4
 8009c80:	ee10 2a10 	vmov	r2, s0
 8009c84:	465b      	mov	r3, fp
 8009c86:	4639      	mov	r1, r7
 8009c88:	f7f6 fdf0 	bl	800086c <__aeabi_ddiv>
 8009c8c:	ec41 0b10 	vmov	d0, r0, r1
 8009c90:	b003      	add	sp, #12
 8009c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c96 <__copybits>:
 8009c96:	3901      	subs	r1, #1
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	1149      	asrs	r1, r1, #5
 8009c9c:	6914      	ldr	r4, [r2, #16]
 8009c9e:	3101      	adds	r1, #1
 8009ca0:	f102 0314 	add.w	r3, r2, #20
 8009ca4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ca8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009cac:	1f05      	subs	r5, r0, #4
 8009cae:	42a3      	cmp	r3, r4
 8009cb0:	d30c      	bcc.n	8009ccc <__copybits+0x36>
 8009cb2:	1aa3      	subs	r3, r4, r2
 8009cb4:	3b11      	subs	r3, #17
 8009cb6:	f023 0303 	bic.w	r3, r3, #3
 8009cba:	3211      	adds	r2, #17
 8009cbc:	42a2      	cmp	r2, r4
 8009cbe:	bf88      	it	hi
 8009cc0:	2300      	movhi	r3, #0
 8009cc2:	4418      	add	r0, r3
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	4288      	cmp	r0, r1
 8009cc8:	d305      	bcc.n	8009cd6 <__copybits+0x40>
 8009cca:	bd70      	pop	{r4, r5, r6, pc}
 8009ccc:	f853 6b04 	ldr.w	r6, [r3], #4
 8009cd0:	f845 6f04 	str.w	r6, [r5, #4]!
 8009cd4:	e7eb      	b.n	8009cae <__copybits+0x18>
 8009cd6:	f840 3b04 	str.w	r3, [r0], #4
 8009cda:	e7f4      	b.n	8009cc6 <__copybits+0x30>

08009cdc <__any_on>:
 8009cdc:	f100 0214 	add.w	r2, r0, #20
 8009ce0:	6900      	ldr	r0, [r0, #16]
 8009ce2:	114b      	asrs	r3, r1, #5
 8009ce4:	4298      	cmp	r0, r3
 8009ce6:	b510      	push	{r4, lr}
 8009ce8:	db11      	blt.n	8009d0e <__any_on+0x32>
 8009cea:	dd0a      	ble.n	8009d02 <__any_on+0x26>
 8009cec:	f011 011f 	ands.w	r1, r1, #31
 8009cf0:	d007      	beq.n	8009d02 <__any_on+0x26>
 8009cf2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009cf6:	fa24 f001 	lsr.w	r0, r4, r1
 8009cfa:	fa00 f101 	lsl.w	r1, r0, r1
 8009cfe:	428c      	cmp	r4, r1
 8009d00:	d10b      	bne.n	8009d1a <__any_on+0x3e>
 8009d02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d803      	bhi.n	8009d12 <__any_on+0x36>
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	bd10      	pop	{r4, pc}
 8009d0e:	4603      	mov	r3, r0
 8009d10:	e7f7      	b.n	8009d02 <__any_on+0x26>
 8009d12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d16:	2900      	cmp	r1, #0
 8009d18:	d0f5      	beq.n	8009d06 <__any_on+0x2a>
 8009d1a:	2001      	movs	r0, #1
 8009d1c:	e7f6      	b.n	8009d0c <__any_on+0x30>

08009d1e <_calloc_r>:
 8009d1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d20:	fba1 2402 	umull	r2, r4, r1, r2
 8009d24:	b94c      	cbnz	r4, 8009d3a <_calloc_r+0x1c>
 8009d26:	4611      	mov	r1, r2
 8009d28:	9201      	str	r2, [sp, #4]
 8009d2a:	f000 f87b 	bl	8009e24 <_malloc_r>
 8009d2e:	9a01      	ldr	r2, [sp, #4]
 8009d30:	4605      	mov	r5, r0
 8009d32:	b930      	cbnz	r0, 8009d42 <_calloc_r+0x24>
 8009d34:	4628      	mov	r0, r5
 8009d36:	b003      	add	sp, #12
 8009d38:	bd30      	pop	{r4, r5, pc}
 8009d3a:	220c      	movs	r2, #12
 8009d3c:	6002      	str	r2, [r0, #0]
 8009d3e:	2500      	movs	r5, #0
 8009d40:	e7f8      	b.n	8009d34 <_calloc_r+0x16>
 8009d42:	4621      	mov	r1, r4
 8009d44:	f7fc fbbe 	bl	80064c4 <memset>
 8009d48:	e7f4      	b.n	8009d34 <_calloc_r+0x16>
	...

08009d4c <_free_r>:
 8009d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d4e:	2900      	cmp	r1, #0
 8009d50:	d044      	beq.n	8009ddc <_free_r+0x90>
 8009d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d56:	9001      	str	r0, [sp, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f1a1 0404 	sub.w	r4, r1, #4
 8009d5e:	bfb8      	it	lt
 8009d60:	18e4      	addlt	r4, r4, r3
 8009d62:	f000 fab5 	bl	800a2d0 <__malloc_lock>
 8009d66:	4a1e      	ldr	r2, [pc, #120]	; (8009de0 <_free_r+0x94>)
 8009d68:	9801      	ldr	r0, [sp, #4]
 8009d6a:	6813      	ldr	r3, [r2, #0]
 8009d6c:	b933      	cbnz	r3, 8009d7c <_free_r+0x30>
 8009d6e:	6063      	str	r3, [r4, #4]
 8009d70:	6014      	str	r4, [r2, #0]
 8009d72:	b003      	add	sp, #12
 8009d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d78:	f000 bab0 	b.w	800a2dc <__malloc_unlock>
 8009d7c:	42a3      	cmp	r3, r4
 8009d7e:	d908      	bls.n	8009d92 <_free_r+0x46>
 8009d80:	6825      	ldr	r5, [r4, #0]
 8009d82:	1961      	adds	r1, r4, r5
 8009d84:	428b      	cmp	r3, r1
 8009d86:	bf01      	itttt	eq
 8009d88:	6819      	ldreq	r1, [r3, #0]
 8009d8a:	685b      	ldreq	r3, [r3, #4]
 8009d8c:	1949      	addeq	r1, r1, r5
 8009d8e:	6021      	streq	r1, [r4, #0]
 8009d90:	e7ed      	b.n	8009d6e <_free_r+0x22>
 8009d92:	461a      	mov	r2, r3
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	b10b      	cbz	r3, 8009d9c <_free_r+0x50>
 8009d98:	42a3      	cmp	r3, r4
 8009d9a:	d9fa      	bls.n	8009d92 <_free_r+0x46>
 8009d9c:	6811      	ldr	r1, [r2, #0]
 8009d9e:	1855      	adds	r5, r2, r1
 8009da0:	42a5      	cmp	r5, r4
 8009da2:	d10b      	bne.n	8009dbc <_free_r+0x70>
 8009da4:	6824      	ldr	r4, [r4, #0]
 8009da6:	4421      	add	r1, r4
 8009da8:	1854      	adds	r4, r2, r1
 8009daa:	42a3      	cmp	r3, r4
 8009dac:	6011      	str	r1, [r2, #0]
 8009dae:	d1e0      	bne.n	8009d72 <_free_r+0x26>
 8009db0:	681c      	ldr	r4, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	6053      	str	r3, [r2, #4]
 8009db6:	4421      	add	r1, r4
 8009db8:	6011      	str	r1, [r2, #0]
 8009dba:	e7da      	b.n	8009d72 <_free_r+0x26>
 8009dbc:	d902      	bls.n	8009dc4 <_free_r+0x78>
 8009dbe:	230c      	movs	r3, #12
 8009dc0:	6003      	str	r3, [r0, #0]
 8009dc2:	e7d6      	b.n	8009d72 <_free_r+0x26>
 8009dc4:	6825      	ldr	r5, [r4, #0]
 8009dc6:	1961      	adds	r1, r4, r5
 8009dc8:	428b      	cmp	r3, r1
 8009dca:	bf04      	itt	eq
 8009dcc:	6819      	ldreq	r1, [r3, #0]
 8009dce:	685b      	ldreq	r3, [r3, #4]
 8009dd0:	6063      	str	r3, [r4, #4]
 8009dd2:	bf04      	itt	eq
 8009dd4:	1949      	addeq	r1, r1, r5
 8009dd6:	6021      	streq	r1, [r4, #0]
 8009dd8:	6054      	str	r4, [r2, #4]
 8009dda:	e7ca      	b.n	8009d72 <_free_r+0x26>
 8009ddc:	b003      	add	sp, #12
 8009dde:	bd30      	pop	{r4, r5, pc}
 8009de0:	20000c08 	.word	0x20000c08

08009de4 <sbrk_aligned>:
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	4e0e      	ldr	r6, [pc, #56]	; (8009e20 <sbrk_aligned+0x3c>)
 8009de8:	460c      	mov	r4, r1
 8009dea:	6831      	ldr	r1, [r6, #0]
 8009dec:	4605      	mov	r5, r0
 8009dee:	b911      	cbnz	r1, 8009df6 <sbrk_aligned+0x12>
 8009df0:	f000 f9f2 	bl	800a1d8 <_sbrk_r>
 8009df4:	6030      	str	r0, [r6, #0]
 8009df6:	4621      	mov	r1, r4
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f000 f9ed 	bl	800a1d8 <_sbrk_r>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d00a      	beq.n	8009e18 <sbrk_aligned+0x34>
 8009e02:	1cc4      	adds	r4, r0, #3
 8009e04:	f024 0403 	bic.w	r4, r4, #3
 8009e08:	42a0      	cmp	r0, r4
 8009e0a:	d007      	beq.n	8009e1c <sbrk_aligned+0x38>
 8009e0c:	1a21      	subs	r1, r4, r0
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f000 f9e2 	bl	800a1d8 <_sbrk_r>
 8009e14:	3001      	adds	r0, #1
 8009e16:	d101      	bne.n	8009e1c <sbrk_aligned+0x38>
 8009e18:	f04f 34ff 	mov.w	r4, #4294967295
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	bd70      	pop	{r4, r5, r6, pc}
 8009e20:	20000c0c 	.word	0x20000c0c

08009e24 <_malloc_r>:
 8009e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e28:	1ccd      	adds	r5, r1, #3
 8009e2a:	f025 0503 	bic.w	r5, r5, #3
 8009e2e:	3508      	adds	r5, #8
 8009e30:	2d0c      	cmp	r5, #12
 8009e32:	bf38      	it	cc
 8009e34:	250c      	movcc	r5, #12
 8009e36:	2d00      	cmp	r5, #0
 8009e38:	4607      	mov	r7, r0
 8009e3a:	db01      	blt.n	8009e40 <_malloc_r+0x1c>
 8009e3c:	42a9      	cmp	r1, r5
 8009e3e:	d905      	bls.n	8009e4c <_malloc_r+0x28>
 8009e40:	230c      	movs	r3, #12
 8009e42:	603b      	str	r3, [r7, #0]
 8009e44:	2600      	movs	r6, #0
 8009e46:	4630      	mov	r0, r6
 8009e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e4c:	4e2e      	ldr	r6, [pc, #184]	; (8009f08 <_malloc_r+0xe4>)
 8009e4e:	f000 fa3f 	bl	800a2d0 <__malloc_lock>
 8009e52:	6833      	ldr	r3, [r6, #0]
 8009e54:	461c      	mov	r4, r3
 8009e56:	bb34      	cbnz	r4, 8009ea6 <_malloc_r+0x82>
 8009e58:	4629      	mov	r1, r5
 8009e5a:	4638      	mov	r0, r7
 8009e5c:	f7ff ffc2 	bl	8009de4 <sbrk_aligned>
 8009e60:	1c43      	adds	r3, r0, #1
 8009e62:	4604      	mov	r4, r0
 8009e64:	d14d      	bne.n	8009f02 <_malloc_r+0xde>
 8009e66:	6834      	ldr	r4, [r6, #0]
 8009e68:	4626      	mov	r6, r4
 8009e6a:	2e00      	cmp	r6, #0
 8009e6c:	d140      	bne.n	8009ef0 <_malloc_r+0xcc>
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	4631      	mov	r1, r6
 8009e72:	4638      	mov	r0, r7
 8009e74:	eb04 0803 	add.w	r8, r4, r3
 8009e78:	f000 f9ae 	bl	800a1d8 <_sbrk_r>
 8009e7c:	4580      	cmp	r8, r0
 8009e7e:	d13a      	bne.n	8009ef6 <_malloc_r+0xd2>
 8009e80:	6821      	ldr	r1, [r4, #0]
 8009e82:	3503      	adds	r5, #3
 8009e84:	1a6d      	subs	r5, r5, r1
 8009e86:	f025 0503 	bic.w	r5, r5, #3
 8009e8a:	3508      	adds	r5, #8
 8009e8c:	2d0c      	cmp	r5, #12
 8009e8e:	bf38      	it	cc
 8009e90:	250c      	movcc	r5, #12
 8009e92:	4629      	mov	r1, r5
 8009e94:	4638      	mov	r0, r7
 8009e96:	f7ff ffa5 	bl	8009de4 <sbrk_aligned>
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	d02b      	beq.n	8009ef6 <_malloc_r+0xd2>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	442b      	add	r3, r5
 8009ea2:	6023      	str	r3, [r4, #0]
 8009ea4:	e00e      	b.n	8009ec4 <_malloc_r+0xa0>
 8009ea6:	6822      	ldr	r2, [r4, #0]
 8009ea8:	1b52      	subs	r2, r2, r5
 8009eaa:	d41e      	bmi.n	8009eea <_malloc_r+0xc6>
 8009eac:	2a0b      	cmp	r2, #11
 8009eae:	d916      	bls.n	8009ede <_malloc_r+0xba>
 8009eb0:	1961      	adds	r1, r4, r5
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	6025      	str	r5, [r4, #0]
 8009eb6:	bf18      	it	ne
 8009eb8:	6059      	strne	r1, [r3, #4]
 8009eba:	6863      	ldr	r3, [r4, #4]
 8009ebc:	bf08      	it	eq
 8009ebe:	6031      	streq	r1, [r6, #0]
 8009ec0:	5162      	str	r2, [r4, r5]
 8009ec2:	604b      	str	r3, [r1, #4]
 8009ec4:	4638      	mov	r0, r7
 8009ec6:	f104 060b 	add.w	r6, r4, #11
 8009eca:	f000 fa07 	bl	800a2dc <__malloc_unlock>
 8009ece:	f026 0607 	bic.w	r6, r6, #7
 8009ed2:	1d23      	adds	r3, r4, #4
 8009ed4:	1af2      	subs	r2, r6, r3
 8009ed6:	d0b6      	beq.n	8009e46 <_malloc_r+0x22>
 8009ed8:	1b9b      	subs	r3, r3, r6
 8009eda:	50a3      	str	r3, [r4, r2]
 8009edc:	e7b3      	b.n	8009e46 <_malloc_r+0x22>
 8009ede:	6862      	ldr	r2, [r4, #4]
 8009ee0:	42a3      	cmp	r3, r4
 8009ee2:	bf0c      	ite	eq
 8009ee4:	6032      	streq	r2, [r6, #0]
 8009ee6:	605a      	strne	r2, [r3, #4]
 8009ee8:	e7ec      	b.n	8009ec4 <_malloc_r+0xa0>
 8009eea:	4623      	mov	r3, r4
 8009eec:	6864      	ldr	r4, [r4, #4]
 8009eee:	e7b2      	b.n	8009e56 <_malloc_r+0x32>
 8009ef0:	4634      	mov	r4, r6
 8009ef2:	6876      	ldr	r6, [r6, #4]
 8009ef4:	e7b9      	b.n	8009e6a <_malloc_r+0x46>
 8009ef6:	230c      	movs	r3, #12
 8009ef8:	603b      	str	r3, [r7, #0]
 8009efa:	4638      	mov	r0, r7
 8009efc:	f000 f9ee 	bl	800a2dc <__malloc_unlock>
 8009f00:	e7a1      	b.n	8009e46 <_malloc_r+0x22>
 8009f02:	6025      	str	r5, [r4, #0]
 8009f04:	e7de      	b.n	8009ec4 <_malloc_r+0xa0>
 8009f06:	bf00      	nop
 8009f08:	20000c08 	.word	0x20000c08

08009f0c <__ssputs_r>:
 8009f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f10:	688e      	ldr	r6, [r1, #8]
 8009f12:	429e      	cmp	r6, r3
 8009f14:	4682      	mov	sl, r0
 8009f16:	460c      	mov	r4, r1
 8009f18:	4690      	mov	r8, r2
 8009f1a:	461f      	mov	r7, r3
 8009f1c:	d838      	bhi.n	8009f90 <__ssputs_r+0x84>
 8009f1e:	898a      	ldrh	r2, [r1, #12]
 8009f20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f24:	d032      	beq.n	8009f8c <__ssputs_r+0x80>
 8009f26:	6825      	ldr	r5, [r4, #0]
 8009f28:	6909      	ldr	r1, [r1, #16]
 8009f2a:	eba5 0901 	sub.w	r9, r5, r1
 8009f2e:	6965      	ldr	r5, [r4, #20]
 8009f30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f38:	3301      	adds	r3, #1
 8009f3a:	444b      	add	r3, r9
 8009f3c:	106d      	asrs	r5, r5, #1
 8009f3e:	429d      	cmp	r5, r3
 8009f40:	bf38      	it	cc
 8009f42:	461d      	movcc	r5, r3
 8009f44:	0553      	lsls	r3, r2, #21
 8009f46:	d531      	bpl.n	8009fac <__ssputs_r+0xa0>
 8009f48:	4629      	mov	r1, r5
 8009f4a:	f7ff ff6b 	bl	8009e24 <_malloc_r>
 8009f4e:	4606      	mov	r6, r0
 8009f50:	b950      	cbnz	r0, 8009f68 <__ssputs_r+0x5c>
 8009f52:	230c      	movs	r3, #12
 8009f54:	f8ca 3000 	str.w	r3, [sl]
 8009f58:	89a3      	ldrh	r3, [r4, #12]
 8009f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f5e:	81a3      	strh	r3, [r4, #12]
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295
 8009f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f68:	6921      	ldr	r1, [r4, #16]
 8009f6a:	464a      	mov	r2, r9
 8009f6c:	f7ff fa08 	bl	8009380 <memcpy>
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f7a:	81a3      	strh	r3, [r4, #12]
 8009f7c:	6126      	str	r6, [r4, #16]
 8009f7e:	6165      	str	r5, [r4, #20]
 8009f80:	444e      	add	r6, r9
 8009f82:	eba5 0509 	sub.w	r5, r5, r9
 8009f86:	6026      	str	r6, [r4, #0]
 8009f88:	60a5      	str	r5, [r4, #8]
 8009f8a:	463e      	mov	r6, r7
 8009f8c:	42be      	cmp	r6, r7
 8009f8e:	d900      	bls.n	8009f92 <__ssputs_r+0x86>
 8009f90:	463e      	mov	r6, r7
 8009f92:	6820      	ldr	r0, [r4, #0]
 8009f94:	4632      	mov	r2, r6
 8009f96:	4641      	mov	r1, r8
 8009f98:	f000 f980 	bl	800a29c <memmove>
 8009f9c:	68a3      	ldr	r3, [r4, #8]
 8009f9e:	1b9b      	subs	r3, r3, r6
 8009fa0:	60a3      	str	r3, [r4, #8]
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	4433      	add	r3, r6
 8009fa6:	6023      	str	r3, [r4, #0]
 8009fa8:	2000      	movs	r0, #0
 8009faa:	e7db      	b.n	8009f64 <__ssputs_r+0x58>
 8009fac:	462a      	mov	r2, r5
 8009fae:	f000 f99b 	bl	800a2e8 <_realloc_r>
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d1e1      	bne.n	8009f7c <__ssputs_r+0x70>
 8009fb8:	6921      	ldr	r1, [r4, #16]
 8009fba:	4650      	mov	r0, sl
 8009fbc:	f7ff fec6 	bl	8009d4c <_free_r>
 8009fc0:	e7c7      	b.n	8009f52 <__ssputs_r+0x46>
	...

08009fc4 <_svfiprintf_r>:
 8009fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc8:	4698      	mov	r8, r3
 8009fca:	898b      	ldrh	r3, [r1, #12]
 8009fcc:	061b      	lsls	r3, r3, #24
 8009fce:	b09d      	sub	sp, #116	; 0x74
 8009fd0:	4607      	mov	r7, r0
 8009fd2:	460d      	mov	r5, r1
 8009fd4:	4614      	mov	r4, r2
 8009fd6:	d50e      	bpl.n	8009ff6 <_svfiprintf_r+0x32>
 8009fd8:	690b      	ldr	r3, [r1, #16]
 8009fda:	b963      	cbnz	r3, 8009ff6 <_svfiprintf_r+0x32>
 8009fdc:	2140      	movs	r1, #64	; 0x40
 8009fde:	f7ff ff21 	bl	8009e24 <_malloc_r>
 8009fe2:	6028      	str	r0, [r5, #0]
 8009fe4:	6128      	str	r0, [r5, #16]
 8009fe6:	b920      	cbnz	r0, 8009ff2 <_svfiprintf_r+0x2e>
 8009fe8:	230c      	movs	r3, #12
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff0:	e0d1      	b.n	800a196 <_svfiprintf_r+0x1d2>
 8009ff2:	2340      	movs	r3, #64	; 0x40
 8009ff4:	616b      	str	r3, [r5, #20]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8009ffa:	2320      	movs	r3, #32
 8009ffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a000:	f8cd 800c 	str.w	r8, [sp, #12]
 800a004:	2330      	movs	r3, #48	; 0x30
 800a006:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a1b0 <_svfiprintf_r+0x1ec>
 800a00a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a00e:	f04f 0901 	mov.w	r9, #1
 800a012:	4623      	mov	r3, r4
 800a014:	469a      	mov	sl, r3
 800a016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a01a:	b10a      	cbz	r2, 800a020 <_svfiprintf_r+0x5c>
 800a01c:	2a25      	cmp	r2, #37	; 0x25
 800a01e:	d1f9      	bne.n	800a014 <_svfiprintf_r+0x50>
 800a020:	ebba 0b04 	subs.w	fp, sl, r4
 800a024:	d00b      	beq.n	800a03e <_svfiprintf_r+0x7a>
 800a026:	465b      	mov	r3, fp
 800a028:	4622      	mov	r2, r4
 800a02a:	4629      	mov	r1, r5
 800a02c:	4638      	mov	r0, r7
 800a02e:	f7ff ff6d 	bl	8009f0c <__ssputs_r>
 800a032:	3001      	adds	r0, #1
 800a034:	f000 80aa 	beq.w	800a18c <_svfiprintf_r+0x1c8>
 800a038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a03a:	445a      	add	r2, fp
 800a03c:	9209      	str	r2, [sp, #36]	; 0x24
 800a03e:	f89a 3000 	ldrb.w	r3, [sl]
 800a042:	2b00      	cmp	r3, #0
 800a044:	f000 80a2 	beq.w	800a18c <_svfiprintf_r+0x1c8>
 800a048:	2300      	movs	r3, #0
 800a04a:	f04f 32ff 	mov.w	r2, #4294967295
 800a04e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a052:	f10a 0a01 	add.w	sl, sl, #1
 800a056:	9304      	str	r3, [sp, #16]
 800a058:	9307      	str	r3, [sp, #28]
 800a05a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a05e:	931a      	str	r3, [sp, #104]	; 0x68
 800a060:	4654      	mov	r4, sl
 800a062:	2205      	movs	r2, #5
 800a064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a068:	4851      	ldr	r0, [pc, #324]	; (800a1b0 <_svfiprintf_r+0x1ec>)
 800a06a:	f7f6 f8c9 	bl	8000200 <memchr>
 800a06e:	9a04      	ldr	r2, [sp, #16]
 800a070:	b9d8      	cbnz	r0, 800a0aa <_svfiprintf_r+0xe6>
 800a072:	06d0      	lsls	r0, r2, #27
 800a074:	bf44      	itt	mi
 800a076:	2320      	movmi	r3, #32
 800a078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a07c:	0711      	lsls	r1, r2, #28
 800a07e:	bf44      	itt	mi
 800a080:	232b      	movmi	r3, #43	; 0x2b
 800a082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a086:	f89a 3000 	ldrb.w	r3, [sl]
 800a08a:	2b2a      	cmp	r3, #42	; 0x2a
 800a08c:	d015      	beq.n	800a0ba <_svfiprintf_r+0xf6>
 800a08e:	9a07      	ldr	r2, [sp, #28]
 800a090:	4654      	mov	r4, sl
 800a092:	2000      	movs	r0, #0
 800a094:	f04f 0c0a 	mov.w	ip, #10
 800a098:	4621      	mov	r1, r4
 800a09a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a09e:	3b30      	subs	r3, #48	; 0x30
 800a0a0:	2b09      	cmp	r3, #9
 800a0a2:	d94e      	bls.n	800a142 <_svfiprintf_r+0x17e>
 800a0a4:	b1b0      	cbz	r0, 800a0d4 <_svfiprintf_r+0x110>
 800a0a6:	9207      	str	r2, [sp, #28]
 800a0a8:	e014      	b.n	800a0d4 <_svfiprintf_r+0x110>
 800a0aa:	eba0 0308 	sub.w	r3, r0, r8
 800a0ae:	fa09 f303 	lsl.w	r3, r9, r3
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	9304      	str	r3, [sp, #16]
 800a0b6:	46a2      	mov	sl, r4
 800a0b8:	e7d2      	b.n	800a060 <_svfiprintf_r+0x9c>
 800a0ba:	9b03      	ldr	r3, [sp, #12]
 800a0bc:	1d19      	adds	r1, r3, #4
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	9103      	str	r1, [sp, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	bfbb      	ittet	lt
 800a0c6:	425b      	neglt	r3, r3
 800a0c8:	f042 0202 	orrlt.w	r2, r2, #2
 800a0cc:	9307      	strge	r3, [sp, #28]
 800a0ce:	9307      	strlt	r3, [sp, #28]
 800a0d0:	bfb8      	it	lt
 800a0d2:	9204      	strlt	r2, [sp, #16]
 800a0d4:	7823      	ldrb	r3, [r4, #0]
 800a0d6:	2b2e      	cmp	r3, #46	; 0x2e
 800a0d8:	d10c      	bne.n	800a0f4 <_svfiprintf_r+0x130>
 800a0da:	7863      	ldrb	r3, [r4, #1]
 800a0dc:	2b2a      	cmp	r3, #42	; 0x2a
 800a0de:	d135      	bne.n	800a14c <_svfiprintf_r+0x188>
 800a0e0:	9b03      	ldr	r3, [sp, #12]
 800a0e2:	1d1a      	adds	r2, r3, #4
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	9203      	str	r2, [sp, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	bfb8      	it	lt
 800a0ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0f0:	3402      	adds	r4, #2
 800a0f2:	9305      	str	r3, [sp, #20]
 800a0f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1c0 <_svfiprintf_r+0x1fc>
 800a0f8:	7821      	ldrb	r1, [r4, #0]
 800a0fa:	2203      	movs	r2, #3
 800a0fc:	4650      	mov	r0, sl
 800a0fe:	f7f6 f87f 	bl	8000200 <memchr>
 800a102:	b140      	cbz	r0, 800a116 <_svfiprintf_r+0x152>
 800a104:	2340      	movs	r3, #64	; 0x40
 800a106:	eba0 000a 	sub.w	r0, r0, sl
 800a10a:	fa03 f000 	lsl.w	r0, r3, r0
 800a10e:	9b04      	ldr	r3, [sp, #16]
 800a110:	4303      	orrs	r3, r0
 800a112:	3401      	adds	r4, #1
 800a114:	9304      	str	r3, [sp, #16]
 800a116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a11a:	4826      	ldr	r0, [pc, #152]	; (800a1b4 <_svfiprintf_r+0x1f0>)
 800a11c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a120:	2206      	movs	r2, #6
 800a122:	f7f6 f86d 	bl	8000200 <memchr>
 800a126:	2800      	cmp	r0, #0
 800a128:	d038      	beq.n	800a19c <_svfiprintf_r+0x1d8>
 800a12a:	4b23      	ldr	r3, [pc, #140]	; (800a1b8 <_svfiprintf_r+0x1f4>)
 800a12c:	bb1b      	cbnz	r3, 800a176 <_svfiprintf_r+0x1b2>
 800a12e:	9b03      	ldr	r3, [sp, #12]
 800a130:	3307      	adds	r3, #7
 800a132:	f023 0307 	bic.w	r3, r3, #7
 800a136:	3308      	adds	r3, #8
 800a138:	9303      	str	r3, [sp, #12]
 800a13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a13c:	4433      	add	r3, r6
 800a13e:	9309      	str	r3, [sp, #36]	; 0x24
 800a140:	e767      	b.n	800a012 <_svfiprintf_r+0x4e>
 800a142:	fb0c 3202 	mla	r2, ip, r2, r3
 800a146:	460c      	mov	r4, r1
 800a148:	2001      	movs	r0, #1
 800a14a:	e7a5      	b.n	800a098 <_svfiprintf_r+0xd4>
 800a14c:	2300      	movs	r3, #0
 800a14e:	3401      	adds	r4, #1
 800a150:	9305      	str	r3, [sp, #20]
 800a152:	4619      	mov	r1, r3
 800a154:	f04f 0c0a 	mov.w	ip, #10
 800a158:	4620      	mov	r0, r4
 800a15a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a15e:	3a30      	subs	r2, #48	; 0x30
 800a160:	2a09      	cmp	r2, #9
 800a162:	d903      	bls.n	800a16c <_svfiprintf_r+0x1a8>
 800a164:	2b00      	cmp	r3, #0
 800a166:	d0c5      	beq.n	800a0f4 <_svfiprintf_r+0x130>
 800a168:	9105      	str	r1, [sp, #20]
 800a16a:	e7c3      	b.n	800a0f4 <_svfiprintf_r+0x130>
 800a16c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a170:	4604      	mov	r4, r0
 800a172:	2301      	movs	r3, #1
 800a174:	e7f0      	b.n	800a158 <_svfiprintf_r+0x194>
 800a176:	ab03      	add	r3, sp, #12
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	462a      	mov	r2, r5
 800a17c:	4b0f      	ldr	r3, [pc, #60]	; (800a1bc <_svfiprintf_r+0x1f8>)
 800a17e:	a904      	add	r1, sp, #16
 800a180:	4638      	mov	r0, r7
 800a182:	f7fc fa47 	bl	8006614 <_printf_float>
 800a186:	1c42      	adds	r2, r0, #1
 800a188:	4606      	mov	r6, r0
 800a18a:	d1d6      	bne.n	800a13a <_svfiprintf_r+0x176>
 800a18c:	89ab      	ldrh	r3, [r5, #12]
 800a18e:	065b      	lsls	r3, r3, #25
 800a190:	f53f af2c 	bmi.w	8009fec <_svfiprintf_r+0x28>
 800a194:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a196:	b01d      	add	sp, #116	; 0x74
 800a198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a19c:	ab03      	add	r3, sp, #12
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	462a      	mov	r2, r5
 800a1a2:	4b06      	ldr	r3, [pc, #24]	; (800a1bc <_svfiprintf_r+0x1f8>)
 800a1a4:	a904      	add	r1, sp, #16
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	f7fc fcd8 	bl	8006b5c <_printf_i>
 800a1ac:	e7eb      	b.n	800a186 <_svfiprintf_r+0x1c2>
 800a1ae:	bf00      	nop
 800a1b0:	0800b20c 	.word	0x0800b20c
 800a1b4:	0800b216 	.word	0x0800b216
 800a1b8:	08006615 	.word	0x08006615
 800a1bc:	08009f0d 	.word	0x08009f0d
 800a1c0:	0800b212 	.word	0x0800b212
 800a1c4:	00000000 	.word	0x00000000

0800a1c8 <nan>:
 800a1c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a1d0 <nan+0x8>
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	00000000 	.word	0x00000000
 800a1d4:	7ff80000 	.word	0x7ff80000

0800a1d8 <_sbrk_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	4d06      	ldr	r5, [pc, #24]	; (800a1f4 <_sbrk_r+0x1c>)
 800a1dc:	2300      	movs	r3, #0
 800a1de:	4604      	mov	r4, r0
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	602b      	str	r3, [r5, #0]
 800a1e4:	f7f8 f8e2 	bl	80023ac <_sbrk>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d102      	bne.n	800a1f2 <_sbrk_r+0x1a>
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	b103      	cbz	r3, 800a1f2 <_sbrk_r+0x1a>
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	bd38      	pop	{r3, r4, r5, pc}
 800a1f4:	20000c10 	.word	0x20000c10

0800a1f8 <strncmp>:
 800a1f8:	b510      	push	{r4, lr}
 800a1fa:	b17a      	cbz	r2, 800a21c <strncmp+0x24>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	3901      	subs	r1, #1
 800a200:	1884      	adds	r4, r0, r2
 800a202:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a206:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a20a:	4290      	cmp	r0, r2
 800a20c:	d101      	bne.n	800a212 <strncmp+0x1a>
 800a20e:	42a3      	cmp	r3, r4
 800a210:	d101      	bne.n	800a216 <strncmp+0x1e>
 800a212:	1a80      	subs	r0, r0, r2
 800a214:	bd10      	pop	{r4, pc}
 800a216:	2800      	cmp	r0, #0
 800a218:	d1f3      	bne.n	800a202 <strncmp+0xa>
 800a21a:	e7fa      	b.n	800a212 <strncmp+0x1a>
 800a21c:	4610      	mov	r0, r2
 800a21e:	e7f9      	b.n	800a214 <strncmp+0x1c>

0800a220 <__ascii_wctomb>:
 800a220:	b149      	cbz	r1, 800a236 <__ascii_wctomb+0x16>
 800a222:	2aff      	cmp	r2, #255	; 0xff
 800a224:	bf85      	ittet	hi
 800a226:	238a      	movhi	r3, #138	; 0x8a
 800a228:	6003      	strhi	r3, [r0, #0]
 800a22a:	700a      	strbls	r2, [r1, #0]
 800a22c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a230:	bf98      	it	ls
 800a232:	2001      	movls	r0, #1
 800a234:	4770      	bx	lr
 800a236:	4608      	mov	r0, r1
 800a238:	4770      	bx	lr
	...

0800a23c <__assert_func>:
 800a23c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a23e:	4614      	mov	r4, r2
 800a240:	461a      	mov	r2, r3
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <__assert_func+0x2c>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4605      	mov	r5, r0
 800a248:	68d8      	ldr	r0, [r3, #12]
 800a24a:	b14c      	cbz	r4, 800a260 <__assert_func+0x24>
 800a24c:	4b07      	ldr	r3, [pc, #28]	; (800a26c <__assert_func+0x30>)
 800a24e:	9100      	str	r1, [sp, #0]
 800a250:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a254:	4906      	ldr	r1, [pc, #24]	; (800a270 <__assert_func+0x34>)
 800a256:	462b      	mov	r3, r5
 800a258:	f000 f80e 	bl	800a278 <fiprintf>
 800a25c:	f000 fa8c 	bl	800a778 <abort>
 800a260:	4b04      	ldr	r3, [pc, #16]	; (800a274 <__assert_func+0x38>)
 800a262:	461c      	mov	r4, r3
 800a264:	e7f3      	b.n	800a24e <__assert_func+0x12>
 800a266:	bf00      	nop
 800a268:	20000020 	.word	0x20000020
 800a26c:	0800b21d 	.word	0x0800b21d
 800a270:	0800b22a 	.word	0x0800b22a
 800a274:	0800b258 	.word	0x0800b258

0800a278 <fiprintf>:
 800a278:	b40e      	push	{r1, r2, r3}
 800a27a:	b503      	push	{r0, r1, lr}
 800a27c:	4601      	mov	r1, r0
 800a27e:	ab03      	add	r3, sp, #12
 800a280:	4805      	ldr	r0, [pc, #20]	; (800a298 <fiprintf+0x20>)
 800a282:	f853 2b04 	ldr.w	r2, [r3], #4
 800a286:	6800      	ldr	r0, [r0, #0]
 800a288:	9301      	str	r3, [sp, #4]
 800a28a:	f000 f885 	bl	800a398 <_vfiprintf_r>
 800a28e:	b002      	add	sp, #8
 800a290:	f85d eb04 	ldr.w	lr, [sp], #4
 800a294:	b003      	add	sp, #12
 800a296:	4770      	bx	lr
 800a298:	20000020 	.word	0x20000020

0800a29c <memmove>:
 800a29c:	4288      	cmp	r0, r1
 800a29e:	b510      	push	{r4, lr}
 800a2a0:	eb01 0402 	add.w	r4, r1, r2
 800a2a4:	d902      	bls.n	800a2ac <memmove+0x10>
 800a2a6:	4284      	cmp	r4, r0
 800a2a8:	4623      	mov	r3, r4
 800a2aa:	d807      	bhi.n	800a2bc <memmove+0x20>
 800a2ac:	1e43      	subs	r3, r0, #1
 800a2ae:	42a1      	cmp	r1, r4
 800a2b0:	d008      	beq.n	800a2c4 <memmove+0x28>
 800a2b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2ba:	e7f8      	b.n	800a2ae <memmove+0x12>
 800a2bc:	4402      	add	r2, r0
 800a2be:	4601      	mov	r1, r0
 800a2c0:	428a      	cmp	r2, r1
 800a2c2:	d100      	bne.n	800a2c6 <memmove+0x2a>
 800a2c4:	bd10      	pop	{r4, pc}
 800a2c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2ce:	e7f7      	b.n	800a2c0 <memmove+0x24>

0800a2d0 <__malloc_lock>:
 800a2d0:	4801      	ldr	r0, [pc, #4]	; (800a2d8 <__malloc_lock+0x8>)
 800a2d2:	f000 bc11 	b.w	800aaf8 <__retarget_lock_acquire_recursive>
 800a2d6:	bf00      	nop
 800a2d8:	20000c14 	.word	0x20000c14

0800a2dc <__malloc_unlock>:
 800a2dc:	4801      	ldr	r0, [pc, #4]	; (800a2e4 <__malloc_unlock+0x8>)
 800a2de:	f000 bc0c 	b.w	800aafa <__retarget_lock_release_recursive>
 800a2e2:	bf00      	nop
 800a2e4:	20000c14 	.word	0x20000c14

0800a2e8 <_realloc_r>:
 800a2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ec:	4680      	mov	r8, r0
 800a2ee:	4614      	mov	r4, r2
 800a2f0:	460e      	mov	r6, r1
 800a2f2:	b921      	cbnz	r1, 800a2fe <_realloc_r+0x16>
 800a2f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	f7ff bd93 	b.w	8009e24 <_malloc_r>
 800a2fe:	b92a      	cbnz	r2, 800a30c <_realloc_r+0x24>
 800a300:	f7ff fd24 	bl	8009d4c <_free_r>
 800a304:	4625      	mov	r5, r4
 800a306:	4628      	mov	r0, r5
 800a308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a30c:	f000 fc5c 	bl	800abc8 <_malloc_usable_size_r>
 800a310:	4284      	cmp	r4, r0
 800a312:	4607      	mov	r7, r0
 800a314:	d802      	bhi.n	800a31c <_realloc_r+0x34>
 800a316:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a31a:	d812      	bhi.n	800a342 <_realloc_r+0x5a>
 800a31c:	4621      	mov	r1, r4
 800a31e:	4640      	mov	r0, r8
 800a320:	f7ff fd80 	bl	8009e24 <_malloc_r>
 800a324:	4605      	mov	r5, r0
 800a326:	2800      	cmp	r0, #0
 800a328:	d0ed      	beq.n	800a306 <_realloc_r+0x1e>
 800a32a:	42bc      	cmp	r4, r7
 800a32c:	4622      	mov	r2, r4
 800a32e:	4631      	mov	r1, r6
 800a330:	bf28      	it	cs
 800a332:	463a      	movcs	r2, r7
 800a334:	f7ff f824 	bl	8009380 <memcpy>
 800a338:	4631      	mov	r1, r6
 800a33a:	4640      	mov	r0, r8
 800a33c:	f7ff fd06 	bl	8009d4c <_free_r>
 800a340:	e7e1      	b.n	800a306 <_realloc_r+0x1e>
 800a342:	4635      	mov	r5, r6
 800a344:	e7df      	b.n	800a306 <_realloc_r+0x1e>

0800a346 <__sfputc_r>:
 800a346:	6893      	ldr	r3, [r2, #8]
 800a348:	3b01      	subs	r3, #1
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	b410      	push	{r4}
 800a34e:	6093      	str	r3, [r2, #8]
 800a350:	da08      	bge.n	800a364 <__sfputc_r+0x1e>
 800a352:	6994      	ldr	r4, [r2, #24]
 800a354:	42a3      	cmp	r3, r4
 800a356:	db01      	blt.n	800a35c <__sfputc_r+0x16>
 800a358:	290a      	cmp	r1, #10
 800a35a:	d103      	bne.n	800a364 <__sfputc_r+0x1e>
 800a35c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a360:	f000 b94a 	b.w	800a5f8 <__swbuf_r>
 800a364:	6813      	ldr	r3, [r2, #0]
 800a366:	1c58      	adds	r0, r3, #1
 800a368:	6010      	str	r0, [r2, #0]
 800a36a:	7019      	strb	r1, [r3, #0]
 800a36c:	4608      	mov	r0, r1
 800a36e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <__sfputs_r>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	4606      	mov	r6, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	4614      	mov	r4, r2
 800a37c:	18d5      	adds	r5, r2, r3
 800a37e:	42ac      	cmp	r4, r5
 800a380:	d101      	bne.n	800a386 <__sfputs_r+0x12>
 800a382:	2000      	movs	r0, #0
 800a384:	e007      	b.n	800a396 <__sfputs_r+0x22>
 800a386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a38a:	463a      	mov	r2, r7
 800a38c:	4630      	mov	r0, r6
 800a38e:	f7ff ffda 	bl	800a346 <__sfputc_r>
 800a392:	1c43      	adds	r3, r0, #1
 800a394:	d1f3      	bne.n	800a37e <__sfputs_r+0xa>
 800a396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a398 <_vfiprintf_r>:
 800a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	460d      	mov	r5, r1
 800a39e:	b09d      	sub	sp, #116	; 0x74
 800a3a0:	4614      	mov	r4, r2
 800a3a2:	4698      	mov	r8, r3
 800a3a4:	4606      	mov	r6, r0
 800a3a6:	b118      	cbz	r0, 800a3b0 <_vfiprintf_r+0x18>
 800a3a8:	6983      	ldr	r3, [r0, #24]
 800a3aa:	b90b      	cbnz	r3, 800a3b0 <_vfiprintf_r+0x18>
 800a3ac:	f000 fb06 	bl	800a9bc <__sinit>
 800a3b0:	4b89      	ldr	r3, [pc, #548]	; (800a5d8 <_vfiprintf_r+0x240>)
 800a3b2:	429d      	cmp	r5, r3
 800a3b4:	d11b      	bne.n	800a3ee <_vfiprintf_r+0x56>
 800a3b6:	6875      	ldr	r5, [r6, #4]
 800a3b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3ba:	07d9      	lsls	r1, r3, #31
 800a3bc:	d405      	bmi.n	800a3ca <_vfiprintf_r+0x32>
 800a3be:	89ab      	ldrh	r3, [r5, #12]
 800a3c0:	059a      	lsls	r2, r3, #22
 800a3c2:	d402      	bmi.n	800a3ca <_vfiprintf_r+0x32>
 800a3c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3c6:	f000 fb97 	bl	800aaf8 <__retarget_lock_acquire_recursive>
 800a3ca:	89ab      	ldrh	r3, [r5, #12]
 800a3cc:	071b      	lsls	r3, r3, #28
 800a3ce:	d501      	bpl.n	800a3d4 <_vfiprintf_r+0x3c>
 800a3d0:	692b      	ldr	r3, [r5, #16]
 800a3d2:	b9eb      	cbnz	r3, 800a410 <_vfiprintf_r+0x78>
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f000 f960 	bl	800a69c <__swsetup_r>
 800a3dc:	b1c0      	cbz	r0, 800a410 <_vfiprintf_r+0x78>
 800a3de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3e0:	07dc      	lsls	r4, r3, #31
 800a3e2:	d50e      	bpl.n	800a402 <_vfiprintf_r+0x6a>
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e8:	b01d      	add	sp, #116	; 0x74
 800a3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ee:	4b7b      	ldr	r3, [pc, #492]	; (800a5dc <_vfiprintf_r+0x244>)
 800a3f0:	429d      	cmp	r5, r3
 800a3f2:	d101      	bne.n	800a3f8 <_vfiprintf_r+0x60>
 800a3f4:	68b5      	ldr	r5, [r6, #8]
 800a3f6:	e7df      	b.n	800a3b8 <_vfiprintf_r+0x20>
 800a3f8:	4b79      	ldr	r3, [pc, #484]	; (800a5e0 <_vfiprintf_r+0x248>)
 800a3fa:	429d      	cmp	r5, r3
 800a3fc:	bf08      	it	eq
 800a3fe:	68f5      	ldreq	r5, [r6, #12]
 800a400:	e7da      	b.n	800a3b8 <_vfiprintf_r+0x20>
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	0598      	lsls	r0, r3, #22
 800a406:	d4ed      	bmi.n	800a3e4 <_vfiprintf_r+0x4c>
 800a408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a40a:	f000 fb76 	bl	800aafa <__retarget_lock_release_recursive>
 800a40e:	e7e9      	b.n	800a3e4 <_vfiprintf_r+0x4c>
 800a410:	2300      	movs	r3, #0
 800a412:	9309      	str	r3, [sp, #36]	; 0x24
 800a414:	2320      	movs	r3, #32
 800a416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a41a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a41e:	2330      	movs	r3, #48	; 0x30
 800a420:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a5e4 <_vfiprintf_r+0x24c>
 800a424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a428:	f04f 0901 	mov.w	r9, #1
 800a42c:	4623      	mov	r3, r4
 800a42e:	469a      	mov	sl, r3
 800a430:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a434:	b10a      	cbz	r2, 800a43a <_vfiprintf_r+0xa2>
 800a436:	2a25      	cmp	r2, #37	; 0x25
 800a438:	d1f9      	bne.n	800a42e <_vfiprintf_r+0x96>
 800a43a:	ebba 0b04 	subs.w	fp, sl, r4
 800a43e:	d00b      	beq.n	800a458 <_vfiprintf_r+0xc0>
 800a440:	465b      	mov	r3, fp
 800a442:	4622      	mov	r2, r4
 800a444:	4629      	mov	r1, r5
 800a446:	4630      	mov	r0, r6
 800a448:	f7ff ff94 	bl	800a374 <__sfputs_r>
 800a44c:	3001      	adds	r0, #1
 800a44e:	f000 80aa 	beq.w	800a5a6 <_vfiprintf_r+0x20e>
 800a452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a454:	445a      	add	r2, fp
 800a456:	9209      	str	r2, [sp, #36]	; 0x24
 800a458:	f89a 3000 	ldrb.w	r3, [sl]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f000 80a2 	beq.w	800a5a6 <_vfiprintf_r+0x20e>
 800a462:	2300      	movs	r3, #0
 800a464:	f04f 32ff 	mov.w	r2, #4294967295
 800a468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a46c:	f10a 0a01 	add.w	sl, sl, #1
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	9307      	str	r3, [sp, #28]
 800a474:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a478:	931a      	str	r3, [sp, #104]	; 0x68
 800a47a:	4654      	mov	r4, sl
 800a47c:	2205      	movs	r2, #5
 800a47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a482:	4858      	ldr	r0, [pc, #352]	; (800a5e4 <_vfiprintf_r+0x24c>)
 800a484:	f7f5 febc 	bl	8000200 <memchr>
 800a488:	9a04      	ldr	r2, [sp, #16]
 800a48a:	b9d8      	cbnz	r0, 800a4c4 <_vfiprintf_r+0x12c>
 800a48c:	06d1      	lsls	r1, r2, #27
 800a48e:	bf44      	itt	mi
 800a490:	2320      	movmi	r3, #32
 800a492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a496:	0713      	lsls	r3, r2, #28
 800a498:	bf44      	itt	mi
 800a49a:	232b      	movmi	r3, #43	; 0x2b
 800a49c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a4a6:	d015      	beq.n	800a4d4 <_vfiprintf_r+0x13c>
 800a4a8:	9a07      	ldr	r2, [sp, #28]
 800a4aa:	4654      	mov	r4, sl
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	f04f 0c0a 	mov.w	ip, #10
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4b8:	3b30      	subs	r3, #48	; 0x30
 800a4ba:	2b09      	cmp	r3, #9
 800a4bc:	d94e      	bls.n	800a55c <_vfiprintf_r+0x1c4>
 800a4be:	b1b0      	cbz	r0, 800a4ee <_vfiprintf_r+0x156>
 800a4c0:	9207      	str	r2, [sp, #28]
 800a4c2:	e014      	b.n	800a4ee <_vfiprintf_r+0x156>
 800a4c4:	eba0 0308 	sub.w	r3, r0, r8
 800a4c8:	fa09 f303 	lsl.w	r3, r9, r3
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	9304      	str	r3, [sp, #16]
 800a4d0:	46a2      	mov	sl, r4
 800a4d2:	e7d2      	b.n	800a47a <_vfiprintf_r+0xe2>
 800a4d4:	9b03      	ldr	r3, [sp, #12]
 800a4d6:	1d19      	adds	r1, r3, #4
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	9103      	str	r1, [sp, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	bfbb      	ittet	lt
 800a4e0:	425b      	neglt	r3, r3
 800a4e2:	f042 0202 	orrlt.w	r2, r2, #2
 800a4e6:	9307      	strge	r3, [sp, #28]
 800a4e8:	9307      	strlt	r3, [sp, #28]
 800a4ea:	bfb8      	it	lt
 800a4ec:	9204      	strlt	r2, [sp, #16]
 800a4ee:	7823      	ldrb	r3, [r4, #0]
 800a4f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a4f2:	d10c      	bne.n	800a50e <_vfiprintf_r+0x176>
 800a4f4:	7863      	ldrb	r3, [r4, #1]
 800a4f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a4f8:	d135      	bne.n	800a566 <_vfiprintf_r+0x1ce>
 800a4fa:	9b03      	ldr	r3, [sp, #12]
 800a4fc:	1d1a      	adds	r2, r3, #4
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	9203      	str	r2, [sp, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	bfb8      	it	lt
 800a506:	f04f 33ff 	movlt.w	r3, #4294967295
 800a50a:	3402      	adds	r4, #2
 800a50c:	9305      	str	r3, [sp, #20]
 800a50e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a5f4 <_vfiprintf_r+0x25c>
 800a512:	7821      	ldrb	r1, [r4, #0]
 800a514:	2203      	movs	r2, #3
 800a516:	4650      	mov	r0, sl
 800a518:	f7f5 fe72 	bl	8000200 <memchr>
 800a51c:	b140      	cbz	r0, 800a530 <_vfiprintf_r+0x198>
 800a51e:	2340      	movs	r3, #64	; 0x40
 800a520:	eba0 000a 	sub.w	r0, r0, sl
 800a524:	fa03 f000 	lsl.w	r0, r3, r0
 800a528:	9b04      	ldr	r3, [sp, #16]
 800a52a:	4303      	orrs	r3, r0
 800a52c:	3401      	adds	r4, #1
 800a52e:	9304      	str	r3, [sp, #16]
 800a530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a534:	482c      	ldr	r0, [pc, #176]	; (800a5e8 <_vfiprintf_r+0x250>)
 800a536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a53a:	2206      	movs	r2, #6
 800a53c:	f7f5 fe60 	bl	8000200 <memchr>
 800a540:	2800      	cmp	r0, #0
 800a542:	d03f      	beq.n	800a5c4 <_vfiprintf_r+0x22c>
 800a544:	4b29      	ldr	r3, [pc, #164]	; (800a5ec <_vfiprintf_r+0x254>)
 800a546:	bb1b      	cbnz	r3, 800a590 <_vfiprintf_r+0x1f8>
 800a548:	9b03      	ldr	r3, [sp, #12]
 800a54a:	3307      	adds	r3, #7
 800a54c:	f023 0307 	bic.w	r3, r3, #7
 800a550:	3308      	adds	r3, #8
 800a552:	9303      	str	r3, [sp, #12]
 800a554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a556:	443b      	add	r3, r7
 800a558:	9309      	str	r3, [sp, #36]	; 0x24
 800a55a:	e767      	b.n	800a42c <_vfiprintf_r+0x94>
 800a55c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a560:	460c      	mov	r4, r1
 800a562:	2001      	movs	r0, #1
 800a564:	e7a5      	b.n	800a4b2 <_vfiprintf_r+0x11a>
 800a566:	2300      	movs	r3, #0
 800a568:	3401      	adds	r4, #1
 800a56a:	9305      	str	r3, [sp, #20]
 800a56c:	4619      	mov	r1, r3
 800a56e:	f04f 0c0a 	mov.w	ip, #10
 800a572:	4620      	mov	r0, r4
 800a574:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a578:	3a30      	subs	r2, #48	; 0x30
 800a57a:	2a09      	cmp	r2, #9
 800a57c:	d903      	bls.n	800a586 <_vfiprintf_r+0x1ee>
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0c5      	beq.n	800a50e <_vfiprintf_r+0x176>
 800a582:	9105      	str	r1, [sp, #20]
 800a584:	e7c3      	b.n	800a50e <_vfiprintf_r+0x176>
 800a586:	fb0c 2101 	mla	r1, ip, r1, r2
 800a58a:	4604      	mov	r4, r0
 800a58c:	2301      	movs	r3, #1
 800a58e:	e7f0      	b.n	800a572 <_vfiprintf_r+0x1da>
 800a590:	ab03      	add	r3, sp, #12
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	462a      	mov	r2, r5
 800a596:	4b16      	ldr	r3, [pc, #88]	; (800a5f0 <_vfiprintf_r+0x258>)
 800a598:	a904      	add	r1, sp, #16
 800a59a:	4630      	mov	r0, r6
 800a59c:	f7fc f83a 	bl	8006614 <_printf_float>
 800a5a0:	4607      	mov	r7, r0
 800a5a2:	1c78      	adds	r0, r7, #1
 800a5a4:	d1d6      	bne.n	800a554 <_vfiprintf_r+0x1bc>
 800a5a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5a8:	07d9      	lsls	r1, r3, #31
 800a5aa:	d405      	bmi.n	800a5b8 <_vfiprintf_r+0x220>
 800a5ac:	89ab      	ldrh	r3, [r5, #12]
 800a5ae:	059a      	lsls	r2, r3, #22
 800a5b0:	d402      	bmi.n	800a5b8 <_vfiprintf_r+0x220>
 800a5b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5b4:	f000 faa1 	bl	800aafa <__retarget_lock_release_recursive>
 800a5b8:	89ab      	ldrh	r3, [r5, #12]
 800a5ba:	065b      	lsls	r3, r3, #25
 800a5bc:	f53f af12 	bmi.w	800a3e4 <_vfiprintf_r+0x4c>
 800a5c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5c2:	e711      	b.n	800a3e8 <_vfiprintf_r+0x50>
 800a5c4:	ab03      	add	r3, sp, #12
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	462a      	mov	r2, r5
 800a5ca:	4b09      	ldr	r3, [pc, #36]	; (800a5f0 <_vfiprintf_r+0x258>)
 800a5cc:	a904      	add	r1, sp, #16
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	f7fc fac4 	bl	8006b5c <_printf_i>
 800a5d4:	e7e4      	b.n	800a5a0 <_vfiprintf_r+0x208>
 800a5d6:	bf00      	nop
 800a5d8:	0800b27c 	.word	0x0800b27c
 800a5dc:	0800b29c 	.word	0x0800b29c
 800a5e0:	0800b25c 	.word	0x0800b25c
 800a5e4:	0800b20c 	.word	0x0800b20c
 800a5e8:	0800b216 	.word	0x0800b216
 800a5ec:	08006615 	.word	0x08006615
 800a5f0:	0800a375 	.word	0x0800a375
 800a5f4:	0800b212 	.word	0x0800b212

0800a5f8 <__swbuf_r>:
 800a5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fa:	460e      	mov	r6, r1
 800a5fc:	4614      	mov	r4, r2
 800a5fe:	4605      	mov	r5, r0
 800a600:	b118      	cbz	r0, 800a60a <__swbuf_r+0x12>
 800a602:	6983      	ldr	r3, [r0, #24]
 800a604:	b90b      	cbnz	r3, 800a60a <__swbuf_r+0x12>
 800a606:	f000 f9d9 	bl	800a9bc <__sinit>
 800a60a:	4b21      	ldr	r3, [pc, #132]	; (800a690 <__swbuf_r+0x98>)
 800a60c:	429c      	cmp	r4, r3
 800a60e:	d12b      	bne.n	800a668 <__swbuf_r+0x70>
 800a610:	686c      	ldr	r4, [r5, #4]
 800a612:	69a3      	ldr	r3, [r4, #24]
 800a614:	60a3      	str	r3, [r4, #8]
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	071a      	lsls	r2, r3, #28
 800a61a:	d52f      	bpl.n	800a67c <__swbuf_r+0x84>
 800a61c:	6923      	ldr	r3, [r4, #16]
 800a61e:	b36b      	cbz	r3, 800a67c <__swbuf_r+0x84>
 800a620:	6923      	ldr	r3, [r4, #16]
 800a622:	6820      	ldr	r0, [r4, #0]
 800a624:	1ac0      	subs	r0, r0, r3
 800a626:	6963      	ldr	r3, [r4, #20]
 800a628:	b2f6      	uxtb	r6, r6
 800a62a:	4283      	cmp	r3, r0
 800a62c:	4637      	mov	r7, r6
 800a62e:	dc04      	bgt.n	800a63a <__swbuf_r+0x42>
 800a630:	4621      	mov	r1, r4
 800a632:	4628      	mov	r0, r5
 800a634:	f000 f92e 	bl	800a894 <_fflush_r>
 800a638:	bb30      	cbnz	r0, 800a688 <__swbuf_r+0x90>
 800a63a:	68a3      	ldr	r3, [r4, #8]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	60a3      	str	r3, [r4, #8]
 800a640:	6823      	ldr	r3, [r4, #0]
 800a642:	1c5a      	adds	r2, r3, #1
 800a644:	6022      	str	r2, [r4, #0]
 800a646:	701e      	strb	r6, [r3, #0]
 800a648:	6963      	ldr	r3, [r4, #20]
 800a64a:	3001      	adds	r0, #1
 800a64c:	4283      	cmp	r3, r0
 800a64e:	d004      	beq.n	800a65a <__swbuf_r+0x62>
 800a650:	89a3      	ldrh	r3, [r4, #12]
 800a652:	07db      	lsls	r3, r3, #31
 800a654:	d506      	bpl.n	800a664 <__swbuf_r+0x6c>
 800a656:	2e0a      	cmp	r6, #10
 800a658:	d104      	bne.n	800a664 <__swbuf_r+0x6c>
 800a65a:	4621      	mov	r1, r4
 800a65c:	4628      	mov	r0, r5
 800a65e:	f000 f919 	bl	800a894 <_fflush_r>
 800a662:	b988      	cbnz	r0, 800a688 <__swbuf_r+0x90>
 800a664:	4638      	mov	r0, r7
 800a666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <__swbuf_r+0x9c>)
 800a66a:	429c      	cmp	r4, r3
 800a66c:	d101      	bne.n	800a672 <__swbuf_r+0x7a>
 800a66e:	68ac      	ldr	r4, [r5, #8]
 800a670:	e7cf      	b.n	800a612 <__swbuf_r+0x1a>
 800a672:	4b09      	ldr	r3, [pc, #36]	; (800a698 <__swbuf_r+0xa0>)
 800a674:	429c      	cmp	r4, r3
 800a676:	bf08      	it	eq
 800a678:	68ec      	ldreq	r4, [r5, #12]
 800a67a:	e7ca      	b.n	800a612 <__swbuf_r+0x1a>
 800a67c:	4621      	mov	r1, r4
 800a67e:	4628      	mov	r0, r5
 800a680:	f000 f80c 	bl	800a69c <__swsetup_r>
 800a684:	2800      	cmp	r0, #0
 800a686:	d0cb      	beq.n	800a620 <__swbuf_r+0x28>
 800a688:	f04f 37ff 	mov.w	r7, #4294967295
 800a68c:	e7ea      	b.n	800a664 <__swbuf_r+0x6c>
 800a68e:	bf00      	nop
 800a690:	0800b27c 	.word	0x0800b27c
 800a694:	0800b29c 	.word	0x0800b29c
 800a698:	0800b25c 	.word	0x0800b25c

0800a69c <__swsetup_r>:
 800a69c:	4b32      	ldr	r3, [pc, #200]	; (800a768 <__swsetup_r+0xcc>)
 800a69e:	b570      	push	{r4, r5, r6, lr}
 800a6a0:	681d      	ldr	r5, [r3, #0]
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	b125      	cbz	r5, 800a6b2 <__swsetup_r+0x16>
 800a6a8:	69ab      	ldr	r3, [r5, #24]
 800a6aa:	b913      	cbnz	r3, 800a6b2 <__swsetup_r+0x16>
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f000 f985 	bl	800a9bc <__sinit>
 800a6b2:	4b2e      	ldr	r3, [pc, #184]	; (800a76c <__swsetup_r+0xd0>)
 800a6b4:	429c      	cmp	r4, r3
 800a6b6:	d10f      	bne.n	800a6d8 <__swsetup_r+0x3c>
 800a6b8:	686c      	ldr	r4, [r5, #4]
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6c0:	0719      	lsls	r1, r3, #28
 800a6c2:	d42c      	bmi.n	800a71e <__swsetup_r+0x82>
 800a6c4:	06dd      	lsls	r5, r3, #27
 800a6c6:	d411      	bmi.n	800a6ec <__swsetup_r+0x50>
 800a6c8:	2309      	movs	r3, #9
 800a6ca:	6033      	str	r3, [r6, #0]
 800a6cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6d0:	81a3      	strh	r3, [r4, #12]
 800a6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d6:	e03e      	b.n	800a756 <__swsetup_r+0xba>
 800a6d8:	4b25      	ldr	r3, [pc, #148]	; (800a770 <__swsetup_r+0xd4>)
 800a6da:	429c      	cmp	r4, r3
 800a6dc:	d101      	bne.n	800a6e2 <__swsetup_r+0x46>
 800a6de:	68ac      	ldr	r4, [r5, #8]
 800a6e0:	e7eb      	b.n	800a6ba <__swsetup_r+0x1e>
 800a6e2:	4b24      	ldr	r3, [pc, #144]	; (800a774 <__swsetup_r+0xd8>)
 800a6e4:	429c      	cmp	r4, r3
 800a6e6:	bf08      	it	eq
 800a6e8:	68ec      	ldreq	r4, [r5, #12]
 800a6ea:	e7e6      	b.n	800a6ba <__swsetup_r+0x1e>
 800a6ec:	0758      	lsls	r0, r3, #29
 800a6ee:	d512      	bpl.n	800a716 <__swsetup_r+0x7a>
 800a6f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6f2:	b141      	cbz	r1, 800a706 <__swsetup_r+0x6a>
 800a6f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6f8:	4299      	cmp	r1, r3
 800a6fa:	d002      	beq.n	800a702 <__swsetup_r+0x66>
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f7ff fb25 	bl	8009d4c <_free_r>
 800a702:	2300      	movs	r3, #0
 800a704:	6363      	str	r3, [r4, #52]	; 0x34
 800a706:	89a3      	ldrh	r3, [r4, #12]
 800a708:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a70c:	81a3      	strh	r3, [r4, #12]
 800a70e:	2300      	movs	r3, #0
 800a710:	6063      	str	r3, [r4, #4]
 800a712:	6923      	ldr	r3, [r4, #16]
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	89a3      	ldrh	r3, [r4, #12]
 800a718:	f043 0308 	orr.w	r3, r3, #8
 800a71c:	81a3      	strh	r3, [r4, #12]
 800a71e:	6923      	ldr	r3, [r4, #16]
 800a720:	b94b      	cbnz	r3, 800a736 <__swsetup_r+0x9a>
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a72c:	d003      	beq.n	800a736 <__swsetup_r+0x9a>
 800a72e:	4621      	mov	r1, r4
 800a730:	4630      	mov	r0, r6
 800a732:	f000 fa09 	bl	800ab48 <__smakebuf_r>
 800a736:	89a0      	ldrh	r0, [r4, #12]
 800a738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a73c:	f010 0301 	ands.w	r3, r0, #1
 800a740:	d00a      	beq.n	800a758 <__swsetup_r+0xbc>
 800a742:	2300      	movs	r3, #0
 800a744:	60a3      	str	r3, [r4, #8]
 800a746:	6963      	ldr	r3, [r4, #20]
 800a748:	425b      	negs	r3, r3
 800a74a:	61a3      	str	r3, [r4, #24]
 800a74c:	6923      	ldr	r3, [r4, #16]
 800a74e:	b943      	cbnz	r3, 800a762 <__swsetup_r+0xc6>
 800a750:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a754:	d1ba      	bne.n	800a6cc <__swsetup_r+0x30>
 800a756:	bd70      	pop	{r4, r5, r6, pc}
 800a758:	0781      	lsls	r1, r0, #30
 800a75a:	bf58      	it	pl
 800a75c:	6963      	ldrpl	r3, [r4, #20]
 800a75e:	60a3      	str	r3, [r4, #8]
 800a760:	e7f4      	b.n	800a74c <__swsetup_r+0xb0>
 800a762:	2000      	movs	r0, #0
 800a764:	e7f7      	b.n	800a756 <__swsetup_r+0xba>
 800a766:	bf00      	nop
 800a768:	20000020 	.word	0x20000020
 800a76c:	0800b27c 	.word	0x0800b27c
 800a770:	0800b29c 	.word	0x0800b29c
 800a774:	0800b25c 	.word	0x0800b25c

0800a778 <abort>:
 800a778:	b508      	push	{r3, lr}
 800a77a:	2006      	movs	r0, #6
 800a77c:	f000 fa54 	bl	800ac28 <raise>
 800a780:	2001      	movs	r0, #1
 800a782:	f7f7 fd9b 	bl	80022bc <_exit>
	...

0800a788 <__sflush_r>:
 800a788:	898a      	ldrh	r2, [r1, #12]
 800a78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a78e:	4605      	mov	r5, r0
 800a790:	0710      	lsls	r0, r2, #28
 800a792:	460c      	mov	r4, r1
 800a794:	d458      	bmi.n	800a848 <__sflush_r+0xc0>
 800a796:	684b      	ldr	r3, [r1, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	dc05      	bgt.n	800a7a8 <__sflush_r+0x20>
 800a79c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	dc02      	bgt.n	800a7a8 <__sflush_r+0x20>
 800a7a2:	2000      	movs	r0, #0
 800a7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7aa:	2e00      	cmp	r6, #0
 800a7ac:	d0f9      	beq.n	800a7a2 <__sflush_r+0x1a>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7b4:	682f      	ldr	r7, [r5, #0]
 800a7b6:	602b      	str	r3, [r5, #0]
 800a7b8:	d032      	beq.n	800a820 <__sflush_r+0x98>
 800a7ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7bc:	89a3      	ldrh	r3, [r4, #12]
 800a7be:	075a      	lsls	r2, r3, #29
 800a7c0:	d505      	bpl.n	800a7ce <__sflush_r+0x46>
 800a7c2:	6863      	ldr	r3, [r4, #4]
 800a7c4:	1ac0      	subs	r0, r0, r3
 800a7c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7c8:	b10b      	cbz	r3, 800a7ce <__sflush_r+0x46>
 800a7ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7cc:	1ac0      	subs	r0, r0, r3
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7d4:	6a21      	ldr	r1, [r4, #32]
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	47b0      	blx	r6
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	d106      	bne.n	800a7ee <__sflush_r+0x66>
 800a7e0:	6829      	ldr	r1, [r5, #0]
 800a7e2:	291d      	cmp	r1, #29
 800a7e4:	d82c      	bhi.n	800a840 <__sflush_r+0xb8>
 800a7e6:	4a2a      	ldr	r2, [pc, #168]	; (800a890 <__sflush_r+0x108>)
 800a7e8:	40ca      	lsrs	r2, r1
 800a7ea:	07d6      	lsls	r6, r2, #31
 800a7ec:	d528      	bpl.n	800a840 <__sflush_r+0xb8>
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	6062      	str	r2, [r4, #4]
 800a7f2:	04d9      	lsls	r1, r3, #19
 800a7f4:	6922      	ldr	r2, [r4, #16]
 800a7f6:	6022      	str	r2, [r4, #0]
 800a7f8:	d504      	bpl.n	800a804 <__sflush_r+0x7c>
 800a7fa:	1c42      	adds	r2, r0, #1
 800a7fc:	d101      	bne.n	800a802 <__sflush_r+0x7a>
 800a7fe:	682b      	ldr	r3, [r5, #0]
 800a800:	b903      	cbnz	r3, 800a804 <__sflush_r+0x7c>
 800a802:	6560      	str	r0, [r4, #84]	; 0x54
 800a804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a806:	602f      	str	r7, [r5, #0]
 800a808:	2900      	cmp	r1, #0
 800a80a:	d0ca      	beq.n	800a7a2 <__sflush_r+0x1a>
 800a80c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a810:	4299      	cmp	r1, r3
 800a812:	d002      	beq.n	800a81a <__sflush_r+0x92>
 800a814:	4628      	mov	r0, r5
 800a816:	f7ff fa99 	bl	8009d4c <_free_r>
 800a81a:	2000      	movs	r0, #0
 800a81c:	6360      	str	r0, [r4, #52]	; 0x34
 800a81e:	e7c1      	b.n	800a7a4 <__sflush_r+0x1c>
 800a820:	6a21      	ldr	r1, [r4, #32]
 800a822:	2301      	movs	r3, #1
 800a824:	4628      	mov	r0, r5
 800a826:	47b0      	blx	r6
 800a828:	1c41      	adds	r1, r0, #1
 800a82a:	d1c7      	bne.n	800a7bc <__sflush_r+0x34>
 800a82c:	682b      	ldr	r3, [r5, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d0c4      	beq.n	800a7bc <__sflush_r+0x34>
 800a832:	2b1d      	cmp	r3, #29
 800a834:	d001      	beq.n	800a83a <__sflush_r+0xb2>
 800a836:	2b16      	cmp	r3, #22
 800a838:	d101      	bne.n	800a83e <__sflush_r+0xb6>
 800a83a:	602f      	str	r7, [r5, #0]
 800a83c:	e7b1      	b.n	800a7a2 <__sflush_r+0x1a>
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a844:	81a3      	strh	r3, [r4, #12]
 800a846:	e7ad      	b.n	800a7a4 <__sflush_r+0x1c>
 800a848:	690f      	ldr	r7, [r1, #16]
 800a84a:	2f00      	cmp	r7, #0
 800a84c:	d0a9      	beq.n	800a7a2 <__sflush_r+0x1a>
 800a84e:	0793      	lsls	r3, r2, #30
 800a850:	680e      	ldr	r6, [r1, #0]
 800a852:	bf08      	it	eq
 800a854:	694b      	ldreq	r3, [r1, #20]
 800a856:	600f      	str	r7, [r1, #0]
 800a858:	bf18      	it	ne
 800a85a:	2300      	movne	r3, #0
 800a85c:	eba6 0807 	sub.w	r8, r6, r7
 800a860:	608b      	str	r3, [r1, #8]
 800a862:	f1b8 0f00 	cmp.w	r8, #0
 800a866:	dd9c      	ble.n	800a7a2 <__sflush_r+0x1a>
 800a868:	6a21      	ldr	r1, [r4, #32]
 800a86a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a86c:	4643      	mov	r3, r8
 800a86e:	463a      	mov	r2, r7
 800a870:	4628      	mov	r0, r5
 800a872:	47b0      	blx	r6
 800a874:	2800      	cmp	r0, #0
 800a876:	dc06      	bgt.n	800a886 <__sflush_r+0xfe>
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a87e:	81a3      	strh	r3, [r4, #12]
 800a880:	f04f 30ff 	mov.w	r0, #4294967295
 800a884:	e78e      	b.n	800a7a4 <__sflush_r+0x1c>
 800a886:	4407      	add	r7, r0
 800a888:	eba8 0800 	sub.w	r8, r8, r0
 800a88c:	e7e9      	b.n	800a862 <__sflush_r+0xda>
 800a88e:	bf00      	nop
 800a890:	20400001 	.word	0x20400001

0800a894 <_fflush_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	690b      	ldr	r3, [r1, #16]
 800a898:	4605      	mov	r5, r0
 800a89a:	460c      	mov	r4, r1
 800a89c:	b913      	cbnz	r3, 800a8a4 <_fflush_r+0x10>
 800a89e:	2500      	movs	r5, #0
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	b118      	cbz	r0, 800a8ae <_fflush_r+0x1a>
 800a8a6:	6983      	ldr	r3, [r0, #24]
 800a8a8:	b90b      	cbnz	r3, 800a8ae <_fflush_r+0x1a>
 800a8aa:	f000 f887 	bl	800a9bc <__sinit>
 800a8ae:	4b14      	ldr	r3, [pc, #80]	; (800a900 <_fflush_r+0x6c>)
 800a8b0:	429c      	cmp	r4, r3
 800a8b2:	d11b      	bne.n	800a8ec <_fflush_r+0x58>
 800a8b4:	686c      	ldr	r4, [r5, #4]
 800a8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d0ef      	beq.n	800a89e <_fflush_r+0xa>
 800a8be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8c0:	07d0      	lsls	r0, r2, #31
 800a8c2:	d404      	bmi.n	800a8ce <_fflush_r+0x3a>
 800a8c4:	0599      	lsls	r1, r3, #22
 800a8c6:	d402      	bmi.n	800a8ce <_fflush_r+0x3a>
 800a8c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8ca:	f000 f915 	bl	800aaf8 <__retarget_lock_acquire_recursive>
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	f7ff ff59 	bl	800a788 <__sflush_r>
 800a8d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8d8:	07da      	lsls	r2, r3, #31
 800a8da:	4605      	mov	r5, r0
 800a8dc:	d4e0      	bmi.n	800a8a0 <_fflush_r+0xc>
 800a8de:	89a3      	ldrh	r3, [r4, #12]
 800a8e0:	059b      	lsls	r3, r3, #22
 800a8e2:	d4dd      	bmi.n	800a8a0 <_fflush_r+0xc>
 800a8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8e6:	f000 f908 	bl	800aafa <__retarget_lock_release_recursive>
 800a8ea:	e7d9      	b.n	800a8a0 <_fflush_r+0xc>
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <_fflush_r+0x70>)
 800a8ee:	429c      	cmp	r4, r3
 800a8f0:	d101      	bne.n	800a8f6 <_fflush_r+0x62>
 800a8f2:	68ac      	ldr	r4, [r5, #8]
 800a8f4:	e7df      	b.n	800a8b6 <_fflush_r+0x22>
 800a8f6:	4b04      	ldr	r3, [pc, #16]	; (800a908 <_fflush_r+0x74>)
 800a8f8:	429c      	cmp	r4, r3
 800a8fa:	bf08      	it	eq
 800a8fc:	68ec      	ldreq	r4, [r5, #12]
 800a8fe:	e7da      	b.n	800a8b6 <_fflush_r+0x22>
 800a900:	0800b27c 	.word	0x0800b27c
 800a904:	0800b29c 	.word	0x0800b29c
 800a908:	0800b25c 	.word	0x0800b25c

0800a90c <std>:
 800a90c:	2300      	movs	r3, #0
 800a90e:	b510      	push	{r4, lr}
 800a910:	4604      	mov	r4, r0
 800a912:	e9c0 3300 	strd	r3, r3, [r0]
 800a916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a91a:	6083      	str	r3, [r0, #8]
 800a91c:	8181      	strh	r1, [r0, #12]
 800a91e:	6643      	str	r3, [r0, #100]	; 0x64
 800a920:	81c2      	strh	r2, [r0, #14]
 800a922:	6183      	str	r3, [r0, #24]
 800a924:	4619      	mov	r1, r3
 800a926:	2208      	movs	r2, #8
 800a928:	305c      	adds	r0, #92	; 0x5c
 800a92a:	f7fb fdcb 	bl	80064c4 <memset>
 800a92e:	4b05      	ldr	r3, [pc, #20]	; (800a944 <std+0x38>)
 800a930:	6263      	str	r3, [r4, #36]	; 0x24
 800a932:	4b05      	ldr	r3, [pc, #20]	; (800a948 <std+0x3c>)
 800a934:	62a3      	str	r3, [r4, #40]	; 0x28
 800a936:	4b05      	ldr	r3, [pc, #20]	; (800a94c <std+0x40>)
 800a938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a93a:	4b05      	ldr	r3, [pc, #20]	; (800a950 <std+0x44>)
 800a93c:	6224      	str	r4, [r4, #32]
 800a93e:	6323      	str	r3, [r4, #48]	; 0x30
 800a940:	bd10      	pop	{r4, pc}
 800a942:	bf00      	nop
 800a944:	0800ac61 	.word	0x0800ac61
 800a948:	0800ac83 	.word	0x0800ac83
 800a94c:	0800acbb 	.word	0x0800acbb
 800a950:	0800acdf 	.word	0x0800acdf

0800a954 <_cleanup_r>:
 800a954:	4901      	ldr	r1, [pc, #4]	; (800a95c <_cleanup_r+0x8>)
 800a956:	f000 b8af 	b.w	800aab8 <_fwalk_reent>
 800a95a:	bf00      	nop
 800a95c:	0800a895 	.word	0x0800a895

0800a960 <__sfmoreglue>:
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	2268      	movs	r2, #104	; 0x68
 800a964:	1e4d      	subs	r5, r1, #1
 800a966:	4355      	muls	r5, r2
 800a968:	460e      	mov	r6, r1
 800a96a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a96e:	f7ff fa59 	bl	8009e24 <_malloc_r>
 800a972:	4604      	mov	r4, r0
 800a974:	b140      	cbz	r0, 800a988 <__sfmoreglue+0x28>
 800a976:	2100      	movs	r1, #0
 800a978:	e9c0 1600 	strd	r1, r6, [r0]
 800a97c:	300c      	adds	r0, #12
 800a97e:	60a0      	str	r0, [r4, #8]
 800a980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a984:	f7fb fd9e 	bl	80064c4 <memset>
 800a988:	4620      	mov	r0, r4
 800a98a:	bd70      	pop	{r4, r5, r6, pc}

0800a98c <__sfp_lock_acquire>:
 800a98c:	4801      	ldr	r0, [pc, #4]	; (800a994 <__sfp_lock_acquire+0x8>)
 800a98e:	f000 b8b3 	b.w	800aaf8 <__retarget_lock_acquire_recursive>
 800a992:	bf00      	nop
 800a994:	20000c15 	.word	0x20000c15

0800a998 <__sfp_lock_release>:
 800a998:	4801      	ldr	r0, [pc, #4]	; (800a9a0 <__sfp_lock_release+0x8>)
 800a99a:	f000 b8ae 	b.w	800aafa <__retarget_lock_release_recursive>
 800a99e:	bf00      	nop
 800a9a0:	20000c15 	.word	0x20000c15

0800a9a4 <__sinit_lock_acquire>:
 800a9a4:	4801      	ldr	r0, [pc, #4]	; (800a9ac <__sinit_lock_acquire+0x8>)
 800a9a6:	f000 b8a7 	b.w	800aaf8 <__retarget_lock_acquire_recursive>
 800a9aa:	bf00      	nop
 800a9ac:	20000c16 	.word	0x20000c16

0800a9b0 <__sinit_lock_release>:
 800a9b0:	4801      	ldr	r0, [pc, #4]	; (800a9b8 <__sinit_lock_release+0x8>)
 800a9b2:	f000 b8a2 	b.w	800aafa <__retarget_lock_release_recursive>
 800a9b6:	bf00      	nop
 800a9b8:	20000c16 	.word	0x20000c16

0800a9bc <__sinit>:
 800a9bc:	b510      	push	{r4, lr}
 800a9be:	4604      	mov	r4, r0
 800a9c0:	f7ff fff0 	bl	800a9a4 <__sinit_lock_acquire>
 800a9c4:	69a3      	ldr	r3, [r4, #24]
 800a9c6:	b11b      	cbz	r3, 800a9d0 <__sinit+0x14>
 800a9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9cc:	f7ff bff0 	b.w	800a9b0 <__sinit_lock_release>
 800a9d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9d4:	6523      	str	r3, [r4, #80]	; 0x50
 800a9d6:	4b13      	ldr	r3, [pc, #76]	; (800aa24 <__sinit+0x68>)
 800a9d8:	4a13      	ldr	r2, [pc, #76]	; (800aa28 <__sinit+0x6c>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9de:	42a3      	cmp	r3, r4
 800a9e0:	bf04      	itt	eq
 800a9e2:	2301      	moveq	r3, #1
 800a9e4:	61a3      	streq	r3, [r4, #24]
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f000 f820 	bl	800aa2c <__sfp>
 800a9ec:	6060      	str	r0, [r4, #4]
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f000 f81c 	bl	800aa2c <__sfp>
 800a9f4:	60a0      	str	r0, [r4, #8]
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f000 f818 	bl	800aa2c <__sfp>
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	60e0      	str	r0, [r4, #12]
 800aa00:	2104      	movs	r1, #4
 800aa02:	6860      	ldr	r0, [r4, #4]
 800aa04:	f7ff ff82 	bl	800a90c <std>
 800aa08:	68a0      	ldr	r0, [r4, #8]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	2109      	movs	r1, #9
 800aa0e:	f7ff ff7d 	bl	800a90c <std>
 800aa12:	68e0      	ldr	r0, [r4, #12]
 800aa14:	2202      	movs	r2, #2
 800aa16:	2112      	movs	r1, #18
 800aa18:	f7ff ff78 	bl	800a90c <std>
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	61a3      	str	r3, [r4, #24]
 800aa20:	e7d2      	b.n	800a9c8 <__sinit+0xc>
 800aa22:	bf00      	nop
 800aa24:	0800ae18 	.word	0x0800ae18
 800aa28:	0800a955 	.word	0x0800a955

0800aa2c <__sfp>:
 800aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2e:	4607      	mov	r7, r0
 800aa30:	f7ff ffac 	bl	800a98c <__sfp_lock_acquire>
 800aa34:	4b1e      	ldr	r3, [pc, #120]	; (800aab0 <__sfp+0x84>)
 800aa36:	681e      	ldr	r6, [r3, #0]
 800aa38:	69b3      	ldr	r3, [r6, #24]
 800aa3a:	b913      	cbnz	r3, 800aa42 <__sfp+0x16>
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f7ff ffbd 	bl	800a9bc <__sinit>
 800aa42:	3648      	adds	r6, #72	; 0x48
 800aa44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	d503      	bpl.n	800aa54 <__sfp+0x28>
 800aa4c:	6833      	ldr	r3, [r6, #0]
 800aa4e:	b30b      	cbz	r3, 800aa94 <__sfp+0x68>
 800aa50:	6836      	ldr	r6, [r6, #0]
 800aa52:	e7f7      	b.n	800aa44 <__sfp+0x18>
 800aa54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa58:	b9d5      	cbnz	r5, 800aa90 <__sfp+0x64>
 800aa5a:	4b16      	ldr	r3, [pc, #88]	; (800aab4 <__sfp+0x88>)
 800aa5c:	60e3      	str	r3, [r4, #12]
 800aa5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa62:	6665      	str	r5, [r4, #100]	; 0x64
 800aa64:	f000 f847 	bl	800aaf6 <__retarget_lock_init_recursive>
 800aa68:	f7ff ff96 	bl	800a998 <__sfp_lock_release>
 800aa6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa74:	6025      	str	r5, [r4, #0]
 800aa76:	61a5      	str	r5, [r4, #24]
 800aa78:	2208      	movs	r2, #8
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa80:	f7fb fd20 	bl	80064c4 <memset>
 800aa84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa90:	3468      	adds	r4, #104	; 0x68
 800aa92:	e7d9      	b.n	800aa48 <__sfp+0x1c>
 800aa94:	2104      	movs	r1, #4
 800aa96:	4638      	mov	r0, r7
 800aa98:	f7ff ff62 	bl	800a960 <__sfmoreglue>
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	6030      	str	r0, [r6, #0]
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d1d5      	bne.n	800aa50 <__sfp+0x24>
 800aaa4:	f7ff ff78 	bl	800a998 <__sfp_lock_release>
 800aaa8:	230c      	movs	r3, #12
 800aaaa:	603b      	str	r3, [r7, #0]
 800aaac:	e7ee      	b.n	800aa8c <__sfp+0x60>
 800aaae:	bf00      	nop
 800aab0:	0800ae18 	.word	0x0800ae18
 800aab4:	ffff0001 	.word	0xffff0001

0800aab8 <_fwalk_reent>:
 800aab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aabc:	4606      	mov	r6, r0
 800aabe:	4688      	mov	r8, r1
 800aac0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aac4:	2700      	movs	r7, #0
 800aac6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aaca:	f1b9 0901 	subs.w	r9, r9, #1
 800aace:	d505      	bpl.n	800aadc <_fwalk_reent+0x24>
 800aad0:	6824      	ldr	r4, [r4, #0]
 800aad2:	2c00      	cmp	r4, #0
 800aad4:	d1f7      	bne.n	800aac6 <_fwalk_reent+0xe>
 800aad6:	4638      	mov	r0, r7
 800aad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aadc:	89ab      	ldrh	r3, [r5, #12]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d907      	bls.n	800aaf2 <_fwalk_reent+0x3a>
 800aae2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aae6:	3301      	adds	r3, #1
 800aae8:	d003      	beq.n	800aaf2 <_fwalk_reent+0x3a>
 800aaea:	4629      	mov	r1, r5
 800aaec:	4630      	mov	r0, r6
 800aaee:	47c0      	blx	r8
 800aaf0:	4307      	orrs	r7, r0
 800aaf2:	3568      	adds	r5, #104	; 0x68
 800aaf4:	e7e9      	b.n	800aaca <_fwalk_reent+0x12>

0800aaf6 <__retarget_lock_init_recursive>:
 800aaf6:	4770      	bx	lr

0800aaf8 <__retarget_lock_acquire_recursive>:
 800aaf8:	4770      	bx	lr

0800aafa <__retarget_lock_release_recursive>:
 800aafa:	4770      	bx	lr

0800aafc <__swhatbuf_r>:
 800aafc:	b570      	push	{r4, r5, r6, lr}
 800aafe:	460e      	mov	r6, r1
 800ab00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab04:	2900      	cmp	r1, #0
 800ab06:	b096      	sub	sp, #88	; 0x58
 800ab08:	4614      	mov	r4, r2
 800ab0a:	461d      	mov	r5, r3
 800ab0c:	da08      	bge.n	800ab20 <__swhatbuf_r+0x24>
 800ab0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	602a      	str	r2, [r5, #0]
 800ab16:	061a      	lsls	r2, r3, #24
 800ab18:	d410      	bmi.n	800ab3c <__swhatbuf_r+0x40>
 800ab1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab1e:	e00e      	b.n	800ab3e <__swhatbuf_r+0x42>
 800ab20:	466a      	mov	r2, sp
 800ab22:	f000 f903 	bl	800ad2c <_fstat_r>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	dbf1      	blt.n	800ab0e <__swhatbuf_r+0x12>
 800ab2a:	9a01      	ldr	r2, [sp, #4]
 800ab2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab34:	425a      	negs	r2, r3
 800ab36:	415a      	adcs	r2, r3
 800ab38:	602a      	str	r2, [r5, #0]
 800ab3a:	e7ee      	b.n	800ab1a <__swhatbuf_r+0x1e>
 800ab3c:	2340      	movs	r3, #64	; 0x40
 800ab3e:	2000      	movs	r0, #0
 800ab40:	6023      	str	r3, [r4, #0]
 800ab42:	b016      	add	sp, #88	; 0x58
 800ab44:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab48 <__smakebuf_r>:
 800ab48:	898b      	ldrh	r3, [r1, #12]
 800ab4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab4c:	079d      	lsls	r5, r3, #30
 800ab4e:	4606      	mov	r6, r0
 800ab50:	460c      	mov	r4, r1
 800ab52:	d507      	bpl.n	800ab64 <__smakebuf_r+0x1c>
 800ab54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	6123      	str	r3, [r4, #16]
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	6163      	str	r3, [r4, #20]
 800ab60:	b002      	add	sp, #8
 800ab62:	bd70      	pop	{r4, r5, r6, pc}
 800ab64:	ab01      	add	r3, sp, #4
 800ab66:	466a      	mov	r2, sp
 800ab68:	f7ff ffc8 	bl	800aafc <__swhatbuf_r>
 800ab6c:	9900      	ldr	r1, [sp, #0]
 800ab6e:	4605      	mov	r5, r0
 800ab70:	4630      	mov	r0, r6
 800ab72:	f7ff f957 	bl	8009e24 <_malloc_r>
 800ab76:	b948      	cbnz	r0, 800ab8c <__smakebuf_r+0x44>
 800ab78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab7c:	059a      	lsls	r2, r3, #22
 800ab7e:	d4ef      	bmi.n	800ab60 <__smakebuf_r+0x18>
 800ab80:	f023 0303 	bic.w	r3, r3, #3
 800ab84:	f043 0302 	orr.w	r3, r3, #2
 800ab88:	81a3      	strh	r3, [r4, #12]
 800ab8a:	e7e3      	b.n	800ab54 <__smakebuf_r+0xc>
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <__smakebuf_r+0x7c>)
 800ab8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab90:	89a3      	ldrh	r3, [r4, #12]
 800ab92:	6020      	str	r0, [r4, #0]
 800ab94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab98:	81a3      	strh	r3, [r4, #12]
 800ab9a:	9b00      	ldr	r3, [sp, #0]
 800ab9c:	6163      	str	r3, [r4, #20]
 800ab9e:	9b01      	ldr	r3, [sp, #4]
 800aba0:	6120      	str	r0, [r4, #16]
 800aba2:	b15b      	cbz	r3, 800abbc <__smakebuf_r+0x74>
 800aba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aba8:	4630      	mov	r0, r6
 800abaa:	f000 f8d1 	bl	800ad50 <_isatty_r>
 800abae:	b128      	cbz	r0, 800abbc <__smakebuf_r+0x74>
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	f023 0303 	bic.w	r3, r3, #3
 800abb6:	f043 0301 	orr.w	r3, r3, #1
 800abba:	81a3      	strh	r3, [r4, #12]
 800abbc:	89a0      	ldrh	r0, [r4, #12]
 800abbe:	4305      	orrs	r5, r0
 800abc0:	81a5      	strh	r5, [r4, #12]
 800abc2:	e7cd      	b.n	800ab60 <__smakebuf_r+0x18>
 800abc4:	0800a955 	.word	0x0800a955

0800abc8 <_malloc_usable_size_r>:
 800abc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abcc:	1f18      	subs	r0, r3, #4
 800abce:	2b00      	cmp	r3, #0
 800abd0:	bfbc      	itt	lt
 800abd2:	580b      	ldrlt	r3, [r1, r0]
 800abd4:	18c0      	addlt	r0, r0, r3
 800abd6:	4770      	bx	lr

0800abd8 <_raise_r>:
 800abd8:	291f      	cmp	r1, #31
 800abda:	b538      	push	{r3, r4, r5, lr}
 800abdc:	4604      	mov	r4, r0
 800abde:	460d      	mov	r5, r1
 800abe0:	d904      	bls.n	800abec <_raise_r+0x14>
 800abe2:	2316      	movs	r3, #22
 800abe4:	6003      	str	r3, [r0, #0]
 800abe6:	f04f 30ff 	mov.w	r0, #4294967295
 800abea:	bd38      	pop	{r3, r4, r5, pc}
 800abec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abee:	b112      	cbz	r2, 800abf6 <_raise_r+0x1e>
 800abf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abf4:	b94b      	cbnz	r3, 800ac0a <_raise_r+0x32>
 800abf6:	4620      	mov	r0, r4
 800abf8:	f000 f830 	bl	800ac5c <_getpid_r>
 800abfc:	462a      	mov	r2, r5
 800abfe:	4601      	mov	r1, r0
 800ac00:	4620      	mov	r0, r4
 800ac02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac06:	f000 b817 	b.w	800ac38 <_kill_r>
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d00a      	beq.n	800ac24 <_raise_r+0x4c>
 800ac0e:	1c59      	adds	r1, r3, #1
 800ac10:	d103      	bne.n	800ac1a <_raise_r+0x42>
 800ac12:	2316      	movs	r3, #22
 800ac14:	6003      	str	r3, [r0, #0]
 800ac16:	2001      	movs	r0, #1
 800ac18:	e7e7      	b.n	800abea <_raise_r+0x12>
 800ac1a:	2400      	movs	r4, #0
 800ac1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac20:	4628      	mov	r0, r5
 800ac22:	4798      	blx	r3
 800ac24:	2000      	movs	r0, #0
 800ac26:	e7e0      	b.n	800abea <_raise_r+0x12>

0800ac28 <raise>:
 800ac28:	4b02      	ldr	r3, [pc, #8]	; (800ac34 <raise+0xc>)
 800ac2a:	4601      	mov	r1, r0
 800ac2c:	6818      	ldr	r0, [r3, #0]
 800ac2e:	f7ff bfd3 	b.w	800abd8 <_raise_r>
 800ac32:	bf00      	nop
 800ac34:	20000020 	.word	0x20000020

0800ac38 <_kill_r>:
 800ac38:	b538      	push	{r3, r4, r5, lr}
 800ac3a:	4d07      	ldr	r5, [pc, #28]	; (800ac58 <_kill_r+0x20>)
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	4604      	mov	r4, r0
 800ac40:	4608      	mov	r0, r1
 800ac42:	4611      	mov	r1, r2
 800ac44:	602b      	str	r3, [r5, #0]
 800ac46:	f7f7 fb29 	bl	800229c <_kill>
 800ac4a:	1c43      	adds	r3, r0, #1
 800ac4c:	d102      	bne.n	800ac54 <_kill_r+0x1c>
 800ac4e:	682b      	ldr	r3, [r5, #0]
 800ac50:	b103      	cbz	r3, 800ac54 <_kill_r+0x1c>
 800ac52:	6023      	str	r3, [r4, #0]
 800ac54:	bd38      	pop	{r3, r4, r5, pc}
 800ac56:	bf00      	nop
 800ac58:	20000c10 	.word	0x20000c10

0800ac5c <_getpid_r>:
 800ac5c:	f7f7 bb16 	b.w	800228c <_getpid>

0800ac60 <__sread>:
 800ac60:	b510      	push	{r4, lr}
 800ac62:	460c      	mov	r4, r1
 800ac64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac68:	f000 f894 	bl	800ad94 <_read_r>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	bfab      	itete	ge
 800ac70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac72:	89a3      	ldrhlt	r3, [r4, #12]
 800ac74:	181b      	addge	r3, r3, r0
 800ac76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac7a:	bfac      	ite	ge
 800ac7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac7e:	81a3      	strhlt	r3, [r4, #12]
 800ac80:	bd10      	pop	{r4, pc}

0800ac82 <__swrite>:
 800ac82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac86:	461f      	mov	r7, r3
 800ac88:	898b      	ldrh	r3, [r1, #12]
 800ac8a:	05db      	lsls	r3, r3, #23
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	4616      	mov	r6, r2
 800ac92:	d505      	bpl.n	800aca0 <__swrite+0x1e>
 800ac94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac98:	2302      	movs	r3, #2
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f000 f868 	bl	800ad70 <_lseek_r>
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acaa:	81a3      	strh	r3, [r4, #12]
 800acac:	4632      	mov	r2, r6
 800acae:	463b      	mov	r3, r7
 800acb0:	4628      	mov	r0, r5
 800acb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acb6:	f000 b817 	b.w	800ace8 <_write_r>

0800acba <__sseek>:
 800acba:	b510      	push	{r4, lr}
 800acbc:	460c      	mov	r4, r1
 800acbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc2:	f000 f855 	bl	800ad70 <_lseek_r>
 800acc6:	1c43      	adds	r3, r0, #1
 800acc8:	89a3      	ldrh	r3, [r4, #12]
 800acca:	bf15      	itete	ne
 800accc:	6560      	strne	r0, [r4, #84]	; 0x54
 800acce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acd6:	81a3      	strheq	r3, [r4, #12]
 800acd8:	bf18      	it	ne
 800acda:	81a3      	strhne	r3, [r4, #12]
 800acdc:	bd10      	pop	{r4, pc}

0800acde <__sclose>:
 800acde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace2:	f000 b813 	b.w	800ad0c <_close_r>
	...

0800ace8 <_write_r>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	4d07      	ldr	r5, [pc, #28]	; (800ad08 <_write_r+0x20>)
 800acec:	4604      	mov	r4, r0
 800acee:	4608      	mov	r0, r1
 800acf0:	4611      	mov	r1, r2
 800acf2:	2200      	movs	r2, #0
 800acf4:	602a      	str	r2, [r5, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	f7f7 fb07 	bl	800230a <_write>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d102      	bne.n	800ad06 <_write_r+0x1e>
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	b103      	cbz	r3, 800ad06 <_write_r+0x1e>
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	bd38      	pop	{r3, r4, r5, pc}
 800ad08:	20000c10 	.word	0x20000c10

0800ad0c <_close_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4d06      	ldr	r5, [pc, #24]	; (800ad28 <_close_r+0x1c>)
 800ad10:	2300      	movs	r3, #0
 800ad12:	4604      	mov	r4, r0
 800ad14:	4608      	mov	r0, r1
 800ad16:	602b      	str	r3, [r5, #0]
 800ad18:	f7f7 fb13 	bl	8002342 <_close>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	d102      	bne.n	800ad26 <_close_r+0x1a>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	b103      	cbz	r3, 800ad26 <_close_r+0x1a>
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
 800ad28:	20000c10 	.word	0x20000c10

0800ad2c <_fstat_r>:
 800ad2c:	b538      	push	{r3, r4, r5, lr}
 800ad2e:	4d07      	ldr	r5, [pc, #28]	; (800ad4c <_fstat_r+0x20>)
 800ad30:	2300      	movs	r3, #0
 800ad32:	4604      	mov	r4, r0
 800ad34:	4608      	mov	r0, r1
 800ad36:	4611      	mov	r1, r2
 800ad38:	602b      	str	r3, [r5, #0]
 800ad3a:	f7f7 fb0e 	bl	800235a <_fstat>
 800ad3e:	1c43      	adds	r3, r0, #1
 800ad40:	d102      	bne.n	800ad48 <_fstat_r+0x1c>
 800ad42:	682b      	ldr	r3, [r5, #0]
 800ad44:	b103      	cbz	r3, 800ad48 <_fstat_r+0x1c>
 800ad46:	6023      	str	r3, [r4, #0]
 800ad48:	bd38      	pop	{r3, r4, r5, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20000c10 	.word	0x20000c10

0800ad50 <_isatty_r>:
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	4d06      	ldr	r5, [pc, #24]	; (800ad6c <_isatty_r+0x1c>)
 800ad54:	2300      	movs	r3, #0
 800ad56:	4604      	mov	r4, r0
 800ad58:	4608      	mov	r0, r1
 800ad5a:	602b      	str	r3, [r5, #0]
 800ad5c:	f7f7 fb0d 	bl	800237a <_isatty>
 800ad60:	1c43      	adds	r3, r0, #1
 800ad62:	d102      	bne.n	800ad6a <_isatty_r+0x1a>
 800ad64:	682b      	ldr	r3, [r5, #0]
 800ad66:	b103      	cbz	r3, 800ad6a <_isatty_r+0x1a>
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	bd38      	pop	{r3, r4, r5, pc}
 800ad6c:	20000c10 	.word	0x20000c10

0800ad70 <_lseek_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4d07      	ldr	r5, [pc, #28]	; (800ad90 <_lseek_r+0x20>)
 800ad74:	4604      	mov	r4, r0
 800ad76:	4608      	mov	r0, r1
 800ad78:	4611      	mov	r1, r2
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	602a      	str	r2, [r5, #0]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	f7f7 fb06 	bl	8002390 <_lseek>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d102      	bne.n	800ad8e <_lseek_r+0x1e>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	b103      	cbz	r3, 800ad8e <_lseek_r+0x1e>
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	20000c10 	.word	0x20000c10

0800ad94 <_read_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4d07      	ldr	r5, [pc, #28]	; (800adb4 <_read_r+0x20>)
 800ad98:	4604      	mov	r4, r0
 800ad9a:	4608      	mov	r0, r1
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	2200      	movs	r2, #0
 800ada0:	602a      	str	r2, [r5, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	f7f7 fa94 	bl	80022d0 <_read>
 800ada8:	1c43      	adds	r3, r0, #1
 800adaa:	d102      	bne.n	800adb2 <_read_r+0x1e>
 800adac:	682b      	ldr	r3, [r5, #0]
 800adae:	b103      	cbz	r3, 800adb2 <_read_r+0x1e>
 800adb0:	6023      	str	r3, [r4, #0]
 800adb2:	bd38      	pop	{r3, r4, r5, pc}
 800adb4:	20000c10 	.word	0x20000c10

0800adb8 <_init>:
 800adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adba:	bf00      	nop
 800adbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adbe:	bc08      	pop	{r3}
 800adc0:	469e      	mov	lr, r3
 800adc2:	4770      	bx	lr

0800adc4 <_fini>:
 800adc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc6:	bf00      	nop
 800adc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adca:	bc08      	pop	{r3}
 800adcc:	469e      	mov	lr, r3
 800adce:	4770      	bx	lr
